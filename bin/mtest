#!/usr/bin/env python

# Runs the tests in multiple threads.

from collections import defaultdict
from fnmatch import fnmatch
from itertools import groupby
from operator import itemgetter
from operator import methodcaller
from threading import Thread
import math
import os
import os.path
import shlex
import subprocess
import sys
import tempfile
import time

os.environ['PYTHONDONTWRITEBYTECODE'] = '1'

PROCESSORS = int(os.environ.get('MTEST_PROCESSORS', '4'))

if os.environ.get('TERM') == 'dumb' \
        or os.environ.get('MTEST_NOCOLORS', None):
    # no colors supported, e.g. emacs
    COLORS = ('%s',) * PROCESSORS
else:
    COLORS = (
        '\033[0;31m%s\033[00m',  # red
        '\033[0;32m%s\033[00m',  # green
        '\033[0;33m%s\033[00m',  # yellow
        '\033[0;34m%s\033[00m',  # blue
        '\033[0;35m%s\033[00m',  # purple
        '\033[0;36m%s\033[00m',  # magenta
        ) * int(math.ceil(PROCESSORS / 6.0))

BUILDOUT_PATH = os.path.abspath(os.path.join(__file__, '..', '..'))
OPENGEVER_PATH = os.path.join(BUILDOUT_PATH, 'opengever')


def main():
    # Remove *.py[co] files to avoid race conditions with parallel workers
    # stepping on each other's toes when trying to clean up stale bytecode.
    #
    # Setting PYTHONDONTWRITEBYTECODE is not enough, because running buildout
    # also already precompiles bytecode for some eggs.
    remove_bytecode_files(OPENGEVER_PATH)
    remove_bytecode_files('src')

    threads = []
    exitcodes = []
    output = []

    for index, cmd in enumerate(processor_commands()):
        name = 'WORKER{0}'.format(index)
        output_file = tempfile.NamedTemporaryFile()
        output.append((name, COLORS[index], output_file))
        thread = Thread(
            target=execute_command,
            name=name,
            args=(cmd, name, output_file.name, exitcodes))
        threads.append(thread)

    with BufferedPrinter(output):
        for thread in threads:
            thread.start()
            time.sleep(0.0001)  # work around simultaneous print
        map(methodcaller('join'), threads)

    print 'FINISHED with exitcodes:', ', '.join(
        map(str, set(exitcodes)))
    sys.exit(max(exitcodes))

class BufferedPrinter(Thread):
    def __init__(self, output):
        super(BufferedPrinter, self).__init__()
        self.output = output

    def __enter__(self):
        self.start()

    def run(self):
        self.running = True
        while self.running:
            for prefix, colorization, fd in self.output:
                while True:
                    line = fd.readline()
                    if not line:
                        break
                    print colorization % (
                        '{0}: {1}'.format(prefix, line.rstrip('\n')))

    def __exit__(self, *a, **kw):
        self.running = False
        self.join()

def execute_command(command, workername, output_path, exitcodes):
    print '{0}: > {1}'.format(workername, command)

    with open(output_path, 'wb', 1) as output:
        args = shlex.split(command)
        proc = subprocess.Popen(args, stdout=output, stderr=output)
        code = proc.wait()
    exitcodes.append(code)
    print '{0}: TERMINATED with exitcode {1}'.format(workername, code)

def processor_commands():
    test_path = os.path.relpath(
        os.path.join(BUILDOUT_PATH, 'bin', 'test'))
    for packages in packages_for_processors():
        params = ' '.join(('-m {0}'.format(pkg) for pkg in packages))
        command = '{test_path} -q --no-progress {params}'.format(
            **locals())
        yield command

def packages_for_processors():
    packages = packages_by_size()
    distribution = map(lambda x: x % PROCESSORS,
                       range(len(packages)))

    procs = defaultdict(list)
    for proc, pkg in zip(distribution, packages):
        procs[proc].append(pkg)

    return procs.values()

def packages_by_size():
    return map(itemgetter(1),
               sorted(map(lambda pair: (len(list(pair[1])), pair[0]),
                          test_suites_by_packages()),
                      reverse=True))

def remove_bytecode_files(path):
    print "Removing bytecode files from %r" % path
    for filename in find_bytecode_files(path):
        os.unlink(filename)


def find_bytecode_files(path):
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch(name, '*.py[co]'):
                yield os.path.join(root, name)

def test_suites():
    for dirpath, dirnames, filenames in os.walk(OPENGEVER_PATH):
        for filename in filenames:
            filepath = os.path.join(dirpath, filename)
            if fnmatch(filepath, '**/tests/test*.py'):
                yield filepath

def test_suites_by_packages():
    return groupby(map(split_suite_path, test_suites()), itemgetter(0))

def split_suite_path(path):
    pkg, fname = (path.replace(BUILDOUT_PATH + '/', '')
                  .split('/tests/'))
    pkg = pkg.replace('/', '.')
    return pkg, fname


if __name__ == '__main__':
    main()
