Testing stuff used below
========================

Imports:

    >>> from opengever.ogds.base.setuphandlers import _create_example_client
    >>> from opengever.ogds.base.setuphandlers import _create_example_user
    >>> from opengever.ogds.base.utils import create_session
    >>> from opengever.ogds.base.vocabulary import ContactsVocabulary
    >>> from zope.component import getUtility
    >>> from zope.schema.interfaces import IVocabularyFactory
    >>> from zope.schema.vocabulary import SimpleTerm
    >>> import types
    >>> from zope.globalrequest import setRequest

Helper method for printing terms:

    >>> def fterms(data):
    ...     """Formats terms for printing"""
    ...     if isinstance(data, types.ListType):
    ...         return [fterms(item) for item in data]
    ...     elif isinstance(data, types.TupleType):
    ...         return tuple([fterms(item) for item in data])
    ...     elif isinstance(data, SimpleTerm):
    ...         return '<Term %s:%s>' % (data.value, data.title)
    ...     elif isinstance(data, types.GeneratorType):
    ...         return fterms(list(data))
    ...     else:
    ...         return data

Globals:

    >>> app = layer.get('app')
    >>> portal = layer.get('portal')
    >>> request = layer.get('request')


Test searchable vocabulary
==========================

See `opengever.ogds.base.vocabulary`

Test our custom searchable vocabulary:

    >>> def key_value_provider():
    ...     yield ('first-entry', 'First Entry')
    ...     yield ('second-entry', 'Second Entry')
    ...     yield ('third-entry', 'Third Entry')
    ...     yield ('fourth-entry', 'Fourth')

    >>> fterms(ContactsVocabulary.get_terms_from_provider(key_value_provider))
    [u'<Term first-entry:First Entry>', u'<Term second-entry:Second Entry>', u'<Term third-entry:Third Entry>', u'<Term fourth-entry:Fourth>']

    >>> voc = ContactsVocabulary.create_with_provider(key_value_provider)
    >>> print voc
    <opengever.ogds.base.vocabulary.ContactsVocabulary object at ...>

    >>> len(voc)
    4

    >>> fterms(voc.search('fi en'))
    ['<Term first-entry:First Entry>']

    >>> fterms(voc.search('en fi'))
    ['<Term first-entry:First Entry>']

    >>> fterms(voc.search('rst'))
    ['<Term first-entry:First Entry>']

No fuzzy support:
    >>> fterms(voc.search('firt'))
    []


Test custom vocabularies
========================

See `opengever.ogds.base.vocabularies`

Lets set up some users and clients for testing the vocabularies with:

    >>> session = create_session()


Users:

    >>> _create_example_user(session, portal,
    ...                      'hugo.boss',
    ...                      {'firstname': 'Hugo',
    ...                       'lastname': 'Boss',
    ...                       'email': 'hugo@boss.local',
    ...                       'email2': 'hugo@private.ch'},
    ...                      ('client1_users',
    ...                       'client1_inbox_users'))

    >>> _create_example_user(session, portal,
    ...                      'peter.muster',
    ...                      {'firstname': 'Peter',
    ...                       'lastname': 'Muster'},
    ...                      ('client2_users',
    ...                       'client2_inbox_users'))

    >>> _create_example_user(session, portal,
    ...                      'hanspeter.linder',
    ...                      {'firstname': 'Hans-Peter',
    ...                       'lastname': 'Linder'},
    ...                      ('client2_users',
    ...                       'client2_inbox_users',
    ...                       'client1_users'))

Clients:

    >>> _create_example_client(session, 'client1',
    ...                       {'title': 'Client 1',
    ...                        'ip_address': '127.0.0.1',
    ...                        'site_url': 'http://nohost/client1',
    ...                        'public_url': 'http://nohost/client1',
    ...                        'group': 'client1_users',
    ...                        'inbox_group': 'client1_inbox_users'})

    >>> _create_example_client(session, 'client2',
    ...                       {'title': 'Client 2',
    ...                        'ip_address': '127.0.0.1',
    ...                        'site_url': 'http://nohost/client2',
    ...                        'public_url': 'http://nohost/client2',
    ...                        'group': 'client2_users',
    ...                        'inbox_group': 'client2_inbox_users'})

    >>> _create_example_client(session, 'client3',
    ...                       {'title': 'Client 3',
    ...                        'enabled': False,
    ...                        'ip_address': '127.0.0.1',
    ...                        'site_url': 'http://nohost/client3',
    ...                        'public_url': 'http://nohost/client3',
    ...                        'group': 'client3_users',
    ...                        'inbox_group': 'client3_inbox_users'})



The current client is client1. Now let's login as hugo.boss for the tests.

    >>> from plone.app.testing import login, logout
    >>> logout()
    >>> login(portal, 'hugo.boss')


Users vocabulary
----------------

List all active users.

    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.UsersVocabulary')
    >>> fact
    <opengever.ogds.base.vocabularies.UsersVocabularyFactory object at ...>
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term hugo.boss:Boss Hugo>', u'<Term peter.muster:Muster Peter>', u'<Term hanspeter.linder:Linder Hans-Peter>']



Users and inboxes vocabulary
----------------------------

Vocabulary of all users and all inboxes of a specific client. The client
is defined in the request either with key "client" or with key
"form.widgets.responsible_client".

    >>> request.set('client', 'client2')
    >>> setRequest(request)
    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.UsersAndInboxesVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term hanspeter.linder:Linder Hans-Peter>', u'<Term peter.muster:Muster Peter>', u'<Term inbox:client2:Inbox: Client 2>']

    >>> request.set('client', 'client1')
    >>> setRequest(request)
    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.UsersAndInboxesVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term hanspeter.linder:Linder Hans-Peter>', u'<Term hugo.boss:Boss Hugo>', u'<Term inbox:client1:Inbox: Client 1>']

    >>> request.set('client', None)



Assigned users
--------------

Vocabulary of all users assigned to the current client.

    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.AssignedUsersVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term hanspeter.linder:Linder Hans-Peter>', u'<Term hugo.boss:Boss Hugo>']



Contacts vocabulary
-------------------

Vocabulary of contacts.

XXX



Contacts and users vocabulary
-----------------------------

Vocabulary of contacts and users.

XXX



Email contacts and users vocabulary
-----------------------------------

Vocabulary containing all users and contacts with each e-mail
address they have.

XXX



Clients vocabulary
------------------

Vocabulary of all enabled clients (including the current one).

    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.ClientsVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term client1:Client 1>', u'<Term client2:Client 2>']



Assigned clients vocabulary
---------------------------

Vocabulary of all assigned clients (=home clients) of the
current user. The current client is not included!

    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.AssignedClientsVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    []

    >>> logout()
    >>> login(portal, 'peter.muster')

    >>> fact = getUtility(IVocabularyFactory,
    ...                   name='opengever.ogds.base.AssignedClientsVocabulary')
    >>> voc = fact(portal)
    >>> fterms(list(voc))
    [u'<Term client2:Client 2>']

    >>> logout()
    >>> login(portal, 'hugo.boss')



Home dossiers vocabulary
------------------------

XXX


Documents in selected dossier vocabulary
----------------------------------------

XXX
