Transporter tests
=================

We test the transporter using only one client since the setup is much
easier and the remote request are in fact a separate tool.

Imports:

    >>> from opengever.ogds.base.interfaces import ITransporter
    >>> from opengever.ogds.base.setuphandlers import _create_example_client
    >>> from opengever.ogds.base.testing import create_contacts
    >>> from opengever.ogds.base.utils import create_session
    >>> from plone.app.testing import login, logout
    >>> from plone.dexterity.fti import DexterityFTI
    >>> from plone.dexterity.utils import createContentInContainer
    >>> from zope.component import getUtility
    >>> from zope.globalrequest import setRequest

Globals:

    >>> app = layer.get('app')
    >>> portal = layer.get('portal')
    >>> request = layer.get('request')


Setup
-----

Set up a client for testing:

    >>> session = create_session()

    >>> _create_example_client(session, 'client1',
    ...                       {'title': 'Client 1',
    ...                        'ip_address': '127.0.0.1',
    ...                        'site_url': 'http://nohost/plone',
    ...                        'public_url': 'http://nohost/plone'})



FTI
---

Create a default FTI which has a title and a description.

    >>> fti = DexterityFTI('TransporterTestFTI',
    ...                    klass="plone.dexterity.content.Container",
    ...                    global_allow=True,
    ...                    filter_content_types=False)
    >>> fti.behaviors = ('plone.app.content.interfaces.INameFromTitle',)
    >>> portal.portal_types._setObject('TransporterTestFTI', fti)
    'TransporterTestFTI'
    >>> schema = fti.lookupSchema()


Get the transporter utility:

    >>> transporter = getUtility(ITransporter)

Popuate the request:

    >>> setRequest(request)


Pulling a object
----------------

Let's create a container first. We don't wanna test it on the plone site
since it's not dexterity.

    >>> folder = createContentInContainer(portal, 'TransporterTestFTI',
    ...                                   checkConstraints=False,
    ...                                   title='Folder')
    >>> folder
    <Container at /plone/folder>


We need to create a dexterity object first.

    >>> obj1 = createContentInContainer(folder, 'TransporterTestFTI',
    ...                                 checkConstraints=False,
    ...                                 title='Foo',
    ...                                 description='Bar')
    >>> obj1
    <Container at /plone/folder/foo>
    >>> obj1.title
    'Foo'
    >>> obj1.description
    'Bar'


Pull the object:

    >>> obj2 = transporter.transport_from(folder, 'client1', 'folder/foo')
    >>> obj2
    <Container at /plone/folder/foo-1>
    >>> obj2.title
    'Foo'
    >>> obj2.description
    'Bar'


Pushing a object
----------------

Let's push obj2 back:

    >>> response = transporter.transport_to(obj2, 'client1', 'folder')
    >>> path3 = response.read()
    >>> path3
    'folder/foo-2'

    >>> obj3 = portal.restrictedTraverse(path3)
    >>> obj3
    <Container at /plone/folder/foo-2>

    >>> obj3.title
    'Foo'
    >>> obj2.description
    'Bar'
