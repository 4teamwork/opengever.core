from zope import schema
from zope.component.interfaces import IObjectEvent
from zope.interface import Interface


# custom plone.formwidget.namedfile modes
NO_DOWNLOAD_DISPLAY_MODE = 'no_download_display'
NO_DOWNLOAD_INPUT_MODE = 'no_download_input'


class IObjectCheckedOutEvent(IObjectEvent):
    """Event interface for events.ObjectCheckedOutEvent."""

    comment = schema.Text(title=u'journal comment')


class IObjectCheckedInEvent(IObjectEvent):
    """Event interface for events.ObjectCheckedInEvent."""

    comment = schema.Text(title=u'journal comment')


class IObjectBeforeCheckInEvent(IObjectEvent):
    """Event interface for events.ObjectBeforeCheckInEvent."""


class IObjectCheckoutCanceledEvent(IObjectEvent):
    """Event interface for events.ObjectCheckoutCanceledEvent."""


class IObjectRevertedToVersion(IObjectEvent):
    """The object was reverted back to a specific version."""

    comment = schema.Text(title=u'journal comment')


class IFileCopyDownloadedEvent(IObjectEvent):
    """Event interface for event.FileDownloadedEvent."""


class IFileAttachedToEmailEvent(IObjectEvent):
    """The file was attached to an email with OfficeConnector."""


class IDocumentType(Interface):
    """An interface to distinguish between different document types."""

    document_types = schema.List(
        title=u"Document Type",
        value_type=schema.Choice(
            title=u"Name",
            vocabulary=u'opengever.document.document_types',
        ),
    )


class IAutoGeneratedDocument(Interface):
    """A marker interface to distinguish between user-added documents
    and documents added automatically by GEVER."""


class IDossierTasksPDFMarker(IAutoGeneratedDocument):
    """Marker Interface for dossier tasks list document."""


class IDossierJournalPDFMarker(IAutoGeneratedDocument):
    """Marker Interface for dossier journal document."""


class ITemplateDocumentMarker(Interface):
    """Marker Interface for template documents."""


PRESERVED_AS_PAPER_DEFAULT = True


class IDocumentSettings(Interface):
    """Registry interface with general document settings."""

    preserved_as_paper_default = schema.Bool(
        title=u"Client default for preserved_as_paper",
        default=PRESERVED_AS_PAPER_DEFAULT,
    )

    upload_filetypes_blacklist = schema.List(
        title=u'File extensions blacklisted from upload',
        description=u'A list of blacklisted file extensions.'
        u'An error will be raised if a user tries to upload a file with '
        u'one of the listed file extensions.',
        value_type=schema.ASCIILine(),
        default=[],
        missing_value=[],
    )


class ICheckinCheckoutManager(Interface):
    """Interface for the checkin / checkout manager.
    """

    def get_checked_out_by():
        """If the document is checked out, this method returns the userid
        of the user who has checked out the document, otherwise it
        returns `None`.
        """

    def is_checkout_allowed():
        """Checks whether checkout is allowed for the current user on the
        adapted document.
        """

    def checkout():
        """Checkout the adapted document.
        """

    def is_checked_out_by_current_user():
        """Returns True if the document is checked out by the currently
        logged in user otherwise False.
        """

    def is_checkin_allowed():
        """Checks whether checkin is allowed for the current user on the
        adapted document.
        """

    def checkin(comment=None):
        """Checkin the adapted document, using the `comment` for the
        journal entry.
        """

    def is_cancel_allowed():
        """Checks whether the user is able to cancel a checkout.
        """

    def cancel():
        """Cancel the current checkout.
        """


class IDocumentIndexer(Interface):
    """Describes an adapter that is able to extract plain text from files
    contained in opengever.document.document objects.
    """

    def extract_text():
        """Extract plain text from the adapted document.
        """


class IDocumentSavedAsPDFMarker(Interface):
    """Marker Interface for documents that are copies of another document
    in PDF format. Such documents contain the Source document and version
    in their annotations."""


class IFileActions(Interface):
    """Knows availability of specific ations from the `file_actions` category.
    """

    def is_edit_metadata_action_available():
        """Return whether the action to edit metadata is available."""

    def is_any_checkout_or_edit_available():
        """Return whether any of the checkout or edit actions are available."""

    def is_office_online_edit_action_available():
        """Return whether the edit with Office Online action is available."""

    def is_oc_view_action_available():
        """Return whether OfficeConnector view document action is available.
        """

    def is_oc_direct_checkout_action_available():
        """Return whether OfficeConnector direct checkout action is available.
        """

    def is_oc_direct_edit_action_available():
        """Return whether OfficeConnector direct edit action is available.
        """

    def is_oc_zem_checkout_action_available():
        """Return whether deprecated ZEM OfficeConnector checkout action
        is available.
        """

    def is_oc_zem_edit_action_available():
        """Return whether deprecated ZEM OfficeConnector edit action
        is available.
        """

    def is_oc_unsupported_file_checkout_action_available():
        """Return whether checkout action for unsupported OfficeConnector
        types is available."""

    def is_checkin_without_comment_available():
        """Return whether checkin without comment action is available.
        """

    def is_checkin_with_comment_available():
        """Return whether checkin with comment action is available.
        """

    def is_cancel_checkout_action_available():
        """Return whether cancel checkout action is available."""

    def is_download_copy_action_available():
        """Return download copy action is available."""

    def is_attach_to_email_action_available():
        """Return whether attach to email action is available."""

    def is_oneoffixx_retry_action_available():
        """Return whether oneoffixx retry action is available."""

    def is_docugate_retry_action_available():
        """Return whether Docugate retry action is available."""

    def is_open_as_pdf_action_available():
        """Return whether the open aos pdf action is available."""

    def is_revert_to_version_action_available():
        """Return whether the revert to version action is available."""

    def is_trash_context_action_available():
        """Return whether the trash_context action is available."""

    def is_untrash_context_action_available():
        """Return whether the untrash_context action is available."""

    def is_delete_workspace_context_action_available():
        """Return whether the delete_workspace_context action is available."""

    def is_new_task_from_document_available():
        """Return whether the new_task_from_document action is available."""

    def is_unlock_available():
        """Return whether the unlock action is available."""
