copy_item function
==================

imports:

    >>> app = layer.get('app')
    >>> portal = layer.get('portal')
    >>> from plone.dexterity.fti import DexterityFTI
    >>> from Products.CMFCore.utils import getToolByName

    >>> ptool = getToolByName(portal, 'plone_utils')
    >>> from OFS.CopySupport import _cb_decode
    >>> from plone.dexterity.utils import createContentInContainer

create test container and object fti:
    >>> container = DexterityFTI('OpenGeverBaseContainer2',
    ...         klass="plone.dexterity.content.Container",
    ...         global_allow=True, filter_content_types=False)
    >>> portal.portal_types._setObject('OpenGeverBaseContainer2', container)
    'OpenGeverBaseContainer2'
    >>> fti = DexterityFTI('OpenGeverBaseFTI')
    >>> fti.schema = 'opengever.base.tests.layer.IEmptySchema'
    >>> fti.behaviors = (
    ...                  'opengever.base.behaviors.base.IOpenGeverBase',
    ...                  )
    >>> portal.portal_types._setObject('OpenGeverBaseFTI', fti)
    'OpenGeverBaseContainer2'

create test objects:
    >>> createContentInContainer(portal, 'OpenGeverBaseContainer2', title=u'container')
    <Container at /plone/opengeverbasecontainer>
    >>> folder = portal['opengeverbasecontainer']
    >>> createContentInContainer(folder, 'OpenGeverBaseFTI', title=u'doc')
    <Item at /plone/opengeverbasecontainer/opengeverbasefti>
    >>> doc = folder['opengeverbasefti']

test copy_items view:

should select any items
    >>> folder.restrictedTraverse('copy_items')()
    'http://nohost/plone/opengeverbasecontainer'
    >>> ptool.showPortalMessages()[-1].message
    u'You have not selected any Items'

Fake Itemselection
    >>> portal.REQUEST['paths'] = ['/'.join(doc.getPhysicalPath())]
    >>> folder.restrictedTraverse('copy_items')()
    'http://nohost/plone/opengeverbasecontainer'
    >>> '__cp' in portal.REQUEST.keys()
    True

Check if Item has been saved to REQUEST
    >>> _cb_decode(portal.REQUEST['__cp'])
    (0, [('', 'plone', 'opengeverbasecontainer', 'opengeverbasefti')])

Add Second Item to test with multiple Items Selected
    >>> createContentInContainer(folder, 'OpenGeverBaseFTI', title=u'doc2')
    <Item at /plone/opengeverbasecontainer/opengeverbasefti-1>
    >>> doc2 = folder['opengeverbasefti-1']

Add Item to Paths
    >>> portal.REQUEST['paths'].append('/'.join(doc2.getPhysicalPath()))
    >>> folder.restrictedTraverse('copy_items')()
    'http://nohost/plone/opengeverbasecontainer'
    >>> '__cp' in portal.REQUEST.keys()
    True

Test if they were copied correctly
    >>> copiedItems = portal.REQUEST['__cp'].split(':')
    >>> _cb_decode(copiedItems[0])
    (0, [('', 'plone', 'opengeverbasecontainer', 'opengeverbasefti')])
    >>> _cb_decode(copiedItems[1])
    (0, [('', 'plone', 'opengeverbasecontainer', 'opengeverbasefti-1')])

Take away Copy permission 
    >>> doc.manage_permission('Copy or Move', [], acquire=False)
    >>> folder.restrictedTraverse('copy_items')()
    'http://nohost/plone/opengeverbasecontainer'

Should not be able to copy the file
    >>> ptool.showPortalMessages()[-1].message
    u'The item you selected cannot be copied'
