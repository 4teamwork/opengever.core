OpenGever uniqe ID utility
==========================


The Opengever unique ID behavior utility a uniqueID.

    >>> from zope.component import getUtility
    >>> from opengever.base.interfaces import IOGUid
    >>> from plone.registry.interfaces import IRegistry


We need to set the client ID:

    >>> registry = getUtility(IRegistry)
    >>> registry['opengever.octopus.tentacle.interfaces.ITentacleRegistry.cid'] = u'm1'


Get the utility:

    >>> provider = getUtility(IOGUid)


Get the ID of the folder:

    >>> oguid = provider.get_id(self.folder)
    >>> print oguid
    m1:...


Every call with the same object gives the same ID:

    >>> oguid == provider.get_id(self.folder)
    True


The object is on the current client:

    >>> provider.is_on_current_client(oguid)
    True
    >>> provider.is_on_current_client('another-client:123123')
    False


We should also be able to get the object:

    >>> provider.get_object(oguid) == self.folder
    True


Mock solr:

    >>> from zope.interface import implements
    >>> from opengever.globalsolr.interfaces import ISearch
    >>> from zope.component import provideUtility

    >>> class FakeFlair(object):
    ...     
    ...     def __init__(self, cid, iid):
    ...         self.cid = cid
    ...         self.iid = iid
    ...         
    ...     def __str__(self):
    ...         return '<FakeFlair %s : %s>' % (self.cid, self.iid)
    ...     
    ...     __repr__ = __str__
    ...     __unicode__ = __str__

    >>> class MockTaskSearch(object):
    ...     implements(ISearch)
    ...     
    ...     def search(self, query, **parameters):
    ...         return [FakeFlair(query.get('client_id'), query.get('intid'))]
    ...     
    ...     __call__ = search

    >>> provideUtility(MockTaskSearch())

The `get_object()` method should not fail:

    >>> print provider.get_object('another-client:123123')
    None


We should be able to get a solr flair representation:

    >>> provider.get_flair(oguid)
    <FakeFlair m1 : ...>
