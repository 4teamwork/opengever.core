<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="opengever.base"
      tal:omit-tag="">
  <head>
  </head>

  <body>

    <tal:comment replace="nothing">
    Render overview boxes in a generic way. Can display brains, dicts or sqlalchemy objects.
    Currently will assume than an sqlalchemy-object is a task.

    css_width: a number indicating the width percentage.
    base_index: optional, it not defined will take 0 as default.
    </tal:comment>

    <metal:define define-macro="overview_boxes">

      <tal:block tal:repeat="boxes view/boxes"
                 tal:define="base_index base_index | python: 0">
      <div tal:define="repeat_index repeat/boxes/index;
                       box_id python: base_index + repeat_index;"
           tal:attributes="class string:boxGroup boxGroup${box_id};
                           style string:width:${css_width}%">
        <div tal:repeat="box boxes" class="box" tal:attributes="id string:${box/id}Box">
          <tal:condition tal:condition="python: box.get('available', True)">

            <h2 i18n:translate="" tal:content="box/label|box/id"></h2>

            <tal:box tal:condition="python: not hasattr(box.get('content'), '__iter__')">
              <tal:item  tal:condition="box/content">
                <span tal:condition="python: box.get('is_html')" tal:content="structure box/content" />
                <span tal:condition="python: not box.get('is_html')" tal:content="box/content" />
              </tal:item>
              <tal:item tal:condition="not: box/content">
                <span tal:condition="python: box.get('has_empty_marker', True)"
                    i18n:translate=""
                    i18n:domain="opengever.base">
                    No content
                </span>
              </tal:item>
            </tal:box>

            <tal:box tal:condition="python: hasattr(box.get('content'), '__iter__')">
              <tal:items define="items box/content">
                <ul tal:condition="items">
                  <li tal:repeat="item items">

                    <tal:comment replace="nothing">
                      Item is a widget:
                    </tal:comment>
                    <tal:brain tal:condition="python: view.get_type(item) == 'widget'">
                      <tal:cond tal:condition="item/label">
                        <span tal:content="structure item/label" />
                        <span>: </span>
                        <span tal:content="structure item/render" />
                      </tal:cond>
                      <tal:cond tal:condition="not: item/label">
                        <span tal:content="structure item/render" />
                      </tal:cond>
                    </tal:brain>

                    <tal:comment replace="nothing">
                      Item is a brain:
                    </tal:comment>
                    <tal:brain tal:condition="python: view.get_type(item) == 'brain'">
                      <a href="" tal:attributes="href item/getURL|nothing;
                                                 title item/alt|nothing;
                                                 class python:view.get_item_css_classes(item)" tal:omit-tag="not: item/getURL|nothing"
                         tal:content="item/Title">
                      </a>
                    </tal:brain>

                    <tal:comment replace="nothing">
                      Item is a contentlistingobject:
                    </tal:comment>
                    <tal:contentlisting tal:condition="python: view.get_type(item) == 'contentlistingobject'">
                      <a tal:replace="structure item/render_link" />
                    </tal:contentlisting>

                    <tal:comment replace="nothing">
                      Item is a dict (Documents and participants):
                    </tal:comment>
                    <tal:dict tal:condition="python: view.get_type(item) == 'dict'">
                      <a href=""
                         tal:attributes="href item/getURL|nothing;
                                         title item/alt|nothing;
                                         class python:'rollover-breadcrumb %s' % (item.get('css_class'))"
                         tal:omit-tag="not: item/getURL|nothing">
                      <span tal:content="item/Title" /></a>
                    </tal:dict>


                    <tal:comment replace="nothing">
                      SQLAlchemy Objects (Tasks from GlobalIndex):
                    </tal:comment>
                    <tal:sql tal:condition="python: view.get_type(item) == 'globalindex_task'">
                      <div tal:replace="structure python:view.render_globalindex_task(item)" />
                    </tal:sql>
                  </li>

                  <li class="moreLink" tal:condition="exists: box/href">
                    <a tal:attributes="href string:#${box/href}"
                       i18n:translate=""
                       i18n:domain="opengever.base">
                       show all
                   </a>
                  </li>
                </ul>
                <span tal:condition="not: items"
                    i18n:domain="opengever.base"
                    i18n:translate="">
                    No content
                </span>
              </tal:items>
            </tal:box>
          </tal:condition>

        </div>
      </div>
      </tal:block>

    </metal:define>

    <metal:define define-macro="js_default_error_messages">
      <dl id="default-error-message" class="default-error-message portalMessage error" style="display:none">
          <dt i18n:translate="label_severity_error">Error</dt>
          <dd i18n:translate="label_default_error_message">An unexpected error has occured</dd>
      </dl>
    </metal:define>

  </body>
</html>
