<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:cmf="http://namespaces.zope.org/cmf"
    xmlns:five="http://namespaces.zope.org/five"
    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"
    xmlns:i18n="http://namespaces.zope.org/i18n"
    xmlns:plone="http://namespaces.plone.org/plone"
    xmlns:profilehook="http://namespaces.zope.org/profilehook"
    i18n_domain="opengever.tabbedview">

  <include package="ftw.profilehook" />

  <include package=".browser" />

  <i18n:registerTranslations directory="locales" />

  <adapter factory=".catalog_source.GeverCatalogTableSource" />
  <adapter factory=".sqlsource.SqlTableSource" />

  <!-- Classification Behavior -->
  <plone:behavior
      title="Tabbed View"
      description="Adds a tabbed view to folderish content"
      provides=".interfaces.ITabbedViewEnabled"
      factory="plone.behavior.AnnotationStorage"
      marker="ftw.tabbedview.interfaces.ITabbedView"
      for="plone.dexterity.interfaces.IDexterityContent"
      />

  <!-- Register the installation GenericSetup extension profile -->
  <genericsetup:registerProfile
      name="default"
      title="opengever.tabbedview"
      directory="profiles/default"
      description="opengever Tabbed View"
      provides="Products.GenericSetup.interfaces.EXTENSION"
      />
  <include package=".upgrades" />

  <class class="ftw.tabbedview.browser.tabbed.TabbedView">
    <!-- This avoids having write transactions when visiting /tabbed_view for the
           very first time (mostly relevant for tests).
           It avoids storing an empty BTree in the annotations of the site root.
           If you want to have some fun, remove it and fix the tests.
      -->
    <implements interface="ftw.dictstorage.interfaces.ISQLAlchemy" />
  </class>

  <adapter
      for="OFS.interfaces.IItem            zope.publisher.interfaces.browser.IBrowserView            opengever.base.interfaces.IOpengeverBaseLayer"
      provides="ftw.tabbedview.interfaces.IGridStateStorageKeyGenerator"
      factory=".statestorage.GeverGridStateStorageKeyGenerator"
      />

</configure>
