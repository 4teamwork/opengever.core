# ./bindings/arelda.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:6c0240a71cf2b3453dc5965e68fe90afa978a339
# Generated 2016-04-16 12:49:30.771518 by PyXB version 1.2.5-DEV using Python 2.7.11.final.0
# Namespace http://bar.admin.ch/arelda/v4
# flake8: noqa

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:e548cfc5-03c0-11e6-820c-c42c03358f75')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5-DEV'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://bar.admin.ch/arelda/v4', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://bar.admin.ch/arelda/v4}ablieferungstyp
class ablieferungstyp (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Angabe darüber, aus welcher Umgebung die Ablieferung stammt.Indication of the environment from which the submission comes.Indication de l'environnement duquel provient le versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 17, 2)
    _Documentation = "Angabe dar\xfcber, aus welcher Umgebung die Ablieferung stammt.Indication of the environment from which the submission comes.Indication de l'environnement duquel provient le versement."
ablieferungstyp._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ablieferungstyp, enum_prefix=None)
ablieferungstyp.GEVER = ablieferungstyp._CF_enumeration.addEnumeration(unicode_value='GEVER', tag='GEVER')
ablieferungstyp.FILES = ablieferungstyp._CF_enumeration.addEnumeration(unicode_value='FILES', tag='FILES')
ablieferungstyp._InitializeFacetMap(ablieferungstyp._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ablieferungstyp', ablieferungstyp)
_module_typeBindings.ablieferungstyp = ablieferungstyp

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idArchivischeNotiz
class idArchivischeNotiz (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID.Unambiguous ID for the whole package.ID univoque pour tout le paquet."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idArchivischeNotiz')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/archivischeNotiz.xsd', 7, 2)
    _Documentation = 'Paketweit eindeutige ID.Unambiguous ID for the whole package.ID univoque pour tout le paquet.'
idArchivischeNotiz._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
idArchivischeNotiz._InitializeFacetMap(idArchivischeNotiz._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'idArchivischeNotiz', idArchivischeNotiz)
_module_typeBindings.idArchivischeNotiz = idArchivischeNotiz

# List simple type: {http://bar.admin.ch/arelda/v4}dateiRef
# superclasses pyxb.binding.datatypes.IDREFS
class dateiRef (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.IDREF."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateiRef')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 834, 2)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.IDREF
dateiRef._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(1))
dateiRef._InitializeFacetMap(dateiRef._CF_length)
Namespace.addCategoryObject('typeBinding', 'dateiRef', dateiRef)
_module_typeBindings.dateiRef = dateiRef

# Atomic simple type: {http://bar.admin.ch/arelda/v4}ca
class ca (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ca')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 21, 2)
    _Documentation = ''
ca._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ca', ca)
_module_typeBindings.ca = ca

# Atomic simple type: {http://bar.admin.ch/arelda/v4}keineAngabe
class keineAngabe (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'keineAngabe')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 28, 2)
    _Documentation = ''
keineAngabe._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=keineAngabe, enum_prefix=None)
keineAngabe.keine_Angabe = keineAngabe._CF_enumeration.addEnumeration(unicode_value='keine Angabe', tag='keine_Angabe')
keineAngabe._InitializeFacetMap(keineAngabe._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'keineAngabe', keineAngabe)
_module_typeBindings.keineAngabe = keineAngabe

# Union simple type: {http://bar.admin.ch/arelda/v4}zeitpunkt
# superclasses pyxb.binding.datatypes.anySimpleType
class zeitpunkt (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.date, pyxb.binding.datatypes.dateTime."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'zeitpunkt')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 63, 2)
    _Documentation = None

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.dateTime, )
zeitpunkt._CF_pattern = pyxb.binding.facets.CF_pattern()
zeitpunkt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=zeitpunkt)
zeitpunkt._InitializeFacetMap(zeitpunkt._CF_pattern,
   zeitpunkt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'zeitpunkt', zeitpunkt)
_module_typeBindings.zeitpunkt = zeitpunkt

# Union simple type: {http://bar.admin.ch/arelda/v4}datumTypB
# superclasses pyxb.binding.datatypes.anySimpleType
class datumTypB (pyxb.binding.basis.STD_union):

    """Zeitpunkte: the following values are possible by date type 3 regular expression (technische Anwendung)
        Date Data Type (xs:date)
        The date is specified in the following form "YYYY-MM-DD" where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        Hinweis: Alle Komponenten werden benötigt!

        DateTime Data Type (xs:dateTime)
        The dateTime data type is used to specify a date and a time.
        The dateTime is specified in the following form "YYYY-MM-DDThh:mm:ss" where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        * T indicates the start of the required time section
        * hh indicates the hour
        * mm indicates the minute
        * ss indicates the second
        Hinweis: Alle Komponenten werden benötigt!
      "Time points: the following values are possible by date type 3 regular expression (technical application)
        Date Data Type (xs:date)
        The date is specified in the following form ''YYYY-MM-DD'' where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        Note: All components are required!

        DateTime Data Type (xs:dateTime)
        The dateTime data type is used to specify a date and a time.
        The dateTime is specified in the following form ''YYYY-MM-DDThh:mm:ss'' where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        * T indicates the start of the required time section
        * hh indicates the hour
        * mm indicates the minute
        * ss indicates the second
        Note: All components are required!"Moments: the following values are possible by date type 3 regular expression (application technique)
        Date Data Type (xs:date)
        The date is specified in the following form "YYYY-MM-DD" where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        Remarque : Tous les composants sont n�cessaires!

        DateTime Data Type (xs:dateTime)
        The dateTime data type is used to specify a date and a time.
        The dateTime is specified in the following form "YYYY-MM-DDThh:mm:ss" where:
        * YYYY indicates the year
        * MM indicates the month
        * DD indicates the day
        * T indicates the start of the required time section
        * hh indicates the hour
        * mm indicates the minute
        * ss indicates the second
        Remarque : Tous les composants sont nécessaires!"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datumTypB')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 74, 2)
    _Documentation = 'Zeitpunkte: the following values are possible by date type 3 regular expression (technische Anwendung)\n        Date Data Type (xs:date)\n        The date is specified in the following form "YYYY-MM-DD" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        Hinweis: Alle Komponenten werden ben\xf6tigt!\n        \n        DateTime Data Type (xs:dateTime)\n        The dateTime data type is used to specify a date and a time.\n        The dateTime is specified in the following form "YYYY-MM-DDThh:mm:ss" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        * T indicates the start of the required time section\n        * hh indicates the hour\n        * mm indicates the minute\n        * ss indicates the second\n        Hinweis: Alle Komponenten werden ben\xf6tigt!\n      "Time points: the following values are possible by date type 3 regular expression (technical application)\n        Date Data Type (xs:date)\n        The date is specified in the following form ""YYYY-MM-DD"" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        Note: All components are required!\n        \n        DateTime Data Type (xs:dateTime)\n        The dateTime data type is used to specify a date and a time.\n        The dateTime is specified in the following form ""YYYY-MM-DDThh:mm:ss"" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        * T indicates the start of the required time section\n        * hh indicates the hour\n        * mm indicates the minute\n        * ss indicates the second\n        Note: All components are required!"Moments: the following values are possible by date type 3 regular expression (application technique)\n        Date Data Type (xs:date)\n        The date is specified in the following form "YYYY-MM-DD" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        Remarque : Tous les composants sont n\ufffdcessaires!\n        \n        DateTime Data Type (xs:dateTime)\n        The dateTime data type is used to specify a date and a time.\n        The dateTime is specified in the following form "YYYY-MM-DDThh:mm:ss" where:\n        * YYYY indicates the year\n        * MM indicates the month\n        * DD indicates the day\n        * T indicates the start of the required time section\n        * hh indicates the hour\n        * mm indicates the minute\n        * ss indicates the second\n        Remarque : Tous les composants sont n\xe9cessaires!'

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.dateTime, )
datumTypB._CF_pattern = pyxb.binding.facets.CF_pattern()
datumTypB._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=datumTypB)
datumTypB._InitializeFacetMap(datumTypB._CF_pattern,
   datumTypB._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'datumTypB', datumTypB)
_module_typeBindings.datumTypB = datumTypB

# Atomic simple type: {http://bar.admin.ch/arelda/v4}text1
class text1 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'text1')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 169, 2)
    _Documentation = None
text1._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
text1._InitializeFacetMap(text1._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'text1', text1)
_module_typeBindings.text1 = text1

# Atomic simple type: {http://bar.admin.ch/arelda/v4}text2
class text2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'text2')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 175, 2)
    _Documentation = None
text2._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(200))
text2._InitializeFacetMap(text2._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'text2', text2)
_module_typeBindings.text2 = text2

# Atomic simple type: {http://bar.admin.ch/arelda/v4}text3
class text3 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'text3')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 181, 2)
    _Documentation = None
text3._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1000))
text3._InitializeFacetMap(text3._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'text3', text3)
_module_typeBindings.text3 = text3

# Atomic simple type: {http://bar.admin.ch/arelda/v4}text4
class text4 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'text4')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 187, 2)
    _Documentation = None
text4._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'text4', text4)
_module_typeBindings.text4 = text4

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idDatei
class idDatei (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID für die Datei (technischer Primärschlüssel). Diese ID wird aus dem Dokument heraus referenziert.Unambiguous ID for the file throughout the package (technical primary key). This ID is referenced out of the document.ID univoque pour tout le paquet pour le dossier (clé primaire technique). Cette ID est référencée sur le document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idDatei')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 37, 2)
    _Documentation = 'Paketweit eindeutige ID f\xfcr die Datei (technischer Prim\xe4rschl\xfcssel). Diese ID wird aus dem Dokument heraus referenziert.Unambiguous ID for the file throughout the package (technical primary key). This ID is referenced out of the document.ID univoque pour tout le paquet pour le dossier (cl\xe9 primaire technique). Cette ID est r\xe9f\xe9renc\xe9e sur le document.'
idDatei._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'idDatei', idDatei)
_module_typeBindings.idDatei = idDatei

# Atomic simple type: {http://bar.admin.ch/arelda/v4}pruefalgorithmus
class pruefalgorithmus (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Bezeichnung des verwendeten Prüfalgorithmus.Designation of the checksum algorithm used.Désignation de l'algorithme de contrôle utilisé"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 47, 2)
    _Documentation = "Bezeichnung des verwendeten Pr\xfcfalgorithmus.Designation of the checksum algorithm used.D\xe9signation de l'algorithme de contr\xf4le utilis\xe9"
pruefalgorithmus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=pruefalgorithmus, enum_prefix=None)
pruefalgorithmus.MD5 = pruefalgorithmus._CF_enumeration.addEnumeration(unicode_value='MD5', tag='MD5')
pruefalgorithmus.SHA_1 = pruefalgorithmus._CF_enumeration.addEnumeration(unicode_value='SHA-1', tag='SHA_1')
pruefalgorithmus.SHA_256 = pruefalgorithmus._CF_enumeration.addEnumeration(unicode_value='SHA-256', tag='SHA_256')
pruefalgorithmus.SHA_512 = pruefalgorithmus._CF_enumeration.addEnumeration(unicode_value='SHA-512', tag='SHA_512')
pruefalgorithmus._InitializeFacetMap(pruefalgorithmus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'pruefalgorithmus', pruefalgorithmus)
_module_typeBindings.pruefalgorithmus = pruefalgorithmus

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idDokument
class idDokument (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID (Primärschlüssel).Unambiguous ID for the whole package (primary key).ID univoque pour tout le paquet (clé primaire)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 17, 2)
    _Documentation = 'Paketweit eindeutige ID (Prim\xe4rschl\xfcssel).Unambiguous ID for the whole package (primary key).ID univoque pour tout le paquet (cl\xe9 primaire).'
idDokument._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
idDokument._InitializeFacetMap(idDokument._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'idDokument', idDokument)
_module_typeBindings.idDokument = idDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}erscheinungsformDokument
class erscheinungsformDokument (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Angabe, ob es sich beim Dokument zum Zeitpunkt der Ablieferung um ein digitales Dokument, oder um ein nicht-digitales Dokument handelt (Papier, audiovisuell). Ein Dokument kann nur einer der beiden Erscheinungsformen (entweder digital oder nicht-digital) zugewiesen werden. Dokumente, die vor der Ablieferung ins Archiv aus einem digitalen und einem nicht-digitalen Teil bestanden, müssen als zwei getrennte Dokumente abgeliefert werden.Indication of whether the document is digital or non-digital (paper, audiovisual) at the time of submission. A document can only be assigned to one of the two forms (digital or non-digital). Documents that consisted of a digital and a non-digital component before submission to the archive must be submitted as two separate documents.Indiquer si le document dont il s'agit au moment du versement est un document numérique ou non (papier, audiovisuel). Un document ne peut être attribué qu'à une des deux formes (soit numérique, soit non numérique). Les documents qui, avant le versement, se composaient d'une partie numérique et d'une partie non numérique doivent être versés comme deux documents distincts."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'erscheinungsformDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 39, 2)
    _Documentation = "Angabe, ob es sich beim Dokument zum Zeitpunkt der Ablieferung um ein digitales Dokument, oder um ein nicht-digitales Dokument handelt (Papier, audiovisuell). Ein Dokument kann nur einer der beiden Erscheinungsformen (entweder digital oder nicht-digital) zugewiesen werden. Dokumente, die vor der Ablieferung ins Archiv aus einem digitalen und einem nicht-digitalen Teil bestanden, m\xfcssen als zwei getrennte Dokumente abgeliefert werden.Indication of whether the document is digital or non-digital (paper, audiovisual) at the time of submission. A document can only be assigned to one of the two forms (digital or non-digital). Documents that consisted of a digital and a non-digital component before submission to the archive must be submitted as two separate documents.Indiquer si le document dont il s'agit au moment du versement est un document num\xe9rique ou non (papier, audiovisuel). Un document ne peut \xeatre attribu\xe9 qu'\xe0 une des deux formes (soit num\xe9rique, soit non num\xe9rique). Les documents qui, avant le versement, se composaient d'une partie num\xe9rique et d'une partie non num\xe9rique doivent \xeatre vers\xe9s comme deux documents distincts."
erscheinungsformDokument._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=erscheinungsformDokument, enum_prefix=None)
erscheinungsformDokument.digital = erscheinungsformDokument._CF_enumeration.addEnumeration(unicode_value='digital', tag='digital')
erscheinungsformDokument.nicht_digital = erscheinungsformDokument._CF_enumeration.addEnumeration(unicode_value='nicht digital', tag='nicht_digital')
erscheinungsformDokument._InitializeFacetMap(erscheinungsformDokument._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'erscheinungsformDokument', erscheinungsformDokument)
_module_typeBindings.erscheinungsformDokument = erscheinungsformDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}datenschutzDokument
class datenschutzDokument (pyxb.binding.datatypes.boolean):

    """Markierung, die angibt, ob das Dokument besonders schützenswerte Personendaten oder Persönlichkeitsprofile gemäss Datenschutzrecht Art 3.Marking indicating whether the document contains sensitive personal data or personal profiles under the Data Protection Act.Marque qui précise si le document contient des données sensibles ou des profils de la personnalité selon l'art. 3 de la loi sur la protection des données"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datenschutzDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 82, 2)
    _Documentation = "Markierung, die angibt, ob das Dokument besonders sch\xfctzenswerte Personendaten oder Pers\xf6nlichkeitsprofile gem\xe4ss Datenschutzrecht Art 3.Marking indicating whether the document contains sensitive personal data or personal profiles under the Data Protection Act.Marque qui pr\xe9cise si le document contient des donn\xe9es sensibles ou des profils de la personnalit\xe9 selon l'art. 3 de la loi sur la protection des donn\xe9es"
datenschutzDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'datenschutzDokument', datenschutzDokument)
_module_typeBindings.datenschutzDokument = datenschutzDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idDossier
class idDossier (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID. Sie wird im AIS im Modul Verzeichnungseinheiten auf Dossierstufe verzeichnet.Unambiguous ID for the whole package. It is described in the units of description module of the AIS at dossier level.ID univoque pour tout le paquet. Elle est enregistrée dans AIS dans le module Unité de description au niveau des dossiers."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 73, 2)
    _Documentation = 'Paketweit eindeutige ID. Sie wird im AIS im Modul Verzeichnungseinheiten auf Dossierstufe verzeichnet.Unambiguous ID for the whole package. It is described in the units of description module of the AIS at dossier level.ID univoque pour tout le paquet. Elle est enregistr\xe9e dans AIS dans le module Unit\xe9 de description au niveau des dossiers.'
idDossier._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
idDossier._InitializeFacetMap(idDossier._CF_minLength)
Namespace.addCategoryObject('typeBinding', 'idDossier', idDossier)
_module_typeBindings.idDossier = idDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}erscheinungsformDossier
class erscheinungsformDossier (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Angaben darüber, ob das Dossier digitale, nicht-digitale (Papier, audiovisuell) oder sowohl digitale als auch nicht-digitale Dokumente enthält.Indication of whether the dossier contains digital, non-digital (paper, audiovisual) or both digital and non-digital documents.Indiquer si le dossier contient des documents numériques, non numériques (papier, audiovisuel) """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'erscheinungsformDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 85, 2)
    _Documentation = 'Angaben dar\xfcber, ob das Dossier digitale, nicht-digitale (Papier, audiovisuell) oder sowohl digitale als auch nicht-digitale Dokumente enth\xe4lt.Indication of whether the dossier contains digital, non-digital (paper, audiovisual) or both digital and non-digital documents.Indiquer si le dossier contient des documents num\xe9riques, non num\xe9riques (papier, audiovisuel) '
erscheinungsformDossier._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=erscheinungsformDossier, enum_prefix=None)
erscheinungsformDossier.keine_Angabe = erscheinungsformDossier._CF_enumeration.addEnumeration(unicode_value='keine Angabe', tag='keine_Angabe')
erscheinungsformDossier.digital = erscheinungsformDossier._CF_enumeration.addEnumeration(unicode_value='digital', tag='digital')
erscheinungsformDossier.nicht_digital = erscheinungsformDossier._CF_enumeration.addEnumeration(unicode_value='nicht digital', tag='nicht_digital')
erscheinungsformDossier.gemischt = erscheinungsformDossier._CF_enumeration.addEnumeration(unicode_value='gemischt', tag='gemischt')
erscheinungsformDossier._InitializeFacetMap(erscheinungsformDossier._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'erscheinungsformDossier', erscheinungsformDossier)
_module_typeBindings.erscheinungsformDossier = erscheinungsformDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}datenschutzDossier
class datenschutzDossier (pyxb.binding.datatypes.boolean):

    """Markierung, die angibt, ob sich in den Dokumenten des Dossiers besonders schützenswerten Personendaten oder Persönlichkeitsprofilen gemäss Datenschutzrecht.Marking indicating whether documents in the dossier contain sensitive personal data or personal profiles under the Data Protection Act.Marque qui précise si des documents du dossier contiennent des données sensibles ou des profils de la personnalité selon la loi sur la protection des données"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datenschutzDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 162, 2)
    _Documentation = 'Markierung, die angibt, ob sich in den Dokumenten des Dossiers besonders sch\xfctzenswerten Personendaten oder Pers\xf6nlichkeitsprofilen gem\xe4ss Datenschutzrecht.Marking indicating whether documents in the dossier contain sensitive personal data or personal profiles under the Data Protection Act.Marque qui pr\xe9cise si des documents du dossier contiennent des donn\xe9es sensibles ou des profils de la personnalit\xe9 selon la loi sur la protection des donn\xe9es'
datenschutzDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'datenschutzDossier', datenschutzDossier)
_module_typeBindings.datenschutzDossier = datenschutzDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}orderVorgang
class orderVorgang (pyxb.binding.datatypes.integer):

    """Ordnungszahl welche die Reihenfolge von Vorgängen innerhalb eines Dossiers festlegt, muss innerhalb des selben Dossier eindeutig sein.Atomic number which defines the sequence of operations within a dossier, must be unique within the same dossier.Numéro qui définit l'ordre des activités au sein d'un dossier. Doit être univoque au sein du même dossier."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'orderVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 222, 2)
    _Documentation = "Ordnungszahl welche die Reihenfolge von Vorg\xe4ngen innerhalb eines Dossiers festlegt, muss innerhalb des selben Dossier eindeutig sein.Atomic number which defines the sequence of operations within a dossier, must be unique within the same dossier.Num\xe9ro qui d\xe9finit l'ordre des activit\xe9s au sein d'un dossier. Doit \xeatre univoque au sein du m\xeame dossier."
orderVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'orderVorgang', orderVorgang)
_module_typeBindings.orderVorgang = orderVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}orderAktivitaet
class orderAktivitaet (pyxb.binding.datatypes.integer):

    """Ordnungszahl welche die Reihenfolge der Aktivitäten innerhalb eines Vorgangs festlegt, muss innerhalb des selben Vorgangs eindeutig sein.Atomic number which defines the sequence of activities within a process, must be unique within the same process.Numéro qui définit l'ordre des activités au sein d'un processus. Doit être univoque au sein du même processus."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'orderAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 282, 2)
    _Documentation = "Ordnungszahl welche die Reihenfolge der Aktivit\xe4ten innerhalb eines Vorgangs festlegt, muss innerhalb des selben Vorgangs eindeutig sein.Atomic number which defines the sequence of activities within a process, must be unique within the same process.Num\xe9ro qui d\xe9finit l'ordre des activit\xe9s au sein d'un processus. Doit \xeatre univoque au sein du m\xeame processus."
orderAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'orderAktivitaet', orderAktivitaet)
_module_typeBindings.orderAktivitaet = orderAktivitaet

# Union simple type: {http://bar.admin.ch/arelda/v4}abschlussdatumAktivitaet
# superclasses pyxb.binding.datatypes.anySimpleType
class abschlussdatumAktivitaet (pyxb.binding.basis.STD_union):

    """Tag, an dem die Aktivität abgeschlossen worden ist.Day on which the activity has been completed.Jour de clôture de l'activité"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'abschlussdatumAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 322, 2)
    _Documentation = "Tag, an dem die Aktivit\xe4t abgeschlossen worden ist.Day on which the activity has been completed.Jour de cl\xf4ture de l'activit\xe9"

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.dateTime, )
abschlussdatumAktivitaet._CF_pattern = pyxb.binding.facets.CF_pattern()
abschlussdatumAktivitaet._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=abschlussdatumAktivitaet)
abschlussdatumAktivitaet._InitializeFacetMap(abschlussdatumAktivitaet._CF_pattern,
   abschlussdatumAktivitaet._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'abschlussdatumAktivitaet', abschlussdatumAktivitaet)
_module_typeBindings.abschlussdatumAktivitaet = abschlussdatumAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}nameOrdner
class nameOrdner (pyxb.binding.datatypes.string):

    """Das Inhaltsverzeichnis listet alle Dateien und Ordner des Pakets hierarchisch auf. Für die Ordner wird der Ordnername eingesetzt.The table of contents lists all the files and folders in the package hierarchically. The folder name is used for the folders.La table des matières dresse une liste hiérarchique de tous les fichiers et répertoires du paquet. Pour le répertoire est utilisé le nom du répertoire."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameOrdner')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordner.xsd', 7, 2)
    _Documentation = 'Das Inhaltsverzeichnis listet alle Dateien und Ordner des Pakets hierarchisch auf. F\xfcr die Ordner wird der Ordnername eingesetzt.The table of contents lists all the files and folders in the package hierarchically. The folder name is used for the folders.La table des mati\xe8res dresse une liste hi\xe9rarchique de tous les fichiers et r\xe9pertoires du paquet. Pour le r\xe9pertoire est utilis\xe9 le nom du r\xe9pertoire.'
nameOrdner._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'nameOrdner', nameOrdner)
_module_typeBindings.nameOrdner = nameOrdner

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idOrdner
class idOrdner (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID für den Ordner (technischer Primärschlüssel). Diese ID wird aus dem Dokument heraus referenziert.Unambiguous ID for the folder throughout the package (technical primary key). This ID is referenced outside of the document.ID univoque pour tout le paquet pour le répertoire (clé primaire technique). Cette ID est référencée sur le document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idOrdner')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordner.xsd', 17, 2)
    _Documentation = 'Paketweit eindeutige ID f\xfcr den Ordner (technischer Prim\xe4rschl\xfcssel). Diese ID wird aus dem Dokument heraus referenziert.Unambiguous ID for the folder throughout the package (technical primary key). This ID is referenced outside of the document.ID univoque pour tout le paquet pour le r\xe9pertoire (cl\xe9 primaire technique). Cette ID est r\xe9f\xe9renc\xe9e sur le document.'
idOrdner._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'idOrdner', idOrdner)
_module_typeBindings.idOrdner = idOrdner

# Atomic simple type: {http://bar.admin.ch/arelda/v4}idOrdnungssystemposition
class idOrdnungssystemposition (pyxb.binding.datatypes.ID):

    """Paketweit eindeutige ID (Primärschlüssel).Unambiguous ID for the whole package (primary key).ID univoque pour tout le paquet (clé primaire)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'idOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 27, 2)
    _Documentation = 'Paketweit eindeutige ID (Prim\xe4rschl\xfcssel).Unambiguous ID for the whole package (primary key).ID univoque pour tout le paquet (cl\xe9 primaire).'
idOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'idOrdnungssystemposition', idOrdnungssystemposition)
_module_typeBindings.idOrdnungssystemposition = idOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}datenschutzOrdnungssystemposition
class datenschutzOrdnungssystemposition (pyxb.binding.datatypes.boolean):

    """Markierung, die angibt, ob sich in den Unterlagen der Ordnungssystemposition solche mit besonders schützenswerten Personendaten oder Persönlichkeitsprofilen gemäss Datenschutzgesetz.Marking indicating whether documents in the classification system position contain sensitive personal data or personal profiles under the Data Protection Act.Marque qui précise si des documents de la position du système de classement contiennent des données sensibles ou des profils de la personnalité selon la loi sur la protection des données."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datenschutzOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 89, 2)
    _Documentation = 'Markierung, die angibt, ob sich in den Unterlagen der Ordnungssystemposition solche mit besonders sch\xfctzenswerten Personendaten oder Pers\xf6nlichkeitsprofilen gem\xe4ss Datenschutzgesetz.Marking indicating whether documents in the classification system position contain sensitive personal data or personal profiles under the Data Protection Act.Marque qui pr\xe9cise si des documents de la position du syst\xe8me de classement contiennent des donn\xe9es sensibles ou des profils de la personnalit\xe9 selon la loi sur la protection des donn\xe9es.'
datenschutzOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'datenschutzOrdnungssystemposition', datenschutzOrdnungssystemposition)
_module_typeBindings.datenschutzOrdnungssystemposition = datenschutzOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}paketTyp
class paketTyp (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Klassierung des Pakets.Classification of the package.Catégorie de paquet"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'paketTyp')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 49, 2)
    _Documentation = 'Klassierung des Pakets.Classification of the package.Cat\xe9gorie de paquet'
paketTyp._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=paketTyp, enum_prefix=None)
paketTyp.SIP = paketTyp._CF_enumeration.addEnumeration(unicode_value='SIP', tag='SIP')
paketTyp.AIP = paketTyp._CF_enumeration.addEnumeration(unicode_value='AIP', tag='AIP')
paketTyp.DIP = paketTyp._CF_enumeration.addEnumeration(unicode_value='DIP', tag='DIP')
paketTyp._InitializeFacetMap(paketTyp._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'paketTyp', paketTyp)
_module_typeBindings.paketTyp = paketTyp

# Atomic simple type: {http://bar.admin.ch/arelda/v4}version
class version (pyxb.binding.datatypes.nonNegativeInteger):

    """Die Versionierung des Pakets. Aus der Version ist schnell ersichtlich, wie oft ein AIP bereits migriert wurde.Version the package was created with. Version is a rapid way to determine how often an AIP has already been migrated.La gestion des versions du paquet. Grâce à la version, il est facile de voir combien de fois un AIP a déjà été migré."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'version')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 75, 2)
    _Documentation = 'Die Versionierung des Pakets. Aus der Version ist schnell ersichtlich, wie oft ein AIP bereits migriert wurde.Version the package was created with. Version is a rapid way to determine how often an AIP has already been migrated.La gestion des versions du paquet. Gr\xe2ce \xe0 la version, il est facile de voir combien de fois un AIP a d\xe9j\xe0 \xe9t\xe9 migr\xe9.'
version._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'version', version)
_module_typeBindings.version = version

# Atomic simple type: {http://bar.admin.ch/arelda/v4}ablieferungsnummer
class ablieferungsnummer (text1):

    """Die Ablieferungsnummer dient zur Identifizierung der Ablieferung im Archiv. Sie besteht in der Regel aus dem Ablieferungsjahr und einer Laufnummer innerhalb dieses Jahres. Die Ablieferungsnummer kann auch Buchstaben enthalten.The submission number serves to identify the submission. It consists of the submission year and a consecutive number within that year.Le numéro de versement sert à l'identification du versement aux archives. Il est généralement constitué de l'année du versement et d'un numéro courant de cette année. Le numéro de versement peut aussi contenir des lettres."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 7, 2)
    _Documentation = "Die Ablieferungsnummer dient zur Identifizierung der Ablieferung im Archiv. Sie besteht in der Regel aus dem Ablieferungsjahr und einer Laufnummer innerhalb dieses Jahres. Die Ablieferungsnummer kann auch Buchstaben enthalten.The submission number serves to identify the submission. It consists of the submission year and a consecutive number within that year.Le num\xe9ro de versement sert \xe0 l'identification du versement aux archives. Il est g\xe9n\xe9ralement constitu\xe9 de l'ann\xe9e du versement et d'un num\xe9ro courant de cette ann\xe9e. Le num\xe9ro de versement peut aussi contenir des lettres."
ablieferungsnummer._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ablieferungsnummer', ablieferungsnummer)
_module_typeBindings.ablieferungsnummer = ablieferungsnummer

# Atomic simple type: {http://bar.admin.ch/arelda/v4}angebotsnummer
class angebotsnummer (text1):

    """Die vom Archiv vergebene Nummer des Angebots, auf welches sich die Ablieferung stützt.The number, allocated by the archive, of the offering on which the submission is based.Le numéro de l'offre qui est donné par les archives et sur lequel se base le versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 30, 2)
    _Documentation = "Die vom Archiv vergebene Nummer des Angebots, auf welches sich die Ablieferung st\xfctzt.The number, allocated by the archive, of the offering on which the submission is based.Le num\xe9ro de l'offre qui est donn\xe9 par les archives et sur lequel se base le versement."
angebotsnummer._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'angebotsnummer', angebotsnummer)
_module_typeBindings.angebotsnummer = angebotsnummer

# Atomic simple type: {http://bar.admin.ch/arelda/v4}ablieferndeStelle
class ablieferndeStelle (text2):

    """Organisationseinheit, welche die abzuliefernden Unterlagen aufbereitet (der Name wird ausgeschrieben, keine Abkürzung), und Name der Person, die für die Ablieferung zuständig ist.Organisational unit that prepares the documents to be submitted (name written out in full, no abbreviations) and name of the person responsible for the submission.Unité organisationnelle qui prépare les documents à verser (le nom est écrit en toutes lettres, sans abréviation) et nom de la personne qui est responsable du versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 40, 2)
    _Documentation = 'Organisationseinheit, welche die abzuliefernden Unterlagen aufbereitet (der Name wird ausgeschrieben, keine Abk\xfcrzung), und Name der Person, die f\xfcr die Ablieferung zust\xe4ndig ist.Organisational unit that prepares the documents to be submitted (name written out in full, no abbreviations) and name of the person responsible for the submission.Unit\xe9 organisationnelle qui pr\xe9pare les documents \xe0 verser (le nom est \xe9crit en toutes lettres, sans abr\xe9viation) et nom de la personne qui est responsable du versement.'
ablieferndeStelle._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ablieferndeStelle', ablieferndeStelle)
_module_typeBindings.ablieferndeStelle = ablieferndeStelle

# Atomic simple type: {http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid
class referenzBewertungsentscheid (text1):

    """Aktenzeichen Bewertungsentscheid(e) Archiv, welches die Ablieferung betreffen.File reference of the appraisal decision(s) relating to the submission.Référence décision(s) d'évaluation archives qui concernent le versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 50, 2)
    _Documentation = "Aktenzeichen Bewertungsentscheid(e) Archiv, welches die Ablieferung betreffen.File reference of the appraisal decision(s) relating to the submission.R\xe9f\xe9rence d\xe9cision(s) d'\xe9valuation archives qui concernent le versement."
referenzBewertungsentscheid._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'referenzBewertungsentscheid', referenzBewertungsentscheid)
_module_typeBindings.referenzBewertungsentscheid = referenzBewertungsentscheid

# Atomic simple type: {http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular
class referenzSchutzfristenFormular (text1):

    """Aktenzeichen des Formulars „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“, in dem die für die Ablieferung vereinbarten Schutzfristen festgehalten sind.File reference of the "Notification of documents subject to a special closure period and publicly accessible documents" form in which the closure periods agreed for the submission are set down.Référence du formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public", dans lequel sont fixés les délais de protection convenus pour le versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 60, 2)
    _Documentation = 'Aktenzeichen des Formulars \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c, in dem die f\xfcr die Ablieferung vereinbarten Schutzfristen festgehalten sind.File reference of the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form in which the closure periods agreed for the submission are set down.R\xe9f\xe9rence du formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public", dans lequel sont fix\xe9s les d\xe9lais de protection convenus pour le versement.'
referenzSchutzfristenFormular._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'referenzSchutzfristenFormular', referenzSchutzfristenFormular)
_module_typeBindings.referenzSchutzfristenFormular = referenzSchutzfristenFormular

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristenkategorieAblieferung
class schutzfristenkategorieAblieferung (text1):

    """Artikel des Gesetztes, der die Schutzfrist festhält, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Article of the law stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorieAblieferung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 70, 2)
    _Documentation = 'Artikel des Gesetztes, der die Schutzfrist festh\xe4lt, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Article of the law stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristenkategorieAblieferung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'schutzfristenkategorieAblieferung', schutzfristenkategorieAblieferung)
_module_typeBindings.schutzfristenkategorieAblieferung = schutzfristenkategorieAblieferung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristAblieferung
class schutzfristAblieferung (text1):

    """Dauer der Schutzfrist in Jahren, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Durée en années du délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristAblieferung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 80, 2)
    _Documentation = 'Dauer der Schutzfrist in Jahren, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Dur\xe9e en ann\xe9es du d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristAblieferung._CF_pattern = pyxb.binding.facets.CF_pattern()
schutzfristAblieferung._CF_pattern.addPattern(pattern='[0-9]*')
schutzfristAblieferung._InitializeFacetMap(schutzfristAblieferung._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'schutzfristAblieferung', schutzfristAblieferung)
_module_typeBindings.schutzfristAblieferung = schutzfristAblieferung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}ablieferungsteile
class ablieferungsteile (text3):

    """Angabe über den gesamten Inhalt der Ablieferung (sowohl der digitalen als auch der nicht digitalen Teile).Indication of the full content of the submission (both digital and non-digital components).Informations sur le contenu entier du versement (non seulement la partie numérique, mais aussi la partie non numérique)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 92, 2)
    _Documentation = 'Angabe \xfcber den gesamten Inhalt der Ablieferung (sowohl der digitalen als auch der nicht digitalen Teile).Indication of the full content of the submission (both digital and non-digital components).Informations sur le contenu entier du versement (non seulement la partie num\xe9rique, mais aussi la partie non num\xe9rique).'
ablieferungsteile._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ablieferungsteile', ablieferungsteile)
_module_typeBindings.ablieferungsteile = ablieferungsteile

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungAblieferung
class bemerkungAblieferung (text4):

    """Zusätzliche Informationen, welche die Ablieferung und ihre Entstehung betreffen. Wenn die Unterlagen in der Ablieferung aus einer periodisierten Registratur stammen, kann hier die Registraturperiode angegeben werden.Additional information relating to the submission and its creation. If the documents in the submission come from a periodised registry, the registry period can be indicated here.Informations complémentaires qui concernent le versement et sa création . Si les documents du versement datent d'une période donnée, la date d'enregistrement peut être indiquée ici."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungAblieferung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ablieferung.xsd', 102, 2)
    _Documentation = "Zus\xe4tzliche Informationen, welche die Ablieferung und ihre Entstehung betreffen. Wenn die Unterlagen in der Ablieferung aus einer periodisierten Registratur stammen, kann hier die Registraturperiode angegeben werden.Additional information relating to the submission and its creation. If the documents in the submission come from a periodised registry, the registry period can be indicated here.Informations compl\xe9mentaires qui concernent le versement et sa cr\xe9ation . Si les documents du versement datent d'une p\xe9riode donn\xe9e, la date d'enregistrement peut \xeatre indiqu\xe9e ici."
bemerkungAblieferung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungAblieferung', bemerkungAblieferung)
_module_typeBindings.bemerkungAblieferung = bemerkungAblieferung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}vorgangstyp
class vorgangstyp (text1):

    """Klassifizierung des Vorgangs.Classification of the process.Classification de l'activité"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'vorgangstyp')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/archivischerVorgang.xsd', 7, 2)
    _Documentation = "Klassifizierung des Vorgangs.Classification of the process.Classification de l'activit\xe9"
vorgangstyp._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'vorgangstyp', vorgangstyp)
_module_typeBindings.vorgangstyp = vorgangstyp

# Atomic simple type: {http://bar.admin.ch/arelda/v4}beschreibung
class beschreibung (text4):

    """Nachweis und Resultat der durchgeführten Tätigkeit.Confirmation and result of the activity carried out.Justification et résultat de l'activité effectuée"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'beschreibung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/archivischerVorgang.xsd', 17, 2)
    _Documentation = "Nachweis und Resultat der durchgef\xfchrten T\xe4tigkeit.Confirmation and result of the activity carried out.Justification et r\xe9sultat de l'activit\xe9 effectu\xe9e"
beschreibung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'beschreibung', beschreibung)
_module_typeBindings.beschreibung = beschreibung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bearbeiter
class bearbeiter (text2):

    """Name der Person, die den archivischen Vorgang durchgeführt hat.Name of the person who carried out the archival process.Nom de la personne qui a effectué l'activité archivistique"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bearbeiter')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/archivischerVorgang.xsd', 27, 2)
    _Documentation = "Name der Person, die den archivischen Vorgang durchgef\xfchrt hat.Name of the person who carried out the archival process.Nom de la personne qui a effectu\xe9 l'activit\xe9 archivistique"
bearbeiter._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bearbeiter', bearbeiter)
_module_typeBindings.bearbeiter = bearbeiter

# Atomic simple type: {http://bar.admin.ch/arelda/v4}referenzUebernahmedossier
class referenzUebernahmedossier (text1):

    """Aktenzeichen des Übernahmedossiers des Archivs.File reference of the ingest dossier in the archive application.Référence du dossier de prise en charge dans l'application GEVER des archives."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/archivischerVorgang.xsd', 37, 2)
    _Documentation = "Aktenzeichen des \xdcbernahmedossiers des Archivs.File reference of the ingest dossier in the archive application.R\xe9f\xe9rence du dossier de prise en charge dans l'application GEVER des archives."
referenzUebernahmedossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'referenzUebernahmedossier', referenzUebernahmedossier)
_module_typeBindings.referenzUebernahmedossier = referenzUebernahmedossier

# Union simple type: {http://bar.admin.ch/arelda/v4}datumTypA
# superclasses pyxb.binding.datatypes.anySimpleType
class datumTypA (pyxb.binding.basis.STD_union):

    """Zeitpunkte: the following values are possible by date type 1 regular expression (historische Anwendung)
        31.01.2004
        ca.31.01.2004
        2004
        ca.2004
        keineAngabe
      "Time points: the following values are possible by date type 1 regular expression (legacy application)
        31.01.2004
        approx.31.01.2004
        2004
        approx.2004
        vMoments: the following values are possible by date type 1 regular expression (application historique)
        31.01.2004
        ca.31.01.2004
        2004
        ca.2004
        keineAngabe"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datumTypA')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 37, 2)
    _Documentation = 'Zeitpunkte: the following values are possible by date type 1 regular expression (historische Anwendung)\n        31.01.2004\n        ca.31.01.2004\n        2004\n        ca.2004\n        keineAngabe\n      "Time points: the following values are possible by date type 1 regular expression (legacy application)\n        31.01.2004\n        approx.31.01.2004\n        2004\n        approx.2004\n        vMoments: the following values are possible by date type 1 regular expression (application historique)\n        31.01.2004\n        ca.31.01.2004\n        2004\n        ca.2004\n        keineAngabe'

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYear, keineAngabe, )
datumTypA._CF_pattern = pyxb.binding.facets.CF_pattern()
datumTypA._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=datumTypA)
datumTypA.keine_Angabe = 'keine Angabe'           # originally keineAngabe.keine_Angabe
datumTypA._InitializeFacetMap(datumTypA._CF_pattern,
   datumTypA._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'datumTypA', datumTypA)
_module_typeBindings.datumTypA = datumTypA

# Union simple type: {http://bar.admin.ch/arelda/v4}notizDatum
# superclasses datumTypB
class notizDatum (pyxb.binding.basis.STD_union):

    """Datum, an welchem die Notiz erfasst wurde. Datums-Tagengenauigkeit reicht (keine Std. und Sek.). Zwingendes Feld.Date on which the note was created. Date and day are sufficient (no hours and seconds). Compulsory field.Date à laquelle la notice a été cataloguée. L'indication du jour suffit (pas d'heure ni de seconde) Champ obligatoire."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'notizDatum')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 139, 2)
    _Documentation = "Datum, an welchem die Notiz erfasst wurde. Datums-Tagengenauigkeit reicht (keine Std. und Sek.). Zwingendes Feld.Date on which the note was created. Date and day are sufficient (no hours and seconds). Compulsory field.Date \xe0 laquelle la notice a \xe9t\xe9 catalogu\xe9e. L'indication du jour suffit (pas d'heure ni de seconde) Champ obligatoire."

    _MemberTypes = ( pyxb.binding.datatypes.date, pyxb.binding.datatypes.dateTime, )
notizDatum._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'notizDatum', notizDatum)
_module_typeBindings.notizDatum = notizDatum

# Atomic simple type: {http://bar.admin.ch/arelda/v4}notizErfasser
class notizErfasser (text1):

    """Benutzer, welcher die Notiz erfasst hat. Optionales Feld.User who created the note. Optional field.Utilisateur qui a catalogué la notice. Champ facultatif."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'notizErfasser')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 149, 2)
    _Documentation = 'Benutzer, welcher die Notiz erfasst hat. Optionales Feld.User who created the note. Optional field.Utilisateur qui a catalogu\xe9 la notice. Champ facultatif.'
notizErfasser._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'notizErfasser', notizErfasser)
_module_typeBindings.notizErfasser = notizErfasser

# Atomic simple type: {http://bar.admin.ch/arelda/v4}notizBeschreibung
class notizBeschreibung (text4):

    """Notiz i.e.S, d.h. Beschreibung. Zwingendes Feld.Notice in narrower sense, i.e. description. Compulsory field.Notice au sens strict, c.-à-d. description. Champ obligatoire"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'notizBeschreibung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 159, 2)
    _Documentation = 'Notiz i.e.S, d.h. Beschreibung. Zwingendes Feld.Notice in narrower sense, i.e. description. Compulsory field.Notice au sens strict, c.-\xe0-d. description. Champ obligatoire'
notizBeschreibung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'notizBeschreibung', notizBeschreibung)
_module_typeBindings.notizBeschreibung = notizBeschreibung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}nameDatei
class nameDatei (text2):

    """Name der Datei, wie dieser im SIP/AIP/DIP erscheint (z.B. "p000001_Machbarkeitsanaly.pdf").Name of the file as it appears in the SIP/AIP/DIP (e.g. "p000001_Feasibility_Study.pdf").Nom du fichier comme il apparaît dans le SIP/AIP/DIP (p. ex.: "p000001_Machbarkeitsanaly.pdf")."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameDatei')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 7, 2)
    _Documentation = 'Name der Datei, wie dieser im SIP/AIP/DIP erscheint (z.B. "p000001_Machbarkeitsanaly.pdf").Name of the file as it appears in the SIP/AIP/DIP (e.g. "p000001_Feasibility_Study.pdf"\x9d).Nom du fichier comme il appara\xeet dans le SIP/AIP/DIP (p. ex.: "p000001_Machbarkeitsanaly.pdf").'
nameDatei._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'nameDatei', nameDatei)
_module_typeBindings.nameDatei = nameDatei

# Atomic simple type: {http://bar.admin.ch/arelda/v4}physischerName
class physischerName (text1):

    """Name der Datei im Filesystem.Name of the file in the file system.Nom du fichier dans le système de fichiers."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'physischerName')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 17, 2)
    _Documentation = 'Name der Datei im Filesystem.Name of the file in the file system.Nom du fichier dans le syst\xe8me de fichiers.'
physischerName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'physischerName', physischerName)
_module_typeBindings.physischerName = physischerName

# Atomic simple type: {http://bar.admin.ch/arelda/v4}originalName
class originalName (text4):

    """Name des Ordners oder der Datei, wie diese in der Originalstruktur (im GEVER-System, in der Dateiablage) beim Aktenbildner geheissen hat (z.B. "Arbeitspaket" oder "Bericht.doc").Name of the folder or file as it was called in the original structure (in the GEVER system, in the file archive) at the records creator (e.g. "work package" or "Report.doc".Nom du répertoire ou du fichier, comme il a été inscrit dans la structure d'origine (dans le système GEVER, dans la collection de fichiers) par le producteur des documents (exemples: "Paquet de travail" ou "Rapport.doc")"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'originalName')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 27, 2)
    _Documentation = 'Name des Ordners oder der Datei, wie diese in der Originalstruktur (im GEVER-System, in der Dateiablage) beim Aktenbildner geheissen hat (z.B. "Arbeitspaket" oder "Bericht.doc").Name of the folder or file as it was called in the original structure (in the GEVER system, in the file archive) at the records creator (e.g. "work package"\x9d or "Report.doc"\x9d.Nom du r\xe9pertoire ou du fichier, comme il a \xe9t\xe9 inscrit dans la structure d\'origine (dans le syst\xe8me GEVER, dans la collection de fichiers) par le producteur des documents (exemples: "Paquet de travail" ou "Rapport.doc")'
originalName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'originalName', originalName)
_module_typeBindings.originalName = originalName

# Atomic simple type: {http://bar.admin.ch/arelda/v4}pruefsumme
class pruefsumme (text3):

    """Prüfsummenwert (abhängig vom verwendeten Prüfalgorithmus).Checksum value (depending on the checksum algorithm used).Valeur de la somme de contrôle (dépendant de l'algorithme de contrôle utilisé)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'pruefsumme')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 62, 2)
    _Documentation = "Pr\xfcfsummenwert (abh\xe4ngig vom verwendeten Pr\xfcfalgorithmus).Checksum value (depending on the checksum algorithm used).Valeur de la somme de contr\xf4le (d\xe9pendant de l'algorithme de contr\xf4le utilis\xe9)."
pruefsumme._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'pruefsumme', pruefsumme)
_module_typeBindings.pruefsumme = pruefsumme

# Atomic simple type: {http://bar.admin.ch/arelda/v4}eigenschaft
class eigenschaft (text4):

    """Generisches Attribut, welches im Zusammenhang mit Wert verwendet wird. Wird bspw. eine CSV-Datei abgeliefert, dann können mittels Attributpaar "eigenschaft" und "wert" Feld- und Zeilendelemiter, Texterkennungszeichen oder Spaltennamen angegeben werden.Generic attribute used in connection with value. For example, if a CSV file is submitted, the "property" and "value" pair of attributes can be used to indicate field and line delimiters, text recognition symbols or column names.Attribut générique qui est employé en rapport avec la valeur. Par exemple est versé un fichier CSV; ensuite, le séparateur de champs et de lignes, la reconnaissance de caractères et les noms des colonnes peuvent être indiqués au moyen de la paire d'attributs "propriétés" et "valeur"."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eigenschaft')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/datei.xsd', 72, 2)
    _Documentation = 'Generisches Attribut, welches im Zusammenhang mit Wert verwendet wird. Wird bspw. eine CSV-Datei abgeliefert, dann k\xf6nnen mittels Attributpaar "eigenschaft" und "wert" Feld- und Zeilendelemiter, Texterkennungszeichen oder Spaltennamen angegeben werden.Generic attribute used in connection with value. For example, if a CSV file is submitted, the "property"\x9d and "value"\x9d pair of attributes can be used to indicate field and line delimiters, text recognition symbols or column names.Attribut g\xe9n\xe9rique qui est employ\xe9 en rapport avec la valeur. Par exemple est vers\xe9 un fichier CSV; ensuite, le s\xe9parateur de champs et de lignes, la reconnaissance de caract\xe8res et les noms des colonnes peuvent \xeatre indiqu\xe9s au moyen de la paire d\'attributs "propri\xe9t\xe9s" et "valeur".'
eigenschaft._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'eigenschaft', eigenschaft)
_module_typeBindings.eigenschaft = eigenschaft

# Atomic simple type: {http://bar.admin.ch/arelda/v4}titelDokument
class titelDokument (text4):

    """Kurze Beschreibung des im Dokument behandelten Gegenstandes.Brief description of the subject matter dealt with in the document.Brève description de l'objet traité dans le document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'titelDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 7, 2)
    _Documentation = "Kurze Beschreibung des im Dokument behandelten Gegenstandes.Brief description of the subject matter dealt with in the document.Br\xe8ve description de l'objet trait\xe9 dans le document."
titelDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'titelDokument', titelDokument)
_module_typeBindings.titelDokument = titelDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}autor
class autor (text4):

    """Verfasser eines Dokuments.Author of a document.Rédacteur d'un document."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'autor')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 29, 2)
    _Documentation = "Verfasser eines Dokuments.Author of a document.R\xe9dacteur d'un document."
autor._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'autor', autor)
_module_typeBindings.autor = autor

# Atomic simple type: {http://bar.admin.ch/arelda/v4}dokumenttyp
class dokumenttyp (text3):

    """Aussehen des Dokuments, das zu erhalten ist.Appearance of the document that is to be preserved.Présentation du document qui doit être conservé."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 52, 2)
    _Documentation = 'Aussehen des Dokuments, das zu erhalten ist.Appearance of the document that is to be preserved.Pr\xe9sentation du document qui doit \xeatre conserv\xe9.'
dokumenttyp._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'dokumenttyp', dokumenttyp)
_module_typeBindings.dokumenttyp = dokumenttyp

# Atomic simple type: {http://bar.admin.ch/arelda/v4}anwendung
class anwendung (text2):

    """Kategorisierung des Dokuments in Bezug auf seinen Anwendungsbereich in der Verwaltungseinheit.Categorisation of the document in respect of its area of application in the administrative unit.Catégorisation du document en rapport avec son domaine d'utilisation dans l'unité administrative"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'anwendung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 62, 2)
    _Documentation = "Kategorisierung des Dokuments in Bezug auf seinen Anwendungsbereich in der Verwaltungseinheit.Categorisation of the document in respect of its area of application in the administrative unit.Cat\xe9gorisation du document en rapport avec son domaine d'utilisation dans l'unit\xe9 administrative"
anwendung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'anwendung', anwendung)
_module_typeBindings.anwendung = anwendung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}klassifizierungskategorieDokument
class klassifizierungskategorieDokument (text2):

    """Grad, in dem das Dokument vor unberechtigter Einsicht geschützt werden muss. Referenz: Verordnung vom 10.12.1990 über die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 über den Schutz militärischer Informationen ([SR 510.411]).Degree to which the document must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degré dans lequel le document doit être protégé d'une consultation non autorisée. Référence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411])."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorieDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 72, 2)
    _Documentation = "Grad, in dem das Dokument vor unberechtigter Einsicht gesch\xfctzt werden muss. Referenz: Verordnung vom 10.12.1990 \xfcber die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 \xfcber den Schutz milit\xe4rischer Informationen ([SR 510.411]).Degree to which the document must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degr\xe9 dans lequel le document doit \xeatre prot\xe9g\xe9 d'une consultation non autoris\xe9e. R\xe9f\xe9rence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411])."
klassifizierungskategorieDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'klassifizierungskategorieDokument', klassifizierungskategorieDokument)
_module_typeBindings.klassifizierungskategorieDokument = klassifizierungskategorieDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusDokument
class oeffentlichkeitsstatusDokument (text2):

    """Angabe, ob das Dokument gemäss [BGÖ] öffentlich zugänglich ist oder nicht.Indication of whether or not the document is publicly accessible.Indiquer si le document est ou n'est pas consultable par le public selon la [LTrans]"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 92, 2)
    _Documentation = "Angabe, ob das Dokument gem\xe4ss [BG\xd6] \xf6ffentlich zug\xe4nglich ist oder nicht.Indication of whether or not the document is publicly accessible.Indiquer si le document est ou n'est pas consultable par le public selon la [LTrans]"
oeffentlichkeitsstatusDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusDokument', oeffentlichkeitsstatusDokument)
_module_typeBindings.oeffentlichkeitsstatusDokument = oeffentlichkeitsstatusDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendungDokument
class oeffentlichkeitsstatusBegruendungDokument (text4):

    """Argumente gegen die öffentliche Zugänglichkeit gemäss [BGÖ]. Gemäss Entwurf [BGÖ] muss begründet werden, warum Unterlagen nicht öffentlich zugänglich gemacht werden können.Arguments against public access. Reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'accès public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent être accessibles au public."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendungDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 102, 2)
    _Documentation = "Argumente gegen die \xf6ffentliche Zug\xe4nglichkeit gem\xe4ss [BG\xd6]. Gem\xe4ss Entwurf [BG\xd6] muss begr\xfcndet werden, warum Unterlagen nicht \xf6ffentlich zug\xe4nglich gemacht werden k\xf6nnen.Arguments against public access. Reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'acc\xe8s public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent \xeatre accessibles au public."
oeffentlichkeitsstatusBegruendungDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusBegruendungDokument', oeffentlichkeitsstatusBegruendungDokument)
_module_typeBindings.oeffentlichkeitsstatusBegruendungDokument = oeffentlichkeitsstatusBegruendungDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}sonstigeBestimmungenDokument
class sonstigeBestimmungenDokument (text4):

    """Angaben über sonstige rechtliche Auflagen, denen das Dokument unterstellt ist.Indication of other legal conditions to which the document is subject.Informations sur d'autres éventuelles conditions légales auxquelles le document est soumis"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungenDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 112, 2)
    _Documentation = "Angaben \xfcber sonstige rechtliche Auflagen, denen das Dokument unterstellt ist.Indication of other legal conditions to which the document is subject.Informations sur d'autres \xe9ventuelles conditions l\xe9gales auxquelles le document est soumis"
sonstigeBestimmungenDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'sonstigeBestimmungenDokument', sonstigeBestimmungenDokument)
_module_typeBindings.sonstigeBestimmungenDokument = sonstigeBestimmungenDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungDokument
class bemerkungDokument (text4):

    """Verschiedene Informationen, die in Zusammenhang mit dem Dokument, seiner Entstehung und allfälligen Veränderungen festgehalten werden müssen.Various information that must be recorded in connection with the document, its creation and any changes.Différentes informations qui doivent être définies en rapport avec le document, sa création et d'éventuelles modifications."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungDokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dokument.xsd', 122, 2)
    _Documentation = "Verschiedene Informationen, die in Zusammenhang mit dem Dokument, seiner Entstehung und allf\xe4lligen Ver\xe4nderungen festgehalten werden m\xfcssen.Various information that must be recorded in connection with the document, its creation and any changes.Diff\xe9rentes informations qui doivent \xeatre d\xe9finies en rapport avec le document, sa cr\xe9ation et d'\xe9ventuelles modifications."
bemerkungDokument._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungDokument', bemerkungDokument)
_module_typeBindings.bemerkungDokument = bemerkungDokument

# Atomic simple type: {http://bar.admin.ch/arelda/v4}aktenzeichen
class aktenzeichen (text2):

    """Identifikation und Ordnungsmerkmal des Dossiers. Das Aktenzeichen erlaubt es, das Dossier innerhalb eines bestimmten Ablagesystems einer eindeutigen Position (Rubrik) des OS zuzuordnen.Identification and classification feature of the dossier. The file reference allows the dossier to be assigned to an unambiguous position (rubric) of the CS within a specific archive system.Identification et caractéristique de classement du dossier. La référence permet d'attribuer le dossier dans un système de classement déterminé à une position univoque (rubrique) du système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 7, 2)
    _Documentation = "Identifikation und Ordnungsmerkmal des Dossiers. Das Aktenzeichen erlaubt es, das Dossier innerhalb eines bestimmten Ablagesystems einer eindeutigen Position (Rubrik) des OS zuzuordnen.Identification and classification feature of the dossier. The file reference allows the dossier to be assigned to an unambiguous position (rubric) of the CS within a specific archive system.Identification et caract\xe9ristique de classement du dossier. La r\xe9f\xe9rence permet d'attribuer le dossier dans un syst\xe8me de classement d\xe9termin\xe9 \xe0 une position univoque (rubrique) du syst\xe8me de classement."
aktenzeichen._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'aktenzeichen', aktenzeichen)
_module_typeBindings.aktenzeichen = aktenzeichen

# Atomic simple type: {http://bar.admin.ch/arelda/v4}zusatzmerkmal
class zusatzmerkmal (text2):

    """Angaben über zusätzliche Merkmale, welche das Dossier identifizieren. Hier kann z.B. die Bandnummer eines Dossiers vermerkt werden, als Unterscheidungs- und Reihungsmerkmal von Fortsetzungsdossiers mit demselben Dossier-Titel und mit demselben Aktenzeichen erfasst.Information on additional characteristics that identify the dossier. For example the volume number of a dossier can be indicated here to differentiate and sequence in respect of consecutive dossiers with the same dossier title and the same file reference.Informations sur des composants additionnels qui servent à l'identification du dossier. Ici peut, par exemple, être mentionné le numéro de volume d'un dossier, qui constitue une caractéristique de différenciation des dossiers successifs avec le même titre et la même référence."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 17, 2)
    _Documentation = "Angaben \xfcber zus\xe4tzliche Merkmale, welche das Dossier identifizieren. Hier kann z.B. die Bandnummer eines Dossiers vermerkt werden, als Unterscheidungs- und Reihungsmerkmal von Fortsetzungsdossiers mit demselben Dossier-Titel und mit demselben Aktenzeichen erfasst.Information on additional characteristics that identify the dossier. For example the volume number of a dossier can be indicated here to differentiate and sequence in respect of consecutive dossiers with the same dossier title and the same file reference.Informations sur des composants additionnels qui servent \xe0 l'identification du dossier. Ici peut, par exemple, \xeatre mentionn\xe9 le num\xe9ro de volume d'un dossier, qui constitue une caract\xe9ristique de diff\xe9renciation des dossiers successifs avec le m\xeame titre et la m\xeame r\xe9f\xe9rence."
zusatzmerkmal._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'zusatzmerkmal', zusatzmerkmal)
_module_typeBindings.zusatzmerkmal = zusatzmerkmal

# Atomic simple type: {http://bar.admin.ch/arelda/v4}titelDossier
class titelDossier (text4):

    """Bezeichnung des Dossiers.
        GEVER: Kurzbeschreibung des Geschäftsfalls (bei Seriendossierbildung) oder des Sachbetreffs (bei Sachdossierbildung) zu welchem Dokumente im Dossier abgelegt werden.
        FILES: Kurzbeschreibung des Inhalts der Datensammlung und der Dokumentation (falls vorhanden)"Designation of the dossier.
        GEVER: Brief description of the business event (when creating serial dossiers) or matter (when creating dossiers for specific matters) in respect of which documents are archived in the dossier.
        FILES: Brief description of the content of the data collection and the documentation (if present)''Désignation du dossier ou du groupe de documents.
        GEVER: brève description de l'affaire (dans le cas de la formation des dossiers en série) ou des objets (dans le cas de la formation de dossiers) auxquels appartiennent les documents classés dans le dossier.
        FILES: brève description du contenu de la collection de données et de la documentation (si elle existe)." """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'titelDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 27, 2)
    _Documentation = 'Bezeichnung des Dossiers.\n        GEVER: Kurzbeschreibung des Gesch\xe4ftsfalls (bei Seriendossierbildung) oder des Sachbetreffs (bei Sachdossierbildung) zu welchem Dokumente im Dossier abgelegt werden. \n        FILES: Kurzbeschreibung des Inhalts der Datensammlung und der Dokumentation (falls vorhanden)"Designation of the dossier.\n        GEVER: Brief description of the business event (when creating serial dossiers) or matter (when creating dossiers for specific matters) in respect of which documents are archived in the dossier. \n        FILES: Brief description of the content of the data collection and the documentation (if present)""D\xe9signation du dossier ou du groupe de documents.\n        GEVER: br\xe8ve description de l\'affaire (dans le cas de la formation des dossiers en s\xe9rie) ou des objets (dans le cas de la formation de dossiers) auxquels appartiennent les documents class\xe9s dans le dossier.\n        FILES: br\xe8ve description du contenu de la collection de donn\xe9es et de la documentation (si elle existe)."'
titelDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'titelDossier', titelDossier)
_module_typeBindings.titelDossier = titelDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}inhalt
class inhalt (text4):

    """Inhaltlicher Schwerpunkt der Datensammlung sofern dies nicht aus dem Feld "Titel" hervorgeht.Main content focus of the data collection, if not clear from the "title" field.Sujet principal du contenu de la collection de données, si celui-ci n'apparaît pas dans le champ "Titre"."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inhalt')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 43, 2)
    _Documentation = 'Inhaltlicher Schwerpunkt der Datensammlung sofern dies nicht aus dem Feld "Titel" hervorgeht.Main content focus of the data collection, if not clear from the "title"\x9d field.Sujet principal du contenu de la collection de donn\xe9es, si celui-ci n\'appara\xeet pas dans le champ "Titre".'
inhalt._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'inhalt', inhalt)
_module_typeBindings.inhalt = inhalt

# Atomic simple type: {http://bar.admin.ch/arelda/v4}formInhalt
class formInhalt (text4):

    """Angabe des Mediums (Fotos, Tondokumente, schriftliche Unterlagen usw.)Indication of the medium (photos, sound documents, written documents, etc.)Indication du support (photos, documents sonores, documents manuscrits, etc.)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'formInhalt')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 53, 2)
    _Documentation = 'Angabe des Mediums (Fotos, Tondokumente, schriftliche Unterlagen usw.)Indication of the medium (photos, sound documents, written documents, etc.)Indication du support (photos, documents sonores, documents manuscrits, etc.)'
formInhalt._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'formInhalt', formInhalt)
_module_typeBindings.formInhalt = formInhalt

# Atomic simple type: {http://bar.admin.ch/arelda/v4}umfang
class umfang (text4):

    """Anzahl der Dateien des Dossiers und Umfang in MBytes zum Zeitpunkt der Ablieferung. Bei Datenbanken: Anzahl Datensätze der vorliegenden Datensammlung zum Zeitpunkt der Ablieferung. Als Datensatz gilt das Ensemble von Zeilen einer oder mehrerer miteinander verknüpften Tabellen (zentrale logische Einheit). Die Anzahl Datensätze ist zusammen mit der Bezeichnung der zentralen logischen Einheit zu nennen. Diese hängt vom Hauptfokus der Datensammlung ab. Bei Unklarheit muss mit einem Zusatztext erklärt werden, wie viele Datensätze welchen Typs vorliegen.Number of files in the dossier and size in MBytes at the time of submission. For databases: number of datasets in the present data collection at the time of submission. A dataset is a set of lines of one or more interlinked tables (central logical unit). The number of datasets must be named along with the designation of the central logical unit. This depends on the main focus of the data collection. Where there is uncertainty, an additional text must be supplied to explain how many datasets of which type are present.Nombre de fichiers dans le dossier et volume en MBytes au moment du versement. Pour les bases de données: nombre de données dans la collection de données au moment du versement. La notion donnée s'applique à l'ensemble des lignes d'un ou de plusieurs tableaux liés l'un à l'autre (unité logique centrale). Le nombre de données est à mentionner avec la désignation de l'unité logique centrale. Ceci dépend du sujet principal de la collection de données. En cas de manque de clarté doit être indiqué combien de données existent pour chaque type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'umfang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 63, 2)
    _Documentation = "Anzahl der Dateien des Dossiers und Umfang in MBytes zum Zeitpunkt der Ablieferung. Bei Datenbanken: Anzahl Datens\xe4tze der vorliegenden Datensammlung zum Zeitpunkt der Ablieferung. Als Datensatz gilt das Ensemble von Zeilen einer oder mehrerer miteinander verkn\xfcpften Tabellen (zentrale logische Einheit). Die Anzahl Datens\xe4tze ist zusammen mit der Bezeichnung der zentralen logischen Einheit zu nennen. Diese h\xe4ngt vom Hauptfokus der Datensammlung ab. Bei Unklarheit muss mit einem Zusatztext erkl\xe4rt werden, wie viele Datens\xe4tze welchen Typs vorliegen.Number of files in the dossier and size in MBytes at the time of submission. For databases: number of datasets in the present data collection at the time of submission. A dataset is a set of lines of one or more interlinked tables (central logical unit). The number of datasets must be named along with the designation of the central logical unit. This depends on the main focus of the data collection. Where there is uncertainty, an additional text must be supplied to explain how many datasets of which type are present.Nombre de fichiers dans le dossier et volume en MBytes au moment du versement. Pour les bases de donn\xe9es: nombre de donn\xe9es dans la collection de donn\xe9es au moment du versement. La notion donn\xe9e s'applique \xe0 l'ensemble des lignes d'un ou de plusieurs tableaux li\xe9s l'un \xe0 l'autre (unit\xe9 logique centrale). Le nombre de donn\xe9es est \xe0 mentionner avec la d\xe9signation de l'unit\xe9 logique centrale. Ceci d\xe9pend du sujet principal de la collection de donn\xe9es. En cas de manque de clart\xe9 doit \xeatre indiqu\xe9 combien de donn\xe9es existent pour chaque type."
umfang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'umfang', umfang)
_module_typeBindings.umfang = umfang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheitDossier
class federfuehrendeOrganisationseinheitDossier (text2):

    """Bestimmung der für die Erledigung des Geschäftes zuständigen federführenden Organisationseinheit.Name of the lead organisational unit responsible for dealing with the business matter.Désignation de l'unité organisationnelle responsable pour le traitement d'une affaire."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheitDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 100, 2)
    _Documentation = "Bestimmung der f\xfcr die Erledigung des Gesch\xe4ftes zust\xe4ndigen federf\xfchrenden Organisationseinheit.Name of the lead organisational unit responsible for dealing with the business matter.D\xe9signation de l'unit\xe9 organisationnelle responsable pour le traitement d'une affaire."
federfuehrendeOrganisationseinheitDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'federfuehrendeOrganisationseinheitDossier', federfuehrendeOrganisationseinheitDossier)
_module_typeBindings.federfuehrendeOrganisationseinheitDossier = federfuehrendeOrganisationseinheitDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung
class entstehungszeitraumAnmerkung (text4):

    """Zusätzliche Informationen, welche für die Ermittlung des Entstehungszeitraums relevant sind. Hier können Angaben über allfällige Löschungen und Mutationen an der Datensammlung eingetragen werden (für FILES relevant). Falls der Entstehungszeitraum geschätzt wurde, ist hier das Kriterium für die Schätzung zu nennen.Additional information relevant for determining the creation period. Information on any deletions and changes in the data collection can be entered here (relevant for FILES). If the creation period has been estimated, the criterion for the estimate is to be named here.Informations complémentaires qui sont importantes pour la détermination de la période de création. Ici peuvent être reportées les informations sur les effacements et les mutations de la collection de données (important pour FILES). Si la période de création a été estimée, le critère d'estimation est à mentionner ici."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 110, 2)
    _Documentation = "Zus\xe4tzliche Informationen, welche f\xfcr die Ermittlung des Entstehungszeitraums relevant sind. Hier k\xf6nnen Angaben \xfcber allf\xe4llige L\xf6schungen und Mutationen an der Datensammlung eingetragen werden (f\xfcr FILES relevant). Falls der Entstehungszeitraum gesch\xe4tzt wurde, ist hier das Kriterium f\xfcr die Sch\xe4tzung zu nennen.Additional information relevant for determining the creation period. Information on any deletions and changes in the data collection can be entered here (relevant for FILES). If the creation period has been estimated, the criterion for the estimate is to be named here.Informations compl\xe9mentaires qui sont importantes pour la d\xe9termination de la p\xe9riode de cr\xe9ation. Ici peuvent \xeatre report\xe9es les informations sur les effacements et les mutations de la collection de donn\xe9es (important pour FILES). Si la p\xe9riode de cr\xe9ation a \xe9t\xe9 estim\xe9e, le crit\xe8re d'estimation est \xe0 mentionner ici."
entstehungszeitraumAnmerkung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'entstehungszeitraumAnmerkung', entstehungszeitraumAnmerkung)
_module_typeBindings.entstehungszeitraumAnmerkung = entstehungszeitraumAnmerkung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristenkategorieDossier
class schutzfristenkategorieDossier (text1):

    """Artikel des Gesetzes, der die Schutzfrist festhält, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Article of the law stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorieDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 120, 2)
    _Documentation = 'Artikel des Gesetzes, der die Schutzfrist festh\xe4lt, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Article of the law stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristenkategorieDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'schutzfristenkategorieDossier', schutzfristenkategorieDossier)
_module_typeBindings.schutzfristenkategorieDossier = schutzfristenkategorieDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristDossier
class schutzfristDossier (text1):

    """Dauer der Schutzfrist in Jahren, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Durée en années du délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 130, 2)
    _Documentation = 'Dauer der Schutzfrist in Jahren, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Dur\xe9e en ann\xe9es du d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristDossier._CF_pattern = pyxb.binding.facets.CF_pattern()
schutzfristDossier._CF_pattern.addPattern(pattern='[0-9]*')
schutzfristDossier._InitializeFacetMap(schutzfristDossier._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'schutzfristDossier', schutzfristDossier)
_module_typeBindings.schutzfristDossier = schutzfristDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristenBegruendungDossier
class schutzfristenBegruendungDossier (text4):

    """Erläuterung der Begründung für eine verlängerte Schutzfrist für Unterlagen, die nach Personennamen erschlossen sind und schützenswerte Personendaten gemäss DSG enthalten (z.B. Art. 11 BGA), und für bestimmte Kategorien oder für einzelne Dossiers, die überwiegend schutzwürdige öffentliche oder private Interessen tangieren (z.B. Art. 12 Abs. 1 BGA und Art. 12 Abs. 2 BGA).Explanation of the reasons for an extended closure period for documents that are catalogued by individuals"™ names and contain sensitive personal data in accordance with the DPA (Art. 11 ArchA) and for certain categories or individual dossiers that touch on matters where there is an overriding public or private interest in preventing consultation (Art. 12 para. 1 ArchA and Art. 12 para. 2 ArchA).Explication du motif de prolongation du délai de protection pour les documents classés selon des noms de personnes et contenant des données personnelles sensibles selon la LPD (par exemple art. 11 LAr) et pour des catégories définies ou pour certains dossiers qui touchent un intérêt public ou privé prépondérant, digne de protection (par exemple art. 12 al. 1 LAr et art. 12 al. 2 LAr)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendungDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 142, 2)
    _Documentation = 'Erl\xe4uterung der Begr\xfcndung f\xfcr eine verl\xe4ngerte Schutzfrist f\xfcr Unterlagen, die nach Personennamen erschlossen sind und sch\xfctzenswerte Personendaten gem\xe4ss DSG enthalten (z.B. Art. 11 BGA), und f\xfcr bestimmte Kategorien oder f\xfcr einzelne Dossiers, die \xfcberwiegend schutzw\xfcrdige \xf6ffentliche oder private Interessen tangieren (z.B. Art. 12 Abs. 1 BGA und Art. 12 Abs. 2 BGA).Explanation of the reasons for an extended closure period for documents that are catalogued by individuals"\u2122 names and contain sensitive personal data in accordance with the DPA (Art. 11 ArchA) and for certain categories or individual dossiers that touch on matters where there is an overriding public or private interest in preventing consultation (Art. 12 para. 1 ArchA and Art. 12 para. 2 ArchA).Explication du motif de prolongation du d\xe9lai de protection pour les documents class\xe9s selon des noms de personnes et contenant des donn\xe9es personnelles sensibles selon la LPD (par exemple art. 11 LAr) et pour des cat\xe9gories d\xe9finies ou pour certains dossiers qui touchent un int\xe9r\xeat public ou priv\xe9 pr\xe9pond\xe9rant, digne de protection (par exemple art. 12 al. 1 LAr et art. 12 al. 2 LAr)'
schutzfristenBegruendungDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'schutzfristenBegruendungDossier', schutzfristenBegruendungDossier)
_module_typeBindings.schutzfristenBegruendungDossier = schutzfristenBegruendungDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}klassifizierungskategorieDossier
class klassifizierungskategorieDossier (text2):

    """Grad, in dem das Dossier und die enthaltenen Dokumente und Dateien vor unberechtigter Einsicht geschützt werden müssen. Referenz: Verordnung vom 10.12.1990 über die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 über den Schutz militärischer Informationen ([SR 510.411]).Degree to which the dossier and the documents and files it contains must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degré dans lequel le dossier et les documents et fichiers qu'il contient doivent être protégés d'une consultation non autorisée. Référence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411])."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorieDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 152, 2)
    _Documentation = "Grad, in dem das Dossier und die enthaltenen Dokumente und Dateien vor unberechtigter Einsicht gesch\xfctzt werden m\xfcssen. Referenz: Verordnung vom 10.12.1990 \xfcber die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 \xfcber den Schutz milit\xe4rischer Informationen ([SR 510.411]).Degree to which the dossier and the documents and files it contains must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degr\xe9 dans lequel le dossier et les documents et fichiers qu'il contient doivent \xeatre prot\xe9g\xe9s d'une consultation non autoris\xe9e. R\xe9f\xe9rence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411])."
klassifizierungskategorieDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'klassifizierungskategorieDossier', klassifizierungskategorieDossier)
_module_typeBindings.klassifizierungskategorieDossier = klassifizierungskategorieDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusDossier
class oeffentlichkeitsstatusDossier (text2):

    """Angabe, ob das Dossier gemäss [BGÖ] schützenswerte Dokumente oder Dateien enthält oder nicht.Indication of whether or not the dossier contains sensitive documents or files.Indiquer le dossier contient ou non des documents dignes de protection selon la [LTrans]."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 172, 2)
    _Documentation = 'Angabe, ob das Dossier gem\xe4ss [BG\xd6] sch\xfctzenswerte Dokumente oder Dateien enth\xe4lt oder nicht.Indication of whether or not the dossier contains sensitive documents or files.Indiquer le dossier contient ou non des documents dignes de protection selon la [LTrans].'
oeffentlichkeitsstatusDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusDossier', oeffentlichkeitsstatusDossier)
_module_typeBindings.oeffentlichkeitsstatusDossier = oeffentlichkeitsstatusDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendungDossier
class oeffentlichkeitsstatusBegruendungDossier (text4):

    """Argumente gegen die öffentliche Zugänglichkeit gemäss [BGÖ]. Gemäss Entwurf [BGÖ] muss begründet werden, warum Unterlagen nicht öffentlich zugänglich gemacht werden können.Arguments against public access. Reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'accès public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent être accessibles au public."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendungDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 182, 2)
    _Documentation = "Argumente gegen die \xf6ffentliche Zug\xe4nglichkeit gem\xe4ss [BG\xd6]. Gem\xe4ss Entwurf [BG\xd6] muss begr\xfcndet werden, warum Unterlagen nicht \xf6ffentlich zug\xe4nglich gemacht werden k\xf6nnen.Arguments against public access. Reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'acc\xe8s public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent \xeatre accessibles au public."
oeffentlichkeitsstatusBegruendungDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusBegruendungDossier', oeffentlichkeitsstatusBegruendungDossier)
_module_typeBindings.oeffentlichkeitsstatusBegruendungDossier = oeffentlichkeitsstatusBegruendungDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}sonstigeBestimmungenDossier
class sonstigeBestimmungenDossier (text4):

    """Angaben über sonstige rechtliche Auflagen, denen das Dossier unterstellt ist.Indication of other legal conditions to which the dossier is subject.Informations sur d'autres éventuelles conditions légales auxquelles est soumis le dossier."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungenDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 192, 2)
    _Documentation = "Angaben \xfcber sonstige rechtliche Auflagen, denen das Dossier unterstellt ist.Indication of other legal conditions to which the dossier is subject.Informations sur d'autres \xe9ventuelles conditions l\xe9gales auxquelles est soumis le dossier."
sonstigeBestimmungenDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'sonstigeBestimmungenDossier', sonstigeBestimmungenDossier)
_module_typeBindings.sonstigeBestimmungenDossier = sonstigeBestimmungenDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}vorgang
class vorgang (text4):

    """Angaben über Tätigkeiten, die an Dokumenten des Dossiers durchgeführt wurden. Es können z.B. Angaben zu Tätigkeiten sein, die im Rahmen eines Auftragssubdossiers durchgeführt wurden.Information on activities that have been carried out on the documents in the dossier. These may include e.g. information on activities carried out as part of a mandate subdossier.Informations sur les activités qui sont effectuées avec les documents du dossier. Ce peut être, par exemple, des informations sur les activités qui sont effectuées dans le cadre d'un mandat."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'vorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 202, 2)
    _Documentation = "Angaben \xfcber T\xe4tigkeiten, die an Dokumenten des Dossiers durchgef\xfchrt wurden. Es k\xf6nnen z.B. Angaben zu T\xe4tigkeiten sein, die im Rahmen eines Auftragssubdossiers durchgef\xfchrt wurden.Information on activities that have been carried out on the documents in the dossier. These may include e.g. information on activities carried out as part of a mandate subdossier.Informations sur les activit\xe9s qui sont effectu\xe9es avec les documents du dossier. Ce peut \xeatre, par exemple, des informations sur les activit\xe9s qui sont effectu\xe9es dans le cadre d'un mandat."
vorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'vorgang', vorgang)
_module_typeBindings.vorgang = vorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungDossier
class bemerkungDossier (text4):

    """Zusätzliche Informationen, welche das Dossier oder die Datensammlung betreffen. Hier können nähere Angaben zur Sprache und zu speziellen technischen Anforderungen eingetragen werden, welche den Zugang der Daten einschränken könnten.Additional information relating to the dossier or the data collection. Further information on the language and special technical requirements that may restrict access to the data may be entered here.Informations complémentaires qui concernent le dossier ou la collection de données. Ici peuvent être reportées les précisions sur la langue et sur les exigences techniques qui peuvent limiter l'accès aux données."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungDossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 212, 2)
    _Documentation = "Zus\xe4tzliche Informationen, welche das Dossier oder die Datensammlung betreffen. Hier k\xf6nnen n\xe4here Angaben zur Sprache und zu speziellen technischen Anforderungen eingetragen werden, welche den Zugang der Daten einschr\xe4nken k\xf6nnten.Additional information relating to the dossier or the data collection. Further information on the language and special technical requirements that may restrict access to the data may be entered here.Informations compl\xe9mentaires qui concernent le dossier ou la collection de donn\xe9es. Ici peuvent \xeatre report\xe9es les pr\xe9cisions sur la langue et sur les exigences techniques qui peuvent limiter l'acc\xe8s aux donn\xe9es."
bemerkungDossier._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungDossier', bemerkungDossier)
_module_typeBindings.bemerkungDossier = bemerkungDossier

# Atomic simple type: {http://bar.admin.ch/arelda/v4}titelVorgang
class titelVorgang (text3):

    """Benennung von Tätigkeit und Gegenstand des Geschäftsvorfalles.Description of activity and object of the transaction.Dénomination de l'activité et de l'objet du processus de l'activité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'titelVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 232, 2)
    _Documentation = "Benennung von T\xe4tigkeit und Gegenstand des Gesch\xe4ftsvorfalles.Description of activity and object of the transaction.D\xe9nomination de l'activit\xe9 et de l'objet du processus de l'activit\xe9."
titelVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'titelVorgang', titelVorgang)
_module_typeBindings.titelVorgang = titelVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}arbeitsanweisungVorgang
class arbeitsanweisungVorgang (text4):

    """Arbeitsanweisung, bzw.Auftragsbeschreibung: Vorgaben und Hinweise für die Durchführung und Erledigung.Instruction, guidelines and suggestions for implementation and completion.Instruction de travail ou description du mandat: directives et remarques pour l'exécution et la liquidation."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'arbeitsanweisungVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 242, 2)
    _Documentation = "Arbeitsanweisung, bzw.Auftragsbeschreibung: Vorgaben und Hinweise f\xfcr die Durchf\xfchrung und Erledigung.Instruction, guidelines and suggestions for implementation and completion.Instruction de travail ou description du mandat: directives et remarques pour l'ex\xe9cution et la liquidation."
arbeitsanweisungVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'arbeitsanweisungVorgang', arbeitsanweisungVorgang)
_module_typeBindings.arbeitsanweisungVorgang = arbeitsanweisungVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}federfuehrungVorgang
class federfuehrungVorgang (text3):

    """Akteur, der für die korrekte Durchführung des Geschäftsvorfalls verantwortlich ist.Player who is responsible for the correct execution of the transaction.Acteur qui est responsable de la bonne exécution du processus de l'activité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'federfuehrungVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 252, 2)
    _Documentation = "Akteur, der f\xfcr die korrekte Durchf\xfchrung des Gesch\xe4ftsvorfalls verantwortlich ist.Player who is responsible for the correct execution of the transaction.Acteur qui est responsable de la bonne ex\xe9cution du processus de l'activit\xe9."
federfuehrungVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'federfuehrungVorgang', federfuehrungVorgang)
_module_typeBindings.federfuehrungVorgang = federfuehrungVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}verweisVorgang
class verweisVorgang (text4):

    """Referenz auf andere Ordnungssystempositionen, Dossiers oder Vorgänge, die in enger Beziehung mit dem Vorgang stehen ohne direkt mit ihm verknüpft zu sein.Reference to other classification system positions, dossier or processes that are directly linked  or in close relationship with the process.Référence à d'autres positions de système de classement, dossiers ou processus qui sont en relation étroite avec le processus sans être en ligne hiérarchique directe avec lui."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'verweisVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 262, 2)
    _Documentation = "Referenz auf andere Ordnungssystempositionen, Dossiers oder Vorg\xe4nge, die in enger Beziehung mit dem Vorgang stehen ohne direkt mit ihm verkn\xfcpft zu sein.Reference to other classification system positions, dossier or processes that are directly linked  or in close relationship with the process.R\xe9f\xe9rence \xe0 d'autres positions de syst\xe8me de classement, dossiers ou processus qui sont en relation \xe9troite avec le processus sans \xeatre en ligne hi\xe9rarchique directe avec lui."
verweisVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'verweisVorgang', verweisVorgang)
_module_typeBindings.verweisVorgang = verweisVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungVorgang
class bemerkungVorgang (text4):

    """Ergänzende Information zum Vorgang.Supplementary information of the transaction.Des renseignements supplémentaires du processus de l'activité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 272, 2)
    _Documentation = "Erg\xe4nzende Information zum Vorgang.Supplementary information of the transaction.Des renseignements suppl\xe9mentaires du processus de l'activit\xe9."
bemerkungVorgang._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungVorgang', bemerkungVorgang)
_module_typeBindings.bemerkungVorgang = bemerkungVorgang

# Atomic simple type: {http://bar.admin.ch/arelda/v4}vorschreibungAktivitaet
class vorschreibungAktivitaet (text3):

    """Beschreibung der Tätigkeit, die ausgeführt werden soll (Standardanweisungen).Description of the activity to be performed (standard instructions).Description de l'activité qui doit être effectuée (Instructions standard)."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'vorschreibungAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 292, 2)
    _Documentation = "Beschreibung der T\xe4tigkeit, die ausgef\xfchrt werden soll (Standardanweisungen).Description of the activity to be performed (standard instructions).Description de l'activit\xe9 qui doit \xeatre effectu\xe9e (Instructions standard)."
vorschreibungAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'vorschreibungAktivitaet', vorschreibungAktivitaet)
_module_typeBindings.vorschreibungAktivitaet = vorschreibungAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}anweisungAktivitaet
class anweisungAktivitaet (text4):

    """Freitext für die Eingabe der Anweisung zu einer Aktivität.Detailed description of the activity to be performed.Description détaillée de l'activité qui doit être effectuée."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'anweisungAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 302, 2)
    _Documentation = "Freitext f\xfcr die Eingabe der Anweisung zu einer Aktivit\xe4t.Detailed description of the activity to be performed.Description d\xe9taill\xe9e de l'activit\xe9 qui doit \xeatre effectu\xe9e."
anweisungAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'anweisungAktivitaet', anweisungAktivitaet)
_module_typeBindings.anweisungAktivitaet = anweisungAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bearbeiterAktivitaet
class bearbeiterAktivitaet (text3):

    """Akteur, welcher die Aktivität durchführt. Im Organigramm bzw. den Organisationsvorschriften der Verwaltungseinheit aufgeführte Rollen bzw. Personen.Player which performs the activity. In the organization or the organizational rules of the administrative unit specified roles or persons.Acteur qui exécute l'activité. Rôles ou personnes mentionnés dans l'organigramme ou les directives d'organisation de l'unité administrative."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bearbeiterAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 312, 2)
    _Documentation = "Akteur, welcher die Aktivit\xe4t durchf\xfchrt. Im Organigramm bzw. den Organisationsvorschriften der Verwaltungseinheit aufgef\xfchrte Rollen bzw. Personen.Player which performs the activity. In the organization or the organizational rules of the administrative unit specified roles or persons.Acteur qui ex\xe9cute l'activit\xe9. R\xf4les ou personnes mentionn\xe9s dans l'organigramme ou les directives d'organisation de l'unit\xe9 administrative."
bearbeiterAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bearbeiterAktivitaet', bearbeiterAktivitaet)
_module_typeBindings.bearbeiterAktivitaet = bearbeiterAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}verweisAktivitaet
class verweisAktivitaet (text4):

    """Referenz auf andere Ordnungssystempositionen, Dossiers, Vorgänge oder Aktivitäten, die in enger Beziehung zu der Aktivität stehen ohne direkt mit ihr verknüpft zu sein.Reference to other classification system positions, dossier or processes that are directly linked  or in close relationship with the process.Référence à d'autres positions de système de classement, dossiers ou processus qui sont en relation étroite avec le processus sans être en ligne hiérarchique directe avec lui."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'verweisAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 332, 2)
    _Documentation = "Referenz auf andere Ordnungssystempositionen, Dossiers, Vorg\xe4nge oder Aktivit\xe4ten, die in enger Beziehung zu der Aktivit\xe4t stehen ohne direkt mit ihr verkn\xfcpft zu sein.Reference to other classification system positions, dossier or processes that are directly linked  or in close relationship with the process.R\xe9f\xe9rence \xe0 d'autres positions de syst\xe8me de classement, dossiers ou processus qui sont en relation \xe9troite avec le processus sans \xeatre en ligne hi\xe9rarchique directe avec lui."
verweisAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'verweisAktivitaet', verweisAktivitaet)
_module_typeBindings.verweisAktivitaet = verweisAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungAktivitaet
class bemerkungAktivitaet (text4):

    """Informationen, die für die Aktivität von Bedeutung sind.Information of significance for the activity.Informations importantes pour l'activité"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/dossier.xsd', 342, 2)
    _Documentation = "Informationen, die f\xfcr die Aktivit\xe4t von Bedeutung sind.Information of significance for the activity.Informations importantes pour l'activit\xe9"
bemerkungAktivitaet._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungAktivitaet', bemerkungAktivitaet)
_module_typeBindings.bemerkungAktivitaet = bemerkungAktivitaet

# Atomic simple type: {http://bar.admin.ch/arelda/v4}nameOrdnungssystem
class nameOrdnungssystem (text2):

    """Eindeutige Bezeichnung des Ordnungssystems, welche den Geltungsbereich des Ordnungssystems wiedergibt. Enthält in der Regel als Element die Bezeichnung der Verwaltungseinheit oder des Aufgabenbereichs, in welchem das Ordnungssystem angewandt wird.Unambiguous designation of the classification system indicating the scope of validity of the classification system. Generally contains as an element the designation of the administrative unit or area of responsibility in which the classification system is used.Désignation univoque du système de classement, laquelle restitue le champ d'application du système de classement. Contient normalement comme élément la désignation de l'unité administrative ou le secteur d'activités, dans lequel est employé le système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameOrdnungssystem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystem.xsd', 7, 2)
    _Documentation = "Eindeutige Bezeichnung des Ordnungssystems, welche den Geltungsbereich des Ordnungssystems wiedergibt. Enth\xe4lt in der Regel als Element die Bezeichnung der Verwaltungseinheit oder des Aufgabenbereichs, in welchem das Ordnungssystem angewandt wird.Unambiguous designation of the classification system indicating the scope of validity of the classification system. Generally contains as an element the designation of the administrative unit or area of responsibility in which the classification system is used.D\xe9signation univoque du syst\xe8me de classement, laquelle restitue le champ d'application du syst\xe8me de classement. Contient normalement comme \xe9l\xe9ment la d\xe9signation de l'unit\xe9 administrative ou le secteur d'activit\xe9s, dans lequel est employ\xe9 le syst\xe8me de classement."
nameOrdnungssystem._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'nameOrdnungssystem', nameOrdnungssystem)
_module_typeBindings.nameOrdnungssystem = nameOrdnungssystem

# Atomic simple type: {http://bar.admin.ch/arelda/v4}generation
class generation (text1):

    """Versionsbezeichnung des Ordnungssystems. Dient zur Verknüpfung und Unterscheidung von zeitlich aufeinander folgenden OS desselben Typs mit demselben Geltungsbereich.version of the classification system. Serves to link and differentiate chronologically sequential CSs of the same type with the same scope of validity.Désignation de la version du système de classement. Sert à relier et à différencier des systèmes de classement du même type qui se suivent dans le temps avec le même domaine d’application."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'generation')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystem.xsd', 17, 2)
    _Documentation = 'Versionsbezeichnung des Ordnungssystems. Dient zur Verkn\xfcpfung und Unterscheidung von zeitlich aufeinander folgenden OS desselben Typs mit demselben Geltungsbereich.version of the classification system. Serves to link and differentiate chronologically sequential CSs of the same type with the same scope of validity.D\xe9signation de la version du syst\xe8me de classement. Sert \xe0 relier et \xe0 diff\xe9rencier des syst\xe8mes de classement du m\xeame type qui se suivent dans le temps avec le m\xeame domaine d\u2019application.'
generation._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'generation', generation)
_module_typeBindings.generation = generation

# Atomic simple type: {http://bar.admin.ch/arelda/v4}mitbenutzung
class mitbenutzung (text4):

    """Weitere Organisationseinheiten, ausserhalb des Aktenbildners, welche das Ordnungssystem mitbenutzen oder mitbenutzt haben.Further organisational units outside the records creator that also use or have used the classification system.Autres unités organisationnelles, en dehors du producteur de dossiers, qui utilisent ou ont utilisé le système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystem.xsd', 27, 2)
    _Documentation = 'Weitere Organisationseinheiten, ausserhalb des Aktenbildners, welche das Ordnungssystem mitbenutzen oder mitbenutzt haben.Further organisational units outside the records creator that also use or have used the classification system.Autres unit\xe9s organisationnelles, en dehors du producteur de dossiers, qui utilisent ou ont utilis\xe9 le syst\xe8me de classement.'
mitbenutzung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'mitbenutzung', mitbenutzung)
_module_typeBindings.mitbenutzung = mitbenutzung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungOrdnungssysstem
class bemerkungOrdnungssysstem (text4):

    """Zusätzliche Informationen, welche das Ordnungssystem betreffen.Additional information relating to the classification system.Informations complémentaires qui concernent le système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungOrdnungssysstem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystem.xsd', 37, 2)
    _Documentation = 'Zus\xe4tzliche Informationen, welche das Ordnungssystem betreffen.Additional information relating to the classification system.Informations compl\xe9mentaires qui concernent le syst\xe8me de classement.'
bemerkungOrdnungssysstem._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungOrdnungssysstem', bemerkungOrdnungssysstem)
_module_typeBindings.bemerkungOrdnungssysstem = bemerkungOrdnungssysstem

# Atomic simple type: {http://bar.admin.ch/arelda/v4}nummer
class nummer (text1):

    """Eindeutige Identifikation und Ordnungsmerkmal der Ordnungssystemposition.Unambiguous identification and classification feature of the classification system position.Identification univoque et caractéristique de classement de la position du système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nummer')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 7, 2)
    _Documentation = 'Eindeutige Identifikation und Ordnungsmerkmal der Ordnungssystemposition.Unambiguous identification and classification feature of the classification system position.Identification univoque et caract\xe9ristique de classement de la position du syst\xe8me de classement.'
nummer._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'nummer', nummer)
_module_typeBindings.nummer = nummer

# Atomic simple type: {http://bar.admin.ch/arelda/v4}titelOrdnungssystemposition
class titelOrdnungssystemposition (text2):

    """Bezeichnung des Aufgabenbereichs, dem die Ordnungssystemposition zugewiesen ist.Designation of the area of responsibility to which the classification system position is allocated.Désignation du secteur d'activités qui est attribué à cette position du système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'titelOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 17, 2)
    _Documentation = "Bezeichnung des Aufgabenbereichs, dem die Ordnungssystemposition zugewiesen ist.Designation of the area of responsibility to which the classification system position is allocated.D\xe9signation du secteur d'activit\xe9s qui est attribu\xe9 \xe0 cette position du syst\xe8me de classement."
titelOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'titelOrdnungssystemposition', titelOrdnungssystemposition)
_module_typeBindings.titelOrdnungssystemposition = titelOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheitOrdnungssystemposition
class federfuehrendeOrganisationseinheitOrdnungssystemposition (text2):

    """Bestimmung der für die Erledigung des Geschäftes zuständigen federführenden Organisationseinheit.Name of the lead organisational unit responsible for dealing with the business matter.Désignation de l'unité organisationnelle responsable pour le traitement de l'affaire."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheitOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 37, 2)
    _Documentation = "Bestimmung der f\xfcr die Erledigung des Gesch\xe4ftes zust\xe4ndigen federf\xfchrenden Organisationseinheit.Name of the lead organisational unit responsible for dealing with the business matter.D\xe9signation de l'unit\xe9 organisationnelle responsable pour le traitement de l'affaire."
federfuehrendeOrganisationseinheitOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'federfuehrendeOrganisationseinheitOrdnungssystemposition', federfuehrendeOrganisationseinheitOrdnungssystemposition)
_module_typeBindings.federfuehrendeOrganisationseinheitOrdnungssystemposition = federfuehrendeOrganisationseinheitOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristenkategorieOrdnungssystemposition
class schutzfristenkategorieOrdnungssystemposition (text1):

    """Artikel des Gesetztes, der die Schutzfrist festhält, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Article of the ArchA stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorieOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 47, 2)
    _Documentation = 'Artikel des Gesetztes, der die Schutzfrist festh\xe4lt, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Article of the ArchA stipulating the closure period reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Article de la loi qui fixe le d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristenkategorieOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'schutzfristenkategorieOrdnungssystemposition', schutzfristenkategorieOrdnungssystemposition)
_module_typeBindings.schutzfristenkategorieOrdnungssystemposition = schutzfristenkategorieOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristOrdnungssystemposition
class schutzfristOrdnungssystemposition (text1):

    """Dauer der Schutzfrist in Jahren, die das Amt im Formular „Meldung von Unterlagen mit besonderer Schutzfrist und öffentlich zugänglichen Unterlagen“ gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollständigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents" form and checked for formal correctness and completeness by the archive.Durée en années du délai de protection que l’administration a annoncé dans le formulaire "Annonce de documents avec un délai de protection particulier et de documents consultables par le public" et dont les archives ont contrôlé l’exactitude et l’intégralité."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 57, 2)
    _Documentation = 'Dauer der Schutzfrist in Jahren, die das Amt im Formular \u201eMeldung von Unterlagen mit besonderer Schutzfrist und \xf6ffentlich zug\xe4nglichen Unterlagen\u201c gemeldet hat und vom Archiv auf ihre formale Korrektheit und Vollst\xe4ndigkeit kontrolliert worden ist.Length of the closure period in years reported by the authority in the "Notification of documents subject to a special closure period and publicly accessible documents"\x9d form and checked for formal correctness and completeness by the archive.Dur\xe9e en ann\xe9es du d\xe9lai de protection que l\u2019administration a annonc\xe9 dans le formulaire "Annonce de documents avec un d\xe9lai de protection particulier et de documents consultables par le public" et dont les archives ont contr\xf4l\xe9 l\u2019exactitude et l\u2019int\xe9gralit\xe9.'
schutzfristOrdnungssystemposition._CF_pattern = pyxb.binding.facets.CF_pattern()
schutzfristOrdnungssystemposition._CF_pattern.addPattern(pattern='[0-9]*')
schutzfristOrdnungssystemposition._InitializeFacetMap(schutzfristOrdnungssystemposition._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'schutzfristOrdnungssystemposition', schutzfristOrdnungssystemposition)
_module_typeBindings.schutzfristOrdnungssystemposition = schutzfristOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schutzfristenBegruendungOrdnungssystemposition
class schutzfristenBegruendungOrdnungssystemposition (text4):

    """Erläuterung der Begründung für eine verlängerte Schutzfrist für Unterlagen, die nach Personennamen erschlossen sind und schützenswerte Personendaten gemäss DSG enthalten (z.B. Art. 11 BGA), und für bestimmte Kategorien oder für einzelne Dossiers, die überwiegend schutzwürdige öffentliche oder private Interessen tangieren (z.B. Art. 12 Abs. 1 BGA und Art. 12 Abs. 2 BGA).Explanation of the reasons for an extended closure period for documents that are catalogued by individuals"™ names and contain sensitive personal data in accordance with the DPA (Art. 11 ArchA) and for certain categories or individual dossiers that touch on matters where there is an overriding public or private interest in preventing consultation (Art. 12 para. 1 ArchA and Art. 12 para. 2 ArchA).Explication du motif de prolongation du délai de protection pour les documents classés selon des noms de personnes et contenant des données personnelles sensibles selon la LPD (par exemple art. 11 LAr) et pour des catégories définies ou pour certains dossiers qui touchent un intérêt public ou privé prépondérant, digne de protection (par exemple art. 12 al. 1 LAr et art. 12 al. 2 LAr)"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendungOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 69, 2)
    _Documentation = 'Erl\xe4uterung der Begr\xfcndung f\xfcr eine verl\xe4ngerte Schutzfrist f\xfcr Unterlagen, die nach Personennamen erschlossen sind und sch\xfctzenswerte Personendaten gem\xe4ss DSG enthalten (z.B. Art. 11 BGA), und f\xfcr bestimmte Kategorien oder f\xfcr einzelne Dossiers, die \xfcberwiegend schutzw\xfcrdige \xf6ffentliche oder private Interessen tangieren (z.B. Art. 12 Abs. 1 BGA und Art. 12 Abs. 2 BGA).Explanation of the reasons for an extended closure period for documents that are catalogued by individuals"\u2122 names and contain sensitive personal data in accordance with the DPA (Art. 11 ArchA) and for certain categories or individual dossiers that touch on matters where there is an overriding public or private interest in preventing consultation (Art. 12 para. 1 ArchA and Art. 12 para. 2 ArchA).Explication du motif de prolongation du d\xe9lai de protection pour les documents class\xe9s selon des noms de personnes et contenant des donn\xe9es personnelles sensibles selon la LPD (par exemple art. 11 LAr) et pour des cat\xe9gories d\xe9finies ou pour certains dossiers qui touchent un int\xe9r\xeat public ou priv\xe9 pr\xe9pond\xe9rant, digne de protection (par exemple art. 12 al. 1 LAr et art. 12 al. 2 LAr)'
schutzfristenBegruendungOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'schutzfristenBegruendungOrdnungssystemposition', schutzfristenBegruendungOrdnungssystemposition)
_module_typeBindings.schutzfristenBegruendungOrdnungssystemposition = schutzfristenBegruendungOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}klassifizierungskategorieOrdnungssystemposition
class klassifizierungskategorieOrdnungssystemposition (text2):

    """Grad, in dem alle der Ordnungssystemposition untergeordneten Objekte Dossier und Dokumente vor unberechtigter Einsicht geschützt werden müssen. Referenz: Verordnung vom 10.12.1990 über die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 über den Schutz militärischer Informationen ([SR 510.411]).Degree to which all the dossier and document objects subordinated to the classification system position must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degré dans lequel doivent être protégés d'une consultation non autorisée tous les dossiers et documents subordonnés à une position du système de classement. Référence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411]"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorieOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 79, 2)
    _Documentation = "Grad, in dem alle der Ordnungssystemposition untergeordneten Objekte Dossier und Dokumente vor unberechtigter Einsicht gesch\xfctzt werden m\xfcssen. Referenz: Verordnung vom 10.12.1990 \xfcber die Klassifizierung und Behandlung von Informationen im zivilen Verwaltungsbereich ([SR 172.015]) und Verordnung vom 1.5.1990 \xfcber den Schutz milit\xe4rischer Informationen ([SR 510.411]).Degree to which all the dossier and document objects subordinated to the classification system position must be protected against unauthorised access. Reference: Ordinance of 10.12.1990 on the Classification and Treatment of Information in the Civil Administration ([SR 172.015]) and Ordinance of 1.5.1990 on the Protection of Military Information ([SR 510.411]).Degr\xe9 dans lequel doivent \xeatre prot\xe9g\xe9s d'une consultation non autoris\xe9e tous les dossiers et documents subordonn\xe9s \xe0 une position du syst\xe8me de classement. R\xe9f\xe9rence: Ordonnance du 10.12.1990 sur la classification et le traitement d'informations de l'administration civile  ([SR 172.015]) et ordonnance du 1.5.1990 sur la protection des informations militaires ([SR 510.411]"
klassifizierungskategorieOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'klassifizierungskategorieOrdnungssystemposition', klassifizierungskategorieOrdnungssystemposition)
_module_typeBindings.klassifizierungskategorieOrdnungssystemposition = klassifizierungskategorieOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusOrdnungssystemposition
class oeffentlichkeitsstatusOrdnungssystemposition (text2):

    """Angabe, ob der Ordnungssystemposition untergeordnete Dossiers gemäss [BGÖ] schützenswerte Dokumente enthalten oder nicht.Indication of whether or not dossiers subordinated to the classification system position contain sensitive documents under the [FoIA].Indiquer si les dossiers subordonnés à la position du système de classement contiennent ou non des documents dignes de protection selon la [LTrans]"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 99, 2)
    _Documentation = 'Angabe, ob der Ordnungssystemposition untergeordnete Dossiers gem\xe4ss [BG\xd6] sch\xfctzenswerte Dokumente enthalten oder nicht.Indication of whether or not dossiers subordinated to the classification system position contain sensitive documents under the [FoIA].Indiquer si les dossiers subordonn\xe9s \xe0 la position du syst\xe8me de classement contiennent ou non des documents dignes de protection selon la [LTrans]'
oeffentlichkeitsstatusOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusOrdnungssystemposition', oeffentlichkeitsstatusOrdnungssystemposition)
_module_typeBindings.oeffentlichkeitsstatusOrdnungssystemposition = oeffentlichkeitsstatusOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendungOrdnungssystemposition
class oeffentlichkeitsstatusBegruendungOrdnungssystemposition (text4):

    """Argumente gegen die öffentliche Zugänglichkeit gemäss [BGÖ]. Gemäss Entwurf [BGÖ] muss begründet werden, warum Unterlagen nicht öffentlich zugänglich gemacht werden können.Arguments against public access under the [FoIA]. According to the draft [FoIA], reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'accès public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent être accessibles au public."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendungOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 109, 2)
    _Documentation = "Argumente gegen die \xf6ffentliche Zug\xe4nglichkeit gem\xe4ss [BG\xd6]. Gem\xe4ss Entwurf [BG\xd6] muss begr\xfcndet werden, warum Unterlagen nicht \xf6ffentlich zug\xe4nglich gemacht werden k\xf6nnen.Arguments against public access under the [FoIA]. According to the draft [FoIA], reasons why documents cannot be made publicly accessible must be stated.Arguments contre l'acc\xe8s public selon la [LTrans]. Selon le projet de [LTrans], il faut donner les raisons pour lesquelles des documents ne peuvent \xeatre accessibles au public."
oeffentlichkeitsstatusBegruendungOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'oeffentlichkeitsstatusBegruendungOrdnungssystemposition', oeffentlichkeitsstatusBegruendungOrdnungssystemposition)
_module_typeBindings.oeffentlichkeitsstatusBegruendungOrdnungssystemposition = oeffentlichkeitsstatusBegruendungOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}sonstigeBestimmungenOrdnungssystemposition
class sonstigeBestimmungenOrdnungssystemposition (text4):

    """Angaben über sonstige rechtliche Auflagen, denen die Ordnungssystemposition unterstellt ist. Information on other legal conditions to which the classification system position is subject. Informations sur d'autres éventuelles conditions légales auxquelles est soumise la position du système de classement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungenOrdnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/ordnungssystemposition.xsd', 119, 2)
    _Documentation = "Angaben \xfcber sonstige rechtliche Auflagen, denen die Ordnungssystemposition unterstellt ist. Information on other legal conditions to which the classification system position is subject. Informations sur d'autres \xe9ventuelles conditions l\xe9gales auxquelles est soumise la position du syst\xe8me de classement."
sonstigeBestimmungenOrdnungssystemposition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'sonstigeBestimmungenOrdnungssystemposition', sonstigeBestimmungenOrdnungssystemposition)
_module_typeBindings.sonstigeBestimmungenOrdnungssystemposition = sonstigeBestimmungenOrdnungssystemposition

# Atomic simple type: {http://bar.admin.ch/arelda/v4}nameSIP
class nameSIP (text1):

    """Name des SIP zum Zeitpunkt der Ablieferung.Name of the SIP at the time of submission.Nom du SIP au moment du versement."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 7, 2)
    _Documentation = 'Name des SIP zum Zeitpunkt der Ablieferung.Name of the SIP at the time of submission.Nom du SIP au moment du versement.'
nameSIP._CF_pattern = pyxb.binding.facets.CF_pattern()
nameSIP._CF_pattern.addPattern(pattern='[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}')
nameSIP._InitializeFacetMap(nameSIP._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'nameSIP', nameSIP)
_module_typeBindings.nameSIP = nameSIP

# Atomic simple type: {http://bar.admin.ch/arelda/v4}globaleAIPId
class globaleAIPId (text1):

    """Über die Gesamtheit der AIP eindeutige ID. Wird im AIS verzeichnet.Unambiguous ID for the whole of the AIP. Described in the AIS.ID univoque pour tout l'AIP. Elle est enregistrée dans AIS."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 19, 2)
    _Documentation = "\xdcber die Gesamtheit der AIP eindeutige ID. Wird im AIS verzeichnet.Unambiguous ID for the whole of the AIP. Described in the AIS.ID univoque pour tout l'AIP. Elle est enregistr\xe9e dans AIS."
globaleAIPId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'globaleAIPId', globaleAIPId)
_module_typeBindings.globaleAIPId = globaleAIPId

# Atomic simple type: {http://bar.admin.ch/arelda/v4}lokaleAIPId
class lokaleAIPId (text1):

    """Über die Gesamtheit der AIP eindeutige ID im Zusammenhang mit Paketmigrationen. Entsteht zum ersten Mal, wenn ein AIP migriert wird. Wird nicht im AIS verzeichnet.Unambiguous ID for the whole of the AIP in connection with package migrations. Is created for the first time when an AIP is migrated. Is not described in the AIS.ID univoque pour tout l'AIP en rapport avec la migration du paquet. Elle est créée au moment où un AIP est migré. Elle n'est pas enregistrée dans AIS."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 29, 2)
    _Documentation = "\xdcber die Gesamtheit der AIP eindeutige ID im Zusammenhang mit Paketmigrationen. Entsteht zum ersten Mal, wenn ein AIP migriert wird. Wird nicht im AIS verzeichnet.Unambiguous ID for the whole of the AIP in connection with package migrations. Is created for the first time when an AIP is migrated. Is not described in the AIS.ID univoque pour tout l'AIP en rapport avec la migration du paquet. Elle est cr\xe9\xe9e au moment o\xf9 un AIP est migr\xe9. Elle n'est pas enregistr\xe9e dans AIS."
lokaleAIPId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'lokaleAIPId', lokaleAIPId)
_module_typeBindings.lokaleAIPId = lokaleAIPId

# Atomic simple type: {http://bar.admin.ch/arelda/v4}fruehereLokaleAIPId
class fruehereLokaleAIPId (text1):

    """Zeigt auf das "Vater-AIP" zurück, also dasjenige AIP, aus welchem das vorliegende hervorgegangen ist.Refers back to the "father AIP ", i.e. the AIP from which the present one came.Désigne "l'AIP-père", donc l'AIP duquel résulte celui actuel."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 39, 2)
    _Documentation = 'Zeigt auf das "Vater-AIP" zur\xfcck, also dasjenige AIP, aus welchem das vorliegende hervorgegangen ist.Refers back to the "father AIP "\x9d, i.e. the AIP from which the present one came.D\xe9signe "l\'AIP-p\xe8re", donc l\'AIP duquel r\xe9sulte celui actuel.'
fruehereLokaleAIPId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'fruehereLokaleAIPId', fruehereLokaleAIPId)
_module_typeBindings.fruehereLokaleAIPId = fruehereLokaleAIPId

# Atomic simple type: {http://bar.admin.ch/arelda/v4}schemaVersion
class schemaVersion (text1, pyxb.binding.basis.enumeration_mixin):

    """Angabe, mit welcher XSD-Version das Paket erstellt wurde.Indication of which XSD version the package was created with.Indication de la version du XSD employée pour créer le paquet."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'schemaVersion')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/paket.xsd', 63, 2)
    _Documentation = 'Angabe, mit welcher XSD-Version das Paket erstellt wurde.Indication of which XSD version the package was created with.Indication de la version du XSD employ\xe9e pour cr\xe9er le paquet.'
schemaVersion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=schemaVersion, enum_prefix=None)
schemaVersion.n4_1 = schemaVersion._CF_enumeration.addEnumeration(unicode_value='4.1', tag='n4_1')
schemaVersion._InitializeFacetMap(schemaVersion._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'schemaVersion', schemaVersion)
_module_typeBindings.schemaVersion = schemaVersion

# Atomic simple type: {http://bar.admin.ch/arelda/v4}aktenbildnerName
class aktenbildnerName (text2):

    """Bezeichnung der Stelle, der Organisationseinheit oder der Person(en), welche die Unterlagen oder die Datensammlung erstellt oder geführt hat. Falls der Aktenbildner unbekannt ist, muss die Angabe "Aktenbildner unbekannt" eingetragen werden.Designation of the authority, organisational unit or person(s) that created or managed the documents or the data collection. If the records creator is unknown, the information "Records creator unknown" must be entered.Désignation du service, de l'unité organisationnelle ou de la (des) personne(s), qui a créé ou géré les documents ou la collection de données. Dans le cas où le producteur de dossiers est inconnu, l'indication "producteur de dossiers inconnu" doit être inscrite."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 7, 2)
    _Documentation = 'Bezeichnung der Stelle, der Organisationseinheit oder der Person(en), welche die Unterlagen oder die Datensammlung erstellt oder gef\xfchrt hat. Falls der Aktenbildner unbekannt ist, muss die Angabe "Aktenbildner unbekannt" eingetragen werden.Designation of the authority, organisational unit or person(s) that created or managed the documents or the data collection. If the records creator is unknown, the information "Records creator unknown"\x9d must be entered.D\xe9signation du service, de l\'unit\xe9 organisationnelle ou de la (des) personne(s), qui a cr\xe9\xe9 ou g\xe9r\xe9 les documents ou la collection de donn\xe9es. Dans le cas o\xf9 le producteur de dossiers est inconnu, l\'indication "producteur de dossiers inconnu" doit \xeatre inscrite.'
aktenbildnerName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'aktenbildnerName', aktenbildnerName)
_module_typeBindings.aktenbildnerName = aktenbildnerName

# Atomic simple type: {http://bar.admin.ch/arelda/v4}systemName
class systemName (text3):

    """Name des Informationssystems, aus dem die abgelieferten Daten (FILES), Dossiers und Dokumente (GEVER) stammen.Name of the information system from which the data (FILES), dossiers and documents (GEVER) submitted come.Nom du système d'information duquel proviennent les données (FILES), les dossiers et les documents (GEVER) versés."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'systemName')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 17, 2)
    _Documentation = "Name des Informationssystems, aus dem die abgelieferten Daten (FILES), Dossiers und Dokumente (GEVER) stammen.Name of the information system from which the data (FILES), dossiers and documents (GEVER) submitted come.Nom du syst\xe8me d'information duquel proviennent les donn\xe9es (FILES), les dossiers et les documents (GEVER) vers\xe9s."
systemName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'systemName', systemName)
_module_typeBindings.systemName = systemName

# Atomic simple type: {http://bar.admin.ch/arelda/v4}systemBeschreibung
class systemBeschreibung (text4):

    """Knappe Beschreibung des Informationssystems, aus dem die abgelieferten Daten (FILES) stammen. Die Beschreibung gibt Auskunft über den Zweck (inkl. Angabe der gesetzlichen Grundlagen), die Architektur, die Entwicklung und über relevante Ergänzungen und Änderungen des Systems. Zudem können hier Angaben zur Datenerhebung und zu den Organisationseinheiten gemacht werden, die neben dem Aktenbildner das System verwenden.Brief description of the information system from which the data (FILES) submitted come. The description provides information on the purpose (including an indication of the legal bases), architecture and development of the system as well as relevant additions and changes. Information on data gathering and the organisational units that use the system in addition to the records creator can also be supplied here.Description concise du système d'information duquel proviennent les données (FILES) versées. La description renseigne sur le but (y compris l'indication des bases légales), l'architecture, le développement et sur les compléments et modifications importants du système. En outre, les indications sur la collecte des données et sur les unités organisationnelles, qui emploient le système en dehors du producteur de dossiers, peuvent être données ici."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 27, 2)
    _Documentation = "Knappe Beschreibung des Informationssystems, aus dem die abgelieferten Daten (FILES) stammen. Die Beschreibung gibt Auskunft \xfcber den Zweck (inkl. Angabe der gesetzlichen Grundlagen), die Architektur, die Entwicklung und \xfcber relevante Erg\xe4nzungen und \xc4nderungen des Systems. Zudem k\xf6nnen hier Angaben zur Datenerhebung und zu den Organisationseinheiten gemacht werden, die neben dem Aktenbildner das System verwenden.Brief description of the information system from which the data (FILES) submitted come. The description provides information on the purpose (including an indication of the legal bases), architecture and development of the system as well as relevant additions and changes. Information on data gathering and the organisational units that use the system in addition to the records creator can also be supplied here.Description concise du syst\xe8me d'information duquel proviennent les donn\xe9es (FILES) vers\xe9es. La description renseigne sur le but (y compris l'indication des bases l\xe9gales), l'architecture, le d\xe9veloppement et sur les compl\xe9ments et modifications importants du syst\xe8me. En outre, les indications sur la collecte des donn\xe9es et sur les unit\xe9s organisationnelles, qui emploient le syst\xe8me en dehors du producteur de dossiers, peuvent \xeatre donn\xe9es ici."
systemBeschreibung._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'systemBeschreibung', systemBeschreibung)
_module_typeBindings.systemBeschreibung = systemBeschreibung

# Atomic simple type: {http://bar.admin.ch/arelda/v4}verwandteSysteme
class verwandteSysteme (text4):

    """Systeme, die mit dem beschriebenen System Daten ausgetauscht haben und damit Subsysteme, Parallelsysteme oder übergeordnete Systeme sind. Hier werden die Bezeichnungen der Systeme und die Art der Verwandtschaft eingetragen.Brief description of the information system from which the data (FILES) submitted come. The description provides information on the purpose (including an indication of the legal bases), architecture and development of the system as well as relevant additions and changes. Information on data gathering and the organisational units that use the system in addition to the records creator can also be supplied here.Systèmes qui ont échangé des données avec le système décrit et qui sont ainsi des sous-systèmes, des systèmes parallèles ou des systèmes supérieurs. Ici sont reportées les désignations des systèmes et leur relation."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 37, 2)
    _Documentation = 'Systeme, die mit dem beschriebenen System Daten ausgetauscht haben und damit Subsysteme, Parallelsysteme oder \xfcbergeordnete Systeme sind. Hier werden die Bezeichnungen der Systeme und die Art der Verwandtschaft eingetragen.Brief description of the information system from which the data (FILES) submitted come. The description provides information on the purpose (including an indication of the legal bases), architecture and development of the system as well as relevant additions and changes. Information on data gathering and the organisational units that use the system in addition to the records creator can also be supplied here.Syst\xe8mes qui ont \xe9chang\xe9 des donn\xe9es avec le syst\xe8me d\xe9crit et qui sont ainsi des sous-syst\xe8mes, des syst\xe8mes parall\xe8les ou des syst\xe8mes sup\xe9rieurs. Ici sont report\xe9es les d\xe9signations des syst\xe8mes et leur relation.'
verwandteSysteme._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'verwandteSysteme', verwandteSysteme)
_module_typeBindings.verwandteSysteme = verwandteSysteme

# Atomic simple type: {http://bar.admin.ch/arelda/v4}archivierungsmodusLoeschvorschriften
class archivierungsmodusLoeschvorschriften (text4):

    """Angaben darüber, auf welche Weise die Daten aus dem System archiviert werden, allfällige Löschvorschriften, Angaben darüber, welche Funktionalitäten des Originalsystems nicht archiviert werden konnten, und vereinbartes Intervall der Ablieferungen sind hier zu nennen.Information about the way in which the data from the system are archived, any rules on deletion, information about which functionalities of the original system could not be archived, and the agreed interval for submissions are to be indicated here.Informations sur la manière dont sont archivées les données du système, sur les éventuelles directives d'effacement, sur la fonctionnalité du système original qui ne peut pas être archivée, et sur l'intervalle convenu de versement sont ici à indiquer."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 47, 2)
    _Documentation = "Angaben dar\xfcber, auf welche Weise die Daten aus dem System archiviert werden, allf\xe4llige L\xf6schvorschriften, Angaben dar\xfcber, welche Funktionalit\xe4ten des Originalsystems nicht archiviert werden konnten, und vereinbartes Intervall der Ablieferungen sind hier zu nennen.Information about the way in which the data from the system are archived, any rules on deletion, information about which functionalities of the original system could not be archived, and the agreed interval for submissions are to be indicated here.Informations sur la mani\xe8re dont sont archiv\xe9es les donn\xe9es du syst\xe8me, sur les \xe9ventuelles directives d'effacement, sur la fonctionnalit\xe9 du syst\xe8me original qui ne peut pas \xeatre archiv\xe9e, et sur l'intervalle convenu de versement sont ici \xe0 indiquer."
archivierungsmodusLoeschvorschriften._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'archivierungsmodusLoeschvorschriften', archivierungsmodusLoeschvorschriften)
_module_typeBindings.archivierungsmodusLoeschvorschriften = archivierungsmodusLoeschvorschriften

# Atomic simple type: {http://bar.admin.ch/arelda/v4}registratur
class registratur (text2):

    """Name der Ablage, für welche das primäre Ordnungssystem verwendet wird und die einem Mandanten im System entspricht. Eine aktenbildende Stelle kann im Prinzip mehr als eine Registratur führen. Pro Registratur gibt es allerdings nur ein primäres Ordnungssystem.Name of the archive for which the primary classification system is used and that corresponds to a client in the system. In principle, a records-creating authority may maintain more than one registry. However, there is only one primary classification system for each registry.Nom de l’archivage pour lequel le système de classement primaire est utilisé et qui correspond à un mandant dans le système. Un service qui crée des dossiers peut, en principe, gérer plus qu’un enregistrement. Par enregistrement toutefois, il n’y a qu’un système de classement primaire."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'registratur')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 57, 2)
    _Documentation = 'Name der Ablage, f\xfcr welche das prim\xe4re Ordnungssystem verwendet wird und die einem Mandanten im System entspricht. Eine aktenbildende Stelle kann im Prinzip mehr als eine Registratur f\xfchren. Pro Registratur gibt es allerdings nur ein prim\xe4res Ordnungssystem.Name of the archive for which the primary classification system is used and that corresponds to a client in the system. In principle, a records-creating authority may maintain more than one registry. However, there is only one primary classification system for each registry.Nom de l\u2019archivage pour lequel le syst\xe8me de classement primaire est utilis\xe9 et qui correspond \xe0 un mandant dans le syst\xe8me. Un service qui cr\xe9e des dossiers peut, en principe, g\xe9rer plus qu\u2019un enregistrement. Par enregistrement toutefois, il n\u2019y a qu\u2019un syst\xe8me de classement primaire.'
registratur._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'registratur', registratur)
_module_typeBindings.registratur = registratur

# Atomic simple type: {http://bar.admin.ch/arelda/v4}geschichteAktenbildner
class geschichteAktenbildner (text4):

    """Allgemeiner Überblick über die Geschichte des Aktenbildners und Angaben über Vorgänger und Nachfolgerorganisationen.General overview of the history of the records creator and information about predecessor and successor organisations.Aperçu général sur l'histoire du service producteur de documents et indications sur les prédécesseurs et les organisations ayant pris la suite."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 67, 2)
    _Documentation = "Allgemeiner \xdcberblick \xfcber die Geschichte des Aktenbildners und Angaben \xfcber Vorg\xe4nger und Nachfolgerorganisationen.General overview of the history of the records creator and information about predecessor and successor organisations.Aper\xe7u g\xe9n\xe9ral sur l'histoire du service producteur de documents et indications sur les pr\xe9d\xe9cesseurs et les organisations ayant pris la suite."
geschichteAktenbildner._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'geschichteAktenbildner', geschichteAktenbildner)
_module_typeBindings.geschichteAktenbildner = geschichteAktenbildner

# Atomic simple type: {http://bar.admin.ch/arelda/v4}bemerkungProvenienz
class bemerkungProvenienz (text4):

    """Zusätzliche Informationen, die den Aktenbildner und die Herkunft der Unterlagen oder der Datensammlung betreffen.Additional information relating to the records creator and the origin of the documents or the data collection.Informations complémentaires, qui concernent le producteur de dossiers et la provenance des documents ou de la collection de données."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bemerkungProvenienz')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/provenienz.xsd', 77, 2)
    _Documentation = 'Zus\xe4tzliche Informationen, die den Aktenbildner und die Herkunft der Unterlagen oder der Datensammlung betreffen.Additional information relating to the records creator and the origin of the documents or the data collection.Informations compl\xe9mentaires, qui concernent le producteur de dossiers et la provenance des documents ou de la collection de donn\xe9es.'
bemerkungProvenienz._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'bemerkungProvenienz', bemerkungProvenienz)
_module_typeBindings.bemerkungProvenienz = bemerkungProvenienz

# Complex type {http://bar.admin.ch/arelda/v4}archivischerVorgang with content type ELEMENT_ONLY
class archivischerVorgang (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}archivischerVorgang with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 79, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}vorgangstyp uses Python identifier vorgangstyp
    __vorgangstyp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vorgangstyp'), 'vorgangstyp', '__httpbar_admin_chareldav4_archivischerVorgang_httpbar_admin_chareldav4vorgangstyp', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 81, 6), )


    vorgangstyp = property(__vorgangstyp.value, __vorgangstyp.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}beschreibung uses Python identifier beschreibung
    __beschreibung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'beschreibung'), 'beschreibung', '__httpbar_admin_chareldav4_archivischerVorgang_httpbar_admin_chareldav4beschreibung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 82, 6), )


    beschreibung = property(__beschreibung.value, __beschreibung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datum uses Python identifier datum
    __datum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datum'), 'datum', '__httpbar_admin_chareldav4_archivischerVorgang_httpbar_admin_chareldav4datum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 83, 6), )


    datum = property(__datum.value, __datum.set, None, "Zeitpunkt, zu welchem der archivische Vorgang durchgef\xfchrt wurde.Time point at which the archival process was carried out.Moment o\xf9 l'activit\xe9 archivistique a \xe9t\xe9 effectu\xe9e.")


    # Element {http://bar.admin.ch/arelda/v4}bearbeiter uses Python identifier bearbeiter
    __bearbeiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter'), 'bearbeiter', '__httpbar_admin_chareldav4_archivischerVorgang_httpbar_admin_chareldav4bearbeiter', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 91, 6), )


    bearbeiter = property(__bearbeiter.value, __bearbeiter.set, None, None)

    _ElementMap.update({
        __vorgangstyp.name() : __vorgangstyp,
        __beschreibung.name() : __beschreibung,
        __datum.name() : __datum,
        __bearbeiter.name() : __bearbeiter
    })
    _AttributeMap.update({

    })
_module_typeBindings.archivischerVorgang = archivischerVorgang
Namespace.addCategoryObject('typeBinding', 'archivischerVorgang', archivischerVorgang)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferung with content type ELEMENT_ONLY
class ablieferung (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferung with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferung')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 95, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}ablieferungstyp uses Python identifier ablieferungstyp
    __ablieferungstyp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp'), 'ablieferungstyp', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4ablieferungstyp', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6), )


    ablieferungstyp = property(__ablieferungstyp.value, __ablieferungstyp.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ablieferndeStelle uses Python identifier ablieferndeStelle
    __ablieferndeStelle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle'), 'ablieferndeStelle', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4ablieferndeStelle', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6), )


    ablieferndeStelle = property(__ablieferndeStelle.value, __ablieferndeStelle.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}entstehungszeitraum uses Python identifier entstehungszeitraum
    __entstehungszeitraum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), 'entstehungszeitraum', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4entstehungszeitraum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6), )


    entstehungszeitraum = property(__entstehungszeitraum.value, __entstehungszeitraum.set, None, 'Der Entstehungszeitraum der Ablieferung wird aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten Datum der Dokumente oder Dateien ermittelt, die der Ablieferung zugeordneten  sind. Der Zeitraum kann auch gesch\xe4tzt sein.The creation period of the submission is calculated from the earliest creation date and the most recent date of the documents or files allocated to the submission. The period may also be estimated.La p\xe9riode de cr\xe9ation du versement est d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date la plus r\xe9cente des documents ou des fichiers , qui sont attribu\xe9s au versement. La p\xe9riode peut aussi \xeatre estim\xe9e')


    # Element {http://bar.admin.ch/arelda/v4}ablieferungsteile uses Python identifier ablieferungsteile
    __ablieferungsteile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile'), 'ablieferungsteile', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4ablieferungsteile', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6), )


    ablieferungsteile = property(__ablieferungsteile.value, __ablieferungsteile.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}unstrukturierterAnhang uses Python identifier unstrukturierterAnhang
    __unstrukturierterAnhang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang'), 'unstrukturierterAnhang', '__httpbar_admin_chareldav4_ablieferung_httpbar_admin_chareldav4unstrukturierterAnhang', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6), )


    unstrukturierterAnhang = property(__unstrukturierterAnhang.value, __unstrukturierterAnhang.set, None, None)

    _ElementMap.update({
        __ablieferungstyp.name() : __ablieferungstyp,
        __ablieferndeStelle.name() : __ablieferndeStelle,
        __entstehungszeitraum.name() : __entstehungszeitraum,
        __ablieferungsteile.name() : __ablieferungsteile,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten,
        __unstrukturierterAnhang.name() : __unstrukturierterAnhang
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferung = ablieferung
Namespace.addCategoryObject('typeBinding', 'ablieferung', ablieferung)


# Complex type {http://bar.admin.ch/arelda/v4}provenienz with content type ELEMENT_ONLY
class provenienz (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienz with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienz')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 233, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}aktenbildnerName uses Python identifier aktenbildnerName
    __aktenbildnerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName'), 'aktenbildnerName', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4aktenbildnerName', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6), )


    aktenbildnerName = property(__aktenbildnerName.value, __aktenbildnerName.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}systemName uses Python identifier systemName
    __systemName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'systemName'), 'systemName', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4systemName', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6), )


    systemName = property(__systemName.value, __systemName.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}systemBeschreibung uses Python identifier systemBeschreibung
    __systemBeschreibung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung'), 'systemBeschreibung', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4systemBeschreibung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6), )


    systemBeschreibung = property(__systemBeschreibung.value, __systemBeschreibung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}existenzzeitraum uses Python identifier existenzzeitraum
    __existenzzeitraum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum'), 'existenzzeitraum', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4existenzzeitraum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6), )


    existenzzeitraum = property(__existenzzeitraum.value, __existenzzeitraum.set, None, "Zeitraum der Existenz des Aktenbildners.Period of existence of the records creator.P\xe9riode d'existence du producteur de dossiers.")


    # Element {http://bar.admin.ch/arelda/v4}geschichteAktenbildner uses Python identifier geschichteAktenbildner
    __geschichteAktenbildner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner'), 'geschichteAktenbildner', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4geschichteAktenbildner', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6), )


    geschichteAktenbildner = property(__geschichteAktenbildner.value, __geschichteAktenbildner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_provenienz_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)

    _ElementMap.update({
        __aktenbildnerName.name() : __aktenbildnerName,
        __systemName.name() : __systemName,
        __systemBeschreibung.name() : __systemBeschreibung,
        __existenzzeitraum.name() : __existenzzeitraum,
        __geschichteAktenbildner.name() : __geschichteAktenbildner,
        __bemerkung.name() : __bemerkung
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienz = provenienz
Namespace.addCategoryObject('typeBinding', 'provenienz', provenienz)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystem with content type ELEMENT_ONLY
class ordnungssystem (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 329, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}generation uses Python identifier generation
    __generation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generation'), 'generation', '__httpbar_admin_chareldav4_ordnungssystem_httpbar_admin_chareldav4generation', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6), )


    generation = property(__generation.value, __generation.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}anwendungszeitraum uses Python identifier anwendungszeitraum
    __anwendungszeitraum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum'), 'anwendungszeitraum', '__httpbar_admin_chareldav4_ordnungssystem_httpbar_admin_chareldav4anwendungszeitraum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6), )


    anwendungszeitraum = property(__anwendungszeitraum.value, __anwendungszeitraum.set, None, 'Zeitraum, seit/w\xe4hrend dem das Ordnungssystem bei der aktenbildenden Stelle eingesetzt wird/wurde.Period since/during which the classification system has been / was used by the records-creating authority.P\xe9riode depuis/pendant laquelle le syst\xe8me de classement a \xe9t\xe9/est employ\xe9 chez le service producteur de dossiers.')


    # Element {http://bar.admin.ch/arelda/v4}mitbenutzung uses Python identifier mitbenutzung
    __mitbenutzung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung'), 'mitbenutzung', '__httpbar_admin_chareldav4_ordnungssystem_httpbar_admin_chareldav4mitbenutzung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6), )


    mitbenutzung = property(__mitbenutzung.value, __mitbenutzung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_ordnungssystem_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_ordnungssystem_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)

    _ElementMap.update({
        __generation.name() : __generation,
        __anwendungszeitraum.name() : __anwendungszeitraum,
        __mitbenutzung.name() : __mitbenutzung,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystem = ordnungssystem
Namespace.addCategoryObject('typeBinding', 'ordnungssystem', ordnungssystem)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemposition with content type ELEMENT_ONLY
class ordnungssystemposition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemposition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 430, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit uses Python identifier federfuehrendeOrganisationseinheit
    __federfuehrendeOrganisationseinheit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit'), 'federfuehrendeOrganisationseinheit', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4federfuehrendeOrganisationseinheit', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6), )


    federfuehrendeOrganisationseinheit = property(__federfuehrendeOrganisationseinheit.value, __federfuehrendeOrganisationseinheit.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}klassifizierungskategorie uses Python identifier klassifizierungskategorie
    __klassifizierungskategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), 'klassifizierungskategorie', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4klassifizierungskategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6), )


    klassifizierungskategorie = property(__klassifizierungskategorie.value, __klassifizierungskategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datenschutz uses Python identifier datenschutz
    __datenschutz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), 'datenschutz', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4datenschutz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6), )


    datenschutz = property(__datenschutz.value, __datenschutz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus uses Python identifier oeffentlichkeitsstatus
    __oeffentlichkeitsstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), 'oeffentlichkeitsstatus', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4oeffentlichkeitsstatus', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6), )


    oeffentlichkeitsstatus = property(__oeffentlichkeitsstatus.value, __oeffentlichkeitsstatus.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung uses Python identifier oeffentlichkeitsstatusBegruendung
    __oeffentlichkeitsstatusBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), 'oeffentlichkeitsstatusBegruendung', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4oeffentlichkeitsstatusBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6), )


    oeffentlichkeitsstatusBegruendung = property(__oeffentlichkeitsstatusBegruendung.value, __oeffentlichkeitsstatusBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}sonstigeBestimmungen uses Python identifier sonstigeBestimmungen
    __sonstigeBestimmungen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), 'sonstigeBestimmungen', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4sonstigeBestimmungen', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6), )


    sonstigeBestimmungen = property(__sonstigeBestimmungen.value, __sonstigeBestimmungen.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_ordnungssystemposition_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)

    _ElementMap.update({
        __federfuehrendeOrganisationseinheit.name() : __federfuehrendeOrganisationseinheit,
        __klassifizierungskategorie.name() : __klassifizierungskategorie,
        __datenschutz.name() : __datenschutz,
        __oeffentlichkeitsstatus.name() : __oeffentlichkeitsstatus,
        __oeffentlichkeitsstatusBegruendung.name() : __oeffentlichkeitsstatusBegruendung,
        __sonstigeBestimmungen.name() : __sonstigeBestimmungen,
        __zusatzDaten.name() : __zusatzDaten
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemposition = ordnungssystemposition
Namespace.addCategoryObject('typeBinding', 'ordnungssystemposition', ordnungssystemposition)


# Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnis with content type EMPTY
class inhaltsverzeichnis (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnis with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 948, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.inhaltsverzeichnis = inhaltsverzeichnis
Namespace.addCategoryObject('typeBinding', 'inhaltsverzeichnis', inhaltsverzeichnis)


# Complex type {http://bar.admin.ch/arelda/v4}ordner with content type ELEMENT_ONLY
class ordner (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}ordner with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordner')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1031, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpbar_admin_chareldav4_ordner_httpbar_admin_chareldav4name', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}originalName uses Python identifier originalName
    __originalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalName'), 'originalName', '__httpbar_admin_chareldav4_ordner_httpbar_admin_chareldav4originalName', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6), )


    originalName = property(__originalName.value, __originalName.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __originalName.name() : __originalName
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordner = ordner
Namespace.addCategoryObject('typeBinding', 'ordner', ordner)


# Complex type {http://bar.admin.ch/arelda/v4}unstrukturierterAnhang with content type ELEMENT_ONLY
class unstrukturierterAnhang (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}unstrukturierterAnhang with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1071, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}dateiRef uses Python identifier dateiRef
    __dateiRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), 'dateiRef', '__httpbar_admin_chareldav4_unstrukturierterAnhang_httpbar_admin_chareldav4dateiRef', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1079, 6), )


    dateiRef = property(__dateiRef.value, __dateiRef.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dateiBeschreibung uses Python identifier dateiBeschreibung
    __dateiBeschreibung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiBeschreibung'), 'dateiBeschreibung', '__httpbar_admin_chareldav4_unstrukturierterAnhang_httpbar_admin_chareldav4dateiBeschreibung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1080, 6), )


    dateiBeschreibung = property(__dateiBeschreibung.value, __dateiBeschreibung.set, None, 'Zus\xe4tzliche unstrukturierte Informationen, welche der Ablieferung fakultativ mitgegeben werden k\xf6nnen.Additional unstructured information that may optionally be included with the submission.Informations non structur\xe9es compl\xe9mentaires facultatives qui peuvent accompagner le versement.')

    _ElementMap.update({
        __dateiRef.name() : __dateiRef,
        __dateiBeschreibung.name() : __dateiBeschreibung
    })
    _AttributeMap.update({

    })
_module_typeBindings.unstrukturierterAnhang = unstrukturierterAnhang
Namespace.addCategoryObject('typeBinding', 'unstrukturierterAnhang', unstrukturierterAnhang)


# Complex type {http://bar.admin.ch/arelda/v4}comparable with content type EMPTY
class comparable (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}comparable with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'comparable')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 6, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.comparable = comparable
Namespace.addCategoryObject('typeBinding', 'comparable', comparable)


# Complex type {http://bar.admin.ch/arelda/v4}historischerZeitpunkt with content type ELEMENT_ONLY
class historischerZeitpunkt (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}historischerZeitpunkt with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'historischerZeitpunkt')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 7, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}ca uses Python identifier ca
    __ca = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ca'), 'ca', '__httpbar_admin_chareldav4_historischerZeitpunkt_httpbar_admin_chareldav4ca', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 9, 6), )


    ca = property(__ca.value, __ca.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datum uses Python identifier datum
    __datum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datum'), 'datum', '__httpbar_admin_chareldav4_historischerZeitpunkt_httpbar_admin_chareldav4datum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 10, 6), )


    datum = property(__datum.value, __datum.set, None, None)

    _ElementMap.update({
        __ca.name() : __ca,
        __datum.name() : __datum
    })
    _AttributeMap.update({

    })
_module_typeBindings.historischerZeitpunkt = historischerZeitpunkt
Namespace.addCategoryObject('typeBinding', 'historischerZeitpunkt', historischerZeitpunkt)


# Complex type {http://bar.admin.ch/arelda/v4}historischerZeitraum with content type ELEMENT_ONLY
class historischerZeitraum (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}historischerZeitraum with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'historischerZeitraum')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 14, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}von uses Python identifier von
    __von = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'von'), 'von', '__httpbar_admin_chareldav4_historischerZeitraum_httpbar_admin_chareldav4von', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 16, 6), )


    von = property(__von.value, __von.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bis uses Python identifier bis
    __bis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bis'), 'bis', '__httpbar_admin_chareldav4_historischerZeitraum_httpbar_admin_chareldav4bis', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 17, 6), )


    bis = property(__bis.value, __bis.set, None, None)

    _ElementMap.update({
        __von.name() : __von,
        __bis.name() : __bis
    })
    _AttributeMap.update({

    })
_module_typeBindings.historischerZeitraum = historischerZeitraum
Namespace.addCategoryObject('typeBinding', 'historischerZeitraum', historischerZeitraum)


# Complex type {http://bar.admin.ch/arelda/v4}zeitraum with content type ELEMENT_ONLY
class zeitraum (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}zeitraum with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'zeitraum')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 67, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}von uses Python identifier von
    __von = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'von'), 'von', '__httpbar_admin_chareldav4_zeitraum_httpbar_admin_chareldav4von', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 69, 6), )


    von = property(__von.value, __von.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bis uses Python identifier bis
    __bis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bis'), 'bis', '__httpbar_admin_chareldav4_zeitraum_httpbar_admin_chareldav4bis', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 70, 6), )


    bis = property(__bis.value, __bis.set, None, None)

    _ElementMap.update({
        __von.name() : __von,
        __bis.name() : __bis
    })
    _AttributeMap.update({

    })
_module_typeBindings.zeitraum = zeitraum
Namespace.addCategoryObject('typeBinding', 'zeitraum', zeitraum)


# Complex type {http://bar.admin.ch/arelda/v4}zusatzDaten with content type ELEMENT_ONLY
class zusatzDaten (pyxb.binding.basis.complexTypeDefinition):
    """Merkmal - Werte Gruppen erlaubt das festhalten weiterer Metadaten in tabellarisch strukturierter FormKey-value pairs allow further metadata to be recorded in structured table formLe groupe caractéristique-valeur admet d'autres métadonnées sous la forme d'un tableau structuré."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 7, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}merkmal uses Python identifier merkmal
    __merkmal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'merkmal'), 'merkmal', '__httpbar_admin_chareldav4_zusatzDaten_httpbar_admin_chareldav4merkmal', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 15, 6), )


    merkmal = property(__merkmal.value, __merkmal.set, None, None)

    _ElementMap.update({
        __merkmal.name() : __merkmal
    })
    _AttributeMap.update({

    })
_module_typeBindings.zusatzDaten = zusatzDaten
Namespace.addCategoryObject('typeBinding', 'zusatzDaten', zusatzDaten)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungSIP with content type ELEMENT_ONLY
class ablieferungSIP (ablieferung):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 125, 2)
    _ElementMap = ablieferung._ElementMap.copy()
    _AttributeMap = ablieferung._AttributeMap.copy()
    # Base type is ablieferung

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element {http://bar.admin.ch/arelda/v4}ablieferungsnummer uses Python identifier ablieferungsnummer
    __ablieferungsnummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), 'ablieferungsnummer', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4ablieferungsnummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10), )


    ablieferungsnummer = property(__ablieferungsnummer.value, __ablieferungsnummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}angebotsnummer uses Python identifier angebotsnummer
    __angebotsnummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer'), 'angebotsnummer', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4angebotsnummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10), )


    angebotsnummer = property(__angebotsnummer.value, __angebotsnummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid uses Python identifier referenzBewertungsentscheid
    __referenzBewertungsentscheid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid'), 'referenzBewertungsentscheid', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4referenzBewertungsentscheid', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10), )


    referenzBewertungsentscheid = property(__referenzBewertungsentscheid.value, __referenzBewertungsentscheid.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular uses Python identifier referenzSchutzfristenFormular
    __referenzSchutzfristenFormular = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular'), 'referenzSchutzfristenFormular', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4referenzSchutzfristenFormular', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10), )


    referenzSchutzfristenFormular = property(__referenzSchutzfristenFormular.value, __referenzSchutzfristenFormular.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ablieferungSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ablieferungsnummer.name() : __ablieferungsnummer,
        __angebotsnummer.name() : __angebotsnummer,
        __referenzBewertungsentscheid.name() : __referenzBewertungsentscheid,
        __referenzSchutzfristenFormular.name() : __referenzSchutzfristenFormular,
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungSIP = ablieferungSIP
Namespace.addCategoryObject('typeBinding', 'ablieferungSIP', ablieferungSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungAIP with content type ELEMENT_ONLY
class ablieferungAIP (ablieferung):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 163, 2)
    _ElementMap = ablieferung._ElementMap.copy()
    _AttributeMap = ablieferung._AttributeMap.copy()
    # Base type is ablieferung

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element {http://bar.admin.ch/arelda/v4}ablieferungsnummer uses Python identifier ablieferungsnummer
    __ablieferungsnummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), 'ablieferungsnummer', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4ablieferungsnummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 167, 10), )


    ablieferungsnummer = property(__ablieferungsnummer.value, __ablieferungsnummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}angebotsnummer uses Python identifier angebotsnummer
    __angebotsnummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer'), 'angebotsnummer', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4angebotsnummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10), )


    angebotsnummer = property(__angebotsnummer.value, __angebotsnummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid uses Python identifier referenzBewertungsentscheid
    __referenzBewertungsentscheid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid'), 'referenzBewertungsentscheid', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4referenzBewertungsentscheid', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10), )


    referenzBewertungsentscheid = property(__referenzBewertungsentscheid.value, __referenzBewertungsentscheid.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular uses Python identifier referenzSchutzfristenFormular
    __referenzSchutzfristenFormular = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular'), 'referenzSchutzfristenFormular', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4referenzSchutzfristenFormular', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10), )


    referenzSchutzfristenFormular = property(__referenzSchutzfristenFormular.value, __referenzSchutzfristenFormular.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ablieferungAIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)

    _ElementMap.update({
        __ablieferungsnummer.name() : __ablieferungsnummer,
        __angebotsnummer.name() : __angebotsnummer,
        __referenzBewertungsentscheid.name() : __referenzBewertungsentscheid,
        __referenzSchutzfristenFormular.name() : __referenzSchutzfristenFormular,
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungAIP = ablieferungAIP
Namespace.addCategoryObject('typeBinding', 'ablieferungAIP', ablieferungAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungDIP with content type ELEMENT_ONLY
class ablieferungDIP (ablieferung):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 200, 2)
    _ElementMap = ablieferung._ElementMap.copy()
    _AttributeMap = ablieferung._AttributeMap.copy()
    # Base type is ablieferung

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element {http://bar.admin.ch/arelda/v4}ablieferungsnummer uses Python identifier ablieferungsnummer
    __ablieferungsnummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), 'ablieferungsnummer', '__httpbar_admin_chareldav4_ablieferungDIP_httpbar_admin_chareldav4ablieferungsnummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 204, 10), )


    ablieferungsnummer = property(__ablieferungsnummer.value, __ablieferungsnummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ablieferungDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ablieferungsnummer.name() : __ablieferungsnummer,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungDIP = ablieferungDIP
Namespace.addCategoryObject('typeBinding', 'ablieferungDIP', ablieferungDIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzGever with content type ELEMENT_ONLY
class provenienzGever (provenienz):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzGever with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzGever')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 251, 2)
    _ElementMap = provenienz._ElementMap.copy()
    _AttributeMap = provenienz._AttributeMap.copy()
    # Base type is provenienz

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element {http://bar.admin.ch/arelda/v4}registratur uses Python identifier registratur
    __registratur = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registratur'), 'registratur', '__httpbar_admin_chareldav4_provenienzGever_httpbar_admin_chareldav4registratur', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10), )


    registratur = property(__registratur.value, __registratur.set, None, None)

    _ElementMap.update({
        __registratur.name() : __registratur
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzGever = provenienzGever
Namespace.addCategoryObject('typeBinding', 'provenienzGever', provenienzGever)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzFiles with content type ELEMENT_ONLY
class provenienzFiles (provenienz):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzFiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzFiles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 289, 2)
    _ElementMap = provenienz._ElementMap.copy()
    _AttributeMap = provenienz._AttributeMap.copy()
    # Base type is provenienz

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element {http://bar.admin.ch/arelda/v4}registratur uses Python identifier registratur
    __registratur = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registratur'), 'registratur', '__httpbar_admin_chareldav4_provenienzFiles_httpbar_admin_chareldav4registratur', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10), )


    registratur = property(__registratur.value, __registratur.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}verwandteSysteme uses Python identifier verwandteSysteme
    __verwandteSysteme = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme'), 'verwandteSysteme', '__httpbar_admin_chareldav4_provenienzFiles_httpbar_admin_chareldav4verwandteSysteme', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10), )


    verwandteSysteme = property(__verwandteSysteme.value, __verwandteSysteme.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivierungsmodusLoeschvorschriften uses Python identifier archivierungsmodusLoeschvorschriften
    __archivierungsmodusLoeschvorschriften = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften'), 'archivierungsmodusLoeschvorschriften', '__httpbar_admin_chareldav4_provenienzFiles_httpbar_admin_chareldav4archivierungsmodusLoeschvorschriften', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10), )


    archivierungsmodusLoeschvorschriften = property(__archivierungsmodusLoeschvorschriften.value, __archivierungsmodusLoeschvorschriften.set, None, None)

    _ElementMap.update({
        __registratur.name() : __registratur,
        __verwandteSysteme.name() : __verwandteSysteme,
        __archivierungsmodusLoeschvorschriften.name() : __archivierungsmodusLoeschvorschriften
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzFiles = provenienzFiles
Namespace.addCategoryObject('typeBinding', 'provenienzFiles', provenienzFiles)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGever with content type ELEMENT_ONLY
class ordnungssystemGever (ordnungssystem):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGever with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemGever')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 346, 2)
    _ElementMap = ordnungssystem._ElementMap.copy()
    _AttributeMap = ordnungssystem._AttributeMap.copy()
    # Base type is ordnungssystem

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element {http://bar.admin.ch/arelda/v4}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpbar_admin_chareldav4_ordnungssystemGever_httpbar_admin_chareldav4name', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10), )


    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemGever = ordnungssystemGever
Namespace.addCategoryObject('typeBinding', 'ordnungssystemGever', ordnungssystemGever)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFiles with content type ELEMENT_ONLY
class ordnungssystemFiles (ordnungssystem):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemFiles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 388, 2)
    _ElementMap = ordnungssystem._ElementMap.copy()
    _AttributeMap = ordnungssystem._AttributeMap.copy()
    # Base type is ordnungssystem

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element {http://bar.admin.ch/arelda/v4}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpbar_admin_chareldav4_ordnungssystemFiles_httpbar_admin_chareldav4name', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10), )


    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemFiles = ordnungssystemFiles
Namespace.addCategoryObject('typeBinding', 'ordnungssystemFiles', ordnungssystemFiles)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever with content type ELEMENT_ONLY
class ordnungssystempositionGever (ordnungssystemposition):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionGever')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 442, 2)
    _ElementMap = ordnungssystemposition._ElementMap.copy()
    _AttributeMap = ordnungssystemposition._AttributeMap.copy()
    # Base type is ordnungssystemposition

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element {http://bar.admin.ch/arelda/v4}nummer uses Python identifier nummer
    __nummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nummer'), 'nummer', '__httpbar_admin_chareldav4_ordnungssystempositionGever_httpbar_admin_chareldav4nummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10), )


    nummer = property(__nummer.value, __nummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}titel uses Python identifier titel
    __titel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'titel'), 'titel', '__httpbar_admin_chareldav4_ordnungssystempositionGever_httpbar_admin_chareldav4titel', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10), )


    titel = property(__titel.value, __titel.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_ordnungssystempositionGever_id', _module_typeBindings.idOrdnungssystemposition, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 449, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 449, 8)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __nummer.name() : __nummer,
        __titel.name() : __titel
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.ordnungssystempositionGever = ordnungssystempositionGever
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionGever', ordnungssystempositionGever)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles with content type ELEMENT_ONLY
class ordnungssystempositionFiles (ordnungssystemposition):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionFiles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 495, 2)
    _ElementMap = ordnungssystemposition._ElementMap.copy()
    _AttributeMap = ordnungssystemposition._AttributeMap.copy()
    # Base type is ordnungssystemposition

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element {http://bar.admin.ch/arelda/v4}nummer uses Python identifier nummer
    __nummer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nummer'), 'nummer', '__httpbar_admin_chareldav4_ordnungssystempositionFiles_httpbar_admin_chareldav4nummer', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10), )


    nummer = property(__nummer.value, __nummer.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}titel uses Python identifier titel
    __titel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'titel'), 'titel', '__httpbar_admin_chareldav4_ordnungssystempositionFiles_httpbar_admin_chareldav4titel', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10), )


    titel = property(__titel.value, __titel.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_ordnungssystempositionFiles_id', _module_typeBindings.idOrdnungssystemposition)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 502, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 502, 8)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __nummer.name() : __nummer,
        __titel.name() : __titel
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.ordnungssystempositionFiles = ordnungssystempositionFiles
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionFiles', ordnungssystempositionFiles)


# Complex type {http://bar.admin.ch/arelda/v4}dossier with content type ELEMENT_ONLY
class dossier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}dossier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 581, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}zusatzmerkmal uses Python identifier zusatzmerkmal
    __zusatzmerkmal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal'), 'zusatzmerkmal', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4zusatzmerkmal', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6), )


    zusatzmerkmal = property(__zusatzmerkmal.value, __zusatzmerkmal.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}titel uses Python identifier titel
    __titel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'titel'), 'titel', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4titel', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6), )


    titel = property(__titel.value, __titel.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}inhalt uses Python identifier inhalt
    __inhalt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inhalt'), 'inhalt', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4inhalt', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6), )


    inhalt = property(__inhalt.value, __inhalt.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}formInhalt uses Python identifier formInhalt
    __formInhalt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formInhalt'), 'formInhalt', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4formInhalt', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6), )


    formInhalt = property(__formInhalt.value, __formInhalt.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}erscheinungsform uses Python identifier erscheinungsform
    __erscheinungsform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform'), 'erscheinungsform', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4erscheinungsform', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6), )


    erscheinungsform = property(__erscheinungsform.value, __erscheinungsform.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit uses Python identifier federfuehrendeOrganisationseinheit
    __federfuehrendeOrganisationseinheit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit'), 'federfuehrendeOrganisationseinheit', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4federfuehrendeOrganisationseinheit', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6), )


    federfuehrendeOrganisationseinheit = property(__federfuehrendeOrganisationseinheit.value, __federfuehrendeOrganisationseinheit.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}entstehungszeitraum uses Python identifier entstehungszeitraum
    __entstehungszeitraum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), 'entstehungszeitraum', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4entstehungszeitraum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6), )


    entstehungszeitraum = property(__entstehungszeitraum.value, __entstehungszeitraum.set, None, 'Der Entstehungszeitraum des Dossiers wird aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten (\xc4nderungs)datum aller dem Dossier zugeordneten Dokumente oder Dateien ermittelt. Der Zeitraum kann auch gesch\xe4tzt sein.The creation period of the dossier is calculated from the earliest creation date and the most recent (change) date of all the documents or files allocated to the dossier. The period may also be estimated.La p\xe9riode de cr\xe9ation du dossier est d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date (de modification) la plus r\xe9cente de tous les documents ou fichiers attribu\xe9s au dossier. La p\xe9riode peut aussi \xeatre estim\xe9e.')


    # Element {http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung uses Python identifier entstehungszeitraumAnmerkung
    __entstehungszeitraumAnmerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung'), 'entstehungszeitraumAnmerkung', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4entstehungszeitraumAnmerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6), )


    entstehungszeitraumAnmerkung = property(__entstehungszeitraumAnmerkung.value, __entstehungszeitraumAnmerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}klassifizierungskategorie uses Python identifier klassifizierungskategorie
    __klassifizierungskategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), 'klassifizierungskategorie', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4klassifizierungskategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6), )


    klassifizierungskategorie = property(__klassifizierungskategorie.value, __klassifizierungskategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datenschutz uses Python identifier datenschutz
    __datenschutz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), 'datenschutz', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4datenschutz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6), )


    datenschutz = property(__datenschutz.value, __datenschutz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus uses Python identifier oeffentlichkeitsstatus
    __oeffentlichkeitsstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), 'oeffentlichkeitsstatus', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4oeffentlichkeitsstatus', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6), )


    oeffentlichkeitsstatus = property(__oeffentlichkeitsstatus.value, __oeffentlichkeitsstatus.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung uses Python identifier oeffentlichkeitsstatusBegruendung
    __oeffentlichkeitsstatusBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), 'oeffentlichkeitsstatusBegruendung', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4oeffentlichkeitsstatusBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6), )


    oeffentlichkeitsstatusBegruendung = property(__oeffentlichkeitsstatusBegruendung.value, __oeffentlichkeitsstatusBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}sonstigeBestimmungen uses Python identifier sonstigeBestimmungen
    __sonstigeBestimmungen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), 'sonstigeBestimmungen', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4sonstigeBestimmungen', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6), )


    sonstigeBestimmungen = property(__sonstigeBestimmungen.value, __sonstigeBestimmungen.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_dossier_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_dossier_id', _module_typeBindings.idDossier, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 606, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 606, 4)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __zusatzmerkmal.name() : __zusatzmerkmal,
        __titel.name() : __titel,
        __inhalt.name() : __inhalt,
        __formInhalt.name() : __formInhalt,
        __erscheinungsform.name() : __erscheinungsform,
        __federfuehrendeOrganisationseinheit.name() : __federfuehrendeOrganisationseinheit,
        __entstehungszeitraum.name() : __entstehungszeitraum,
        __entstehungszeitraumAnmerkung.name() : __entstehungszeitraumAnmerkung,
        __klassifizierungskategorie.name() : __klassifizierungskategorie,
        __datenschutz.name() : __datenschutz,
        __oeffentlichkeitsstatus.name() : __oeffentlichkeitsstatus,
        __oeffentlichkeitsstatusBegruendung.name() : __oeffentlichkeitsstatusBegruendung,
        __sonstigeBestimmungen.name() : __sonstigeBestimmungen,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.dossier = dossier
Namespace.addCategoryObject('typeBinding', 'dossier', dossier)


# Complex type {http://bar.admin.ch/arelda/v4}vorgangAktivitaet with content type MIXED
class vorgangAktivitaet (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}vorgangAktivitaet with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'vorgangAktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 806, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}titel uses Python identifier titel
    __titel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'titel'), 'titel', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4titel', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 808, 6), )


    titel = property(__titel.value, __titel.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}arbeitsanweisung uses Python identifier arbeitsanweisung
    __arbeitsanweisung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'arbeitsanweisung'), 'arbeitsanweisung', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4arbeitsanweisung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 809, 6), )


    arbeitsanweisung = property(__arbeitsanweisung.value, __arbeitsanweisung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}federfuehrung uses Python identifier federfuehrung
    __federfuehrung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'federfuehrung'), 'federfuehrung', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4federfuehrung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 810, 6), )


    federfuehrung = property(__federfuehrung.value, __federfuehrung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}verweis uses Python identifier verweis
    __verweis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verweis'), 'verweis', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4verweis', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 811, 6), )


    verweis = property(__verweis.value, __verweis.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 812, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 813, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}aktivitaet uses Python identifier aktivitaet
    __aktivitaet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aktivitaet'), 'aktivitaet', '__httpbar_admin_chareldav4_vorgangAktivitaet_httpbar_admin_chareldav4aktivitaet', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 814, 6), )


    aktivitaet = property(__aktivitaet.value, __aktivitaet.set, None, None)


    # Attribute order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpbar_admin_chareldav4_vorgangAktivitaet_order', _module_typeBindings.orderVorgang)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 816, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 816, 4)

    order = property(__order.value, __order.set, None, None)

    _ElementMap.update({
        __titel.name() : __titel,
        __arbeitsanweisung.name() : __arbeitsanweisung,
        __federfuehrung.name() : __federfuehrung,
        __verweis.name() : __verweis,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten,
        __aktivitaet.name() : __aktivitaet
    })
    _AttributeMap.update({
        __order.name() : __order
    })
_module_typeBindings.vorgangAktivitaet = vorgangAktivitaet
Namespace.addCategoryObject('typeBinding', 'vorgangAktivitaet', vorgangAktivitaet)


# Complex type {http://bar.admin.ch/arelda/v4}aktivitaet with content type ELEMENT_ONLY
class aktivitaet (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}aktivitaet with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'aktivitaet')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 819, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}vorschreibung uses Python identifier vorschreibung
    __vorschreibung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vorschreibung'), 'vorschreibung', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4vorschreibung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 822, 8), )


    vorschreibung = property(__vorschreibung.value, __vorschreibung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}anweisung uses Python identifier anweisung
    __anweisung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'anweisung'), 'anweisung', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4anweisung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 823, 8), )


    anweisung = property(__anweisung.value, __anweisung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bearbeiter uses Python identifier bearbeiter
    __bearbeiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter'), 'bearbeiter', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4bearbeiter', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 824, 8), )


    bearbeiter = property(__bearbeiter.value, __bearbeiter.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}abschlussdatum uses Python identifier abschlussdatum
    __abschlussdatum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum'), 'abschlussdatum', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4abschlussdatum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 825, 8), )


    abschlussdatum = property(__abschlussdatum.value, __abschlussdatum.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}verweis uses Python identifier verweis
    __verweis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verweis'), 'verweis', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4verweis', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 826, 8), )


    verweis = property(__verweis.value, __verweis.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4bemerkung', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 827, 8), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_aktivitaet_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 828, 8), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Attribute order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'order'), 'order', '__httpbar_admin_chareldav4_aktivitaet_order', _module_typeBindings.orderAktivitaet)
    __order._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 831, 4)
    __order._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 831, 4)

    order = property(__order.value, __order.set, None, None)

    _ElementMap.update({
        __vorschreibung.name() : __vorschreibung,
        __anweisung.name() : __anweisung,
        __bearbeiter.name() : __bearbeiter,
        __abschlussdatum.name() : __abschlussdatum,
        __verweis.name() : __verweis,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten
    })
    _AttributeMap.update({
        __order.name() : __order
    })
_module_typeBindings.aktivitaet = aktivitaet
Namespace.addCategoryObject('typeBinding', 'aktivitaet', aktivitaet)


# Complex type {http://bar.admin.ch/arelda/v4}dokument with content type ELEMENT_ONLY
class dokument (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}dokument with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokument')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 840, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}titel uses Python identifier titel
    __titel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'titel'), 'titel', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4titel', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6), )


    titel = property(__titel.value, __titel.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}autor uses Python identifier autor
    __autor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'autor'), 'autor', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4autor', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6), )


    autor = property(__autor.value, __autor.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}erscheinungsform uses Python identifier erscheinungsform
    __erscheinungsform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform'), 'erscheinungsform', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4erscheinungsform', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6), )


    erscheinungsform = property(__erscheinungsform.value, __erscheinungsform.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokumenttyp uses Python identifier dokumenttyp
    __dokumenttyp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp'), 'dokumenttyp', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4dokumenttyp', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6), )


    dokumenttyp = property(__dokumenttyp.value, __dokumenttyp.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}registrierdatum uses Python identifier registrierdatum
    __registrierdatum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum'), 'registrierdatum', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4registrierdatum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6), )


    registrierdatum = property(__registrierdatum.value, __registrierdatum.set, None, 'Zeitpunkt an welchem das Dokument im System einem Dossier zugeordnet worden ist.Time point at which a document was added to the dossier.Moment o\xf9 le document est attribu\xe9 \xe0 un dossier dans le syst\xe8me.')


    # Element {http://bar.admin.ch/arelda/v4}entstehungszeitraum uses Python identifier entstehungszeitraum
    __entstehungszeitraum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), 'entstehungszeitraum', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4entstehungszeitraum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6), )


    entstehungszeitraum = property(__entstehungszeitraum.value, __entstehungszeitraum.set, None, 'Zeitliche Angabe \xfcber die Entstehung des Dokuments. Als Entstehung des Dokuments kann das Datum seiner Erstellung angegeben werden, oder den Zeitraum, in dem das Dokument entstanden ist (aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten Datum des Dokuments ermittelt). Der Zeitraum kann auch gesch\xe4tzt sein.Period of the origin of the document. As creation time of the document the date of its creation can be specified, or the period in which the document was created (determined from the oldest creation date and the most recent date of the document) . The period can also be estimated.Indications temporelles sur la cr\xe9ation du document. Comme cr\xe9ation du document peut \xeatre indiqu\xe9e la date de son \xe9laboration ou la p\xe9riode durant laquelle le document a \xe9t\xe9 cr\xe9\xe9 (d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date du document le plus r\xe9cent). La p\xe9riode peut aussi \xeatre estim\xe9e.')


    # Element {http://bar.admin.ch/arelda/v4}klassifizierungskategorie uses Python identifier klassifizierungskategorie
    __klassifizierungskategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), 'klassifizierungskategorie', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4klassifizierungskategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6), )


    klassifizierungskategorie = property(__klassifizierungskategorie.value, __klassifizierungskategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datenschutz uses Python identifier datenschutz
    __datenschutz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), 'datenschutz', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4datenschutz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6), )


    datenschutz = property(__datenschutz.value, __datenschutz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus uses Python identifier oeffentlichkeitsstatus
    __oeffentlichkeitsstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), 'oeffentlichkeitsstatus', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4oeffentlichkeitsstatus', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6), )


    oeffentlichkeitsstatus = property(__oeffentlichkeitsstatus.value, __oeffentlichkeitsstatus.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung uses Python identifier oeffentlichkeitsstatusBegruendung
    __oeffentlichkeitsstatusBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), 'oeffentlichkeitsstatusBegruendung', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4oeffentlichkeitsstatusBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6), )


    oeffentlichkeitsstatusBegruendung = property(__oeffentlichkeitsstatusBegruendung.value, __oeffentlichkeitsstatusBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}sonstigeBestimmungen uses Python identifier sonstigeBestimmungen
    __sonstigeBestimmungen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), 'sonstigeBestimmungen', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4sonstigeBestimmungen', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6), )


    sonstigeBestimmungen = property(__sonstigeBestimmungen.value, __sonstigeBestimmungen.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}bemerkung uses Python identifier bemerkung
    __bemerkung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), 'bemerkung', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4bemerkung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6), )


    bemerkung = property(__bemerkung.value, __bemerkung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dateiRef uses Python identifier dateiRef
    __dateiRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), 'dateiRef', '__httpbar_admin_chareldav4_dokument_httpbar_admin_chareldav4dateiRef', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6), )


    dateiRef = property(__dateiRef.value, __dateiRef.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_dokument_id', _module_typeBindings.idDokument, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 871, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 871, 4)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __titel.name() : __titel,
        __autor.name() : __autor,
        __erscheinungsform.name() : __erscheinungsform,
        __dokumenttyp.name() : __dokumenttyp,
        __registrierdatum.name() : __registrierdatum,
        __entstehungszeitraum.name() : __entstehungszeitraum,
        __klassifizierungskategorie.name() : __klassifizierungskategorie,
        __datenschutz.name() : __datenschutz,
        __oeffentlichkeitsstatus.name() : __oeffentlichkeitsstatus,
        __oeffentlichkeitsstatusBegruendung.name() : __oeffentlichkeitsstatusBegruendung,
        __sonstigeBestimmungen.name() : __sonstigeBestimmungen,
        __bemerkung.name() : __bemerkung,
        __zusatzDaten.name() : __zusatzDaten,
        __dateiRef.name() : __dateiRef
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.dokument = dokument
Namespace.addCategoryObject('typeBinding', 'dokument', dokument)


# Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisSIP with content type ELEMENT_ONLY
class inhaltsverzeichnisSIP (inhaltsverzeichnis):
    """Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnisSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 952, 2)
    _ElementMap = inhaltsverzeichnis._ElementMap.copy()
    _AttributeMap = inhaltsverzeichnis._AttributeMap.copy()
    # Base type is inhaltsverzeichnis

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_inhaltsverzeichnisSIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 956, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_inhaltsverzeichnisSIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 957, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.inhaltsverzeichnisSIP = inhaltsverzeichnisSIP
Namespace.addCategoryObject('typeBinding', 'inhaltsverzeichnisSIP', inhaltsverzeichnisSIP)


# Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisAIP with content type ELEMENT_ONLY
class inhaltsverzeichnisAIP (inhaltsverzeichnis):
    """Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnisAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 963, 2)
    _ElementMap = inhaltsverzeichnis._ElementMap.copy()
    _AttributeMap = inhaltsverzeichnis._AttributeMap.copy()
    # Base type is inhaltsverzeichnis

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_inhaltsverzeichnisAIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 967, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_inhaltsverzeichnisAIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 968, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.inhaltsverzeichnisAIP = inhaltsverzeichnisAIP
Namespace.addCategoryObject('typeBinding', 'inhaltsverzeichnisAIP', inhaltsverzeichnisAIP)


# Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisDIP with content type ELEMENT_ONLY
class inhaltsverzeichnisDIP (inhaltsverzeichnis):
    """Complex type {http://bar.admin.ch/arelda/v4}inhaltsverzeichnisDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnisDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 974, 2)
    _ElementMap = inhaltsverzeichnis._ElementMap.copy()
    _AttributeMap = inhaltsverzeichnis._AttributeMap.copy()
    # Base type is inhaltsverzeichnis

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_inhaltsverzeichnisDIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 978, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_inhaltsverzeichnisDIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 979, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.inhaltsverzeichnisDIP = inhaltsverzeichnisDIP
Namespace.addCategoryObject('typeBinding', 'inhaltsverzeichnisDIP', inhaltsverzeichnisDIP)


# Complex type {http://bar.admin.ch/arelda/v4}datei with content type ELEMENT_ONLY
class datei (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}datei with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'datei')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 985, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpbar_admin_chareldav4_datei_httpbar_admin_chareldav4name', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6), )


    name = property(__name.value, __name.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}originalName uses Python identifier originalName
    __originalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'originalName'), 'originalName', '__httpbar_admin_chareldav4_datei_httpbar_admin_chareldav4originalName', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6), )


    originalName = property(__originalName.value, __originalName.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}pruefalgorithmus uses Python identifier pruefalgorithmus
    __pruefalgorithmus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus'), 'pruefalgorithmus', '__httpbar_admin_chareldav4_datei_httpbar_admin_chareldav4pruefalgorithmus', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6), )


    pruefalgorithmus = property(__pruefalgorithmus.value, __pruefalgorithmus.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}pruefsumme uses Python identifier pruefsumme
    __pruefsumme = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme'), 'pruefsumme', '__httpbar_admin_chareldav4_datei_httpbar_admin_chareldav4pruefsumme', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6), )


    pruefsumme = property(__pruefsumme.value, __pruefsumme.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}eigenschaft uses Python identifier eigenschaft
    __eigenschaft = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft'), 'eigenschaft', '__httpbar_admin_chareldav4_datei_httpbar_admin_chareldav4eigenschaft', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6), )


    eigenschaft = property(__eigenschaft.value, __eigenschaft.set, None, 'Name und Wert von technischen Eigenschaften der Dateien wie z.B. Felddelemiter.Name and value of technical properties of the files such as field delimiters.Nom et valeur des propri\xe9t\xe9s techniques des fichiers, p. ex.:s\xe9parateur de champs.')


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_datei_id', _module_typeBindings.idDatei, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1000, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1000, 4)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __originalName.name() : __originalName,
        __pruefalgorithmus.name() : __pruefalgorithmus,
        __pruefsumme.name() : __pruefsumme,
        __eigenschaft.name() : __eigenschaft
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.datei = datei
Namespace.addCategoryObject('typeBinding', 'datei', datei)


# Complex type {http://bar.admin.ch/arelda/v4}ordnerSIP with content type ELEMENT_ONLY
class ordnerSIP (ordner):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnerSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnerSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1038, 2)
    _ElementMap = ordner._ElementMap.copy()
    _AttributeMap = ordner._AttributeMap.copy()
    # Base type is ordner

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_ordnerSIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1042, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_ordnerSIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1043, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnerSIP = ordnerSIP
Namespace.addCategoryObject('typeBinding', 'ordnerSIP', ordnerSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnerAIP with content type ELEMENT_ONLY
class ordnerAIP (ordner):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnerAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnerAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1049, 2)
    _ElementMap = ordner._ElementMap.copy()
    _AttributeMap = ordner._AttributeMap.copy()
    # Base type is ordner

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_ordnerAIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1053, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_ordnerAIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1054, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnerAIP = ordnerAIP
Namespace.addCategoryObject('typeBinding', 'ordnerAIP', ordnerAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnerDIP with content type ELEMENT_ONLY
class ordnerDIP (ordner):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnerDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnerDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1060, 2)
    _ElementMap = ordner._ElementMap.copy()
    _AttributeMap = ordner._AttributeMap.copy()
    # Base type is ordner

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}ordner

    # Element {http://bar.admin.ch/arelda/v4}ordner uses Python identifier ordner
    __ordner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordner'), 'ordner', '__httpbar_admin_chareldav4_ordnerDIP_httpbar_admin_chareldav4ordner', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1064, 10), )


    ordner = property(__ordner.value, __ordner.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}datei uses Python identifier datei
    __datei = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datei'), 'datei', '__httpbar_admin_chareldav4_ordnerDIP_httpbar_admin_chareldav4datei', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1065, 10), )


    datei = property(__datei.value, __datei.set, None, None)

    _ElementMap.update({
        __ordner.name() : __ordner,
        __datei.name() : __datei
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnerDIP = ordnerDIP
Namespace.addCategoryObject('typeBinding', 'ordnerDIP', ordnerDIP)


# Complex type {http://bar.admin.ch/arelda/v4}archivischeNotiz with content type ELEMENT_ONLY
class archivischeNotiz (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}archivischeNotiz with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1091, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}notizDatum uses Python identifier notizDatum
    __notizDatum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notizDatum'), 'notizDatum', '__httpbar_admin_chareldav4_archivischeNotiz_httpbar_admin_chareldav4notizDatum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1093, 6), )


    notizDatum = property(__notizDatum.value, __notizDatum.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}notizErfasser uses Python identifier notizErfasser
    __notizErfasser = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notizErfasser'), 'notizErfasser', '__httpbar_admin_chareldav4_archivischeNotiz_httpbar_admin_chareldav4notizErfasser', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1094, 6), )


    notizErfasser = property(__notizErfasser.value, __notizErfasser.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}notizBeschreibung uses Python identifier notizBeschreibung
    __notizBeschreibung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notizBeschreibung'), 'notizBeschreibung', '__httpbar_admin_chareldav4_archivischeNotiz_httpbar_admin_chareldav4notizBeschreibung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1095, 6), )


    notizBeschreibung = property(__notizBeschreibung.value, __notizBeschreibung.set, None, None)


    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpbar_admin_chareldav4_archivischeNotiz_id', _module_typeBindings.idArchivischeNotiz, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1097, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1097, 4)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __notizDatum.name() : __notizDatum,
        __notizErfasser.name() : __notizErfasser,
        __notizBeschreibung.name() : __notizBeschreibung
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.archivischeNotiz = archivischeNotiz
Namespace.addCategoryObject('typeBinding', 'archivischeNotiz', archivischeNotiz)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = text4
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 16, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is text4

    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpbar_admin_chareldav4_CTD_ANON_name', _module_typeBindings.text4, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 19, 14)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 19, 14)

    name = property(__name.value, __name.set, None, 'Name des Merkmal - Werte PaaresName of the key-value pairNom de la paire caract\xe9ristique-valeur')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://bar.admin.ch/arelda/v4}paket with content type ELEMENT_ONLY
class paket_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}paket with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'paket')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 23, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://bar.admin.ch/arelda/v4}paketTyp uses Python identifier paketTyp
    __paketTyp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'paketTyp'), 'paketTyp', '__httpbar_admin_chareldav4_paket__httpbar_admin_chareldav4paketTyp', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6), )


    paketTyp = property(__paketTyp.value, __paketTyp.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}zusatzDaten uses Python identifier zusatzDaten
    __zusatzDaten = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), 'zusatzDaten', '__httpbar_admin_chareldav4_paket__httpbar_admin_chareldav4zusatzDaten', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6), )


    zusatzDaten = property(__zusatzDaten.value, __zusatzDaten.set, None, None)


    # Attribute schemaVersion uses Python identifier schemaVersion
    __schemaVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'schemaVersion'), 'schemaVersion', '__httpbar_admin_chareldav4_paket__schemaVersion', _module_typeBindings.schemaVersion, required=True)
    __schemaVersion._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 28, 4)
    __schemaVersion._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 28, 4)

    schemaVersion = property(__schemaVersion.value, __schemaVersion.set, None, None)

    _ElementMap.update({
        __paketTyp.name() : __paketTyp,
        __zusatzDaten.name() : __zusatzDaten
    })
    _AttributeMap.update({
        __schemaVersion.name() : __schemaVersion
    })
_module_typeBindings.paket_ = paket_
Namespace.addCategoryObject('typeBinding', 'paket', paket_)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverSIP with content type ELEMENT_ONLY
class ablieferungGeverSIP (ablieferungSIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 141, 2)
    _ElementMap = ablieferungSIP._ElementMap.copy()
    _AttributeMap = ablieferungSIP._AttributeMap.copy()
    # Base type is ablieferungSIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element angebotsnummer ({http://bar.admin.ch/arelda/v4}angebotsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element referenzBewertungsentscheid ({http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element referenzSchutzfristenFormular ({http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element schutzfristenkategorie ({http://bar.admin.ch/arelda/v4}schutzfristenkategorie) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element schutzfrist ({http://bar.admin.ch/arelda/v4}schutzfrist) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element archivischeNotiz ({http://bar.admin.ch/arelda/v4}archivischeNotiz) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungGeverSIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 145, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungGeverSIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 146, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungGeverSIP = ablieferungGeverSIP
Namespace.addCategoryObject('typeBinding', 'ablieferungGeverSIP', ablieferungGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesSIP with content type ELEMENT_ONLY
class ablieferungFilesSIP (ablieferungSIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 152, 2)
    _ElementMap = ablieferungSIP._ElementMap.copy()
    _AttributeMap = ablieferungSIP._AttributeMap.copy()
    # Base type is ablieferungSIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element angebotsnummer ({http://bar.admin.ch/arelda/v4}angebotsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element referenzBewertungsentscheid ({http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element referenzSchutzfristenFormular ({http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element schutzfristenkategorie ({http://bar.admin.ch/arelda/v4}schutzfristenkategorie) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element schutzfrist ({http://bar.admin.ch/arelda/v4}schutzfrist) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element archivischeNotiz ({http://bar.admin.ch/arelda/v4}archivischeNotiz) inherited from {http://bar.admin.ch/arelda/v4}ablieferungSIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungFilesSIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 156, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungFilesSIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 157, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungFilesSIP = ablieferungFilesSIP
Namespace.addCategoryObject('typeBinding', 'ablieferungFilesSIP', ablieferungFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverAIP with content type ELEMENT_ONLY
class ablieferungGeverAIP (ablieferungAIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 178, 2)
    _ElementMap = ablieferungAIP._ElementMap.copy()
    _AttributeMap = ablieferungAIP._AttributeMap.copy()
    # Base type is ablieferungAIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element angebotsnummer ({http://bar.admin.ch/arelda/v4}angebotsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element referenzBewertungsentscheid ({http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element referenzSchutzfristenFormular ({http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element schutzfristenkategorie ({http://bar.admin.ch/arelda/v4}schutzfristenkategorie) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element schutzfrist ({http://bar.admin.ch/arelda/v4}schutzfrist) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungGeverAIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 182, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungGeverAIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 183, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungGeverAIP = ablieferungGeverAIP
Namespace.addCategoryObject('typeBinding', 'ablieferungGeverAIP', ablieferungGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesAIP with content type ELEMENT_ONLY
class ablieferungFilesAIP (ablieferungAIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 189, 2)
    _ElementMap = ablieferungAIP._ElementMap.copy()
    _AttributeMap = ablieferungAIP._AttributeMap.copy()
    # Base type is ablieferungAIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element angebotsnummer ({http://bar.admin.ch/arelda/v4}angebotsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element referenzBewertungsentscheid ({http://bar.admin.ch/arelda/v4}referenzBewertungsentscheid) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element referenzSchutzfristenFormular ({http://bar.admin.ch/arelda/v4}referenzSchutzfristenFormular) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element schutzfristenkategorie ({http://bar.admin.ch/arelda/v4}schutzfristenkategorie) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element schutzfrist ({http://bar.admin.ch/arelda/v4}schutzfrist) inherited from {http://bar.admin.ch/arelda/v4}ablieferungAIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungFilesAIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 193, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungFilesAIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 194, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungFilesAIP = ablieferungFilesAIP
Namespace.addCategoryObject('typeBinding', 'ablieferungFilesAIP', ablieferungFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverDIP with content type ELEMENT_ONLY
class ablieferungGeverDIP (ablieferungDIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 211, 2)
    _ElementMap = ablieferungDIP._ElementMap.copy()
    _AttributeMap = ablieferungDIP._AttributeMap.copy()
    # Base type is ablieferungDIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungDIP

    # Element archivischeNotiz ({http://bar.admin.ch/arelda/v4}archivischeNotiz) inherited from {http://bar.admin.ch/arelda/v4}ablieferungDIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungGeverDIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 215, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungGeverDIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 216, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungGeverDIP = ablieferungGeverDIP
Namespace.addCategoryObject('typeBinding', 'ablieferungGeverDIP', ablieferungGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesDIP with content type ELEMENT_ONLY
class ablieferungFilesDIP (ablieferungDIP):
    """Complex type {http://bar.admin.ch/arelda/v4}ablieferungFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ablieferungFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 222, 2)
    _ElementMap = ablieferungDIP._ElementMap.copy()
    _AttributeMap = ablieferungDIP._AttributeMap.copy()
    # Base type is ablieferungDIP

    # Element ablieferungstyp ({http://bar.admin.ch/arelda/v4}ablieferungstyp) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferndeStelle ({http://bar.admin.ch/arelda/v4}ablieferndeStelle) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsteile ({http://bar.admin.ch/arelda/v4}ablieferungsteile) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element unstrukturierterAnhang ({http://bar.admin.ch/arelda/v4}unstrukturierterAnhang) inherited from {http://bar.admin.ch/arelda/v4}ablieferung

    # Element ablieferungsnummer ({http://bar.admin.ch/arelda/v4}ablieferungsnummer) inherited from {http://bar.admin.ch/arelda/v4}ablieferungDIP

    # Element archivischeNotiz ({http://bar.admin.ch/arelda/v4}archivischeNotiz) inherited from {http://bar.admin.ch/arelda/v4}ablieferungDIP

    # Element {http://bar.admin.ch/arelda/v4}provenienz uses Python identifier provenienz
    __provenienz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), 'provenienz', '__httpbar_admin_chareldav4_ablieferungFilesDIP_httpbar_admin_chareldav4provenienz', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 226, 10), )


    provenienz = property(__provenienz.value, __provenienz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystem uses Python identifier ordnungssystem
    __ordnungssystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), 'ordnungssystem', '__httpbar_admin_chareldav4_ablieferungFilesDIP_httpbar_admin_chareldav4ordnungssystem', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 227, 10), )


    ordnungssystem = property(__ordnungssystem.value, __ordnungssystem.set, None, None)

    _ElementMap.update({
        __provenienz.name() : __provenienz,
        __ordnungssystem.name() : __ordnungssystem
    })
    _AttributeMap.update({

    })
_module_typeBindings.ablieferungFilesDIP = ablieferungFilesDIP
Namespace.addCategoryObject('typeBinding', 'ablieferungFilesDIP', ablieferungFilesDIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverSIP with content type ELEMENT_ONLY
class provenienzGeverSIP (provenienzGever):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 261, 2)
    _ElementMap = provenienzGever._ElementMap.copy()
    _AttributeMap = provenienzGever._AttributeMap.copy()
    # Base type is provenienzGever

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzGever

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_provenienzGeverSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 265, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzGeverSIP = provenienzGeverSIP
Namespace.addCategoryObject('typeBinding', 'provenienzGeverSIP', provenienzGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverAIP with content type ELEMENT_ONLY
class provenienzGeverAIP (provenienzGever):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 271, 2)
    _ElementMap = provenienzGever._ElementMap.copy()
    _AttributeMap = provenienzGever._AttributeMap.copy()
    # Base type is provenienzGever

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzGever
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzGeverAIP = provenienzGeverAIP
Namespace.addCategoryObject('typeBinding', 'provenienzGeverAIP', provenienzGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverDIP with content type ELEMENT_ONLY
class provenienzGeverDIP (provenienzGever):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 279, 2)
    _ElementMap = provenienzGever._ElementMap.copy()
    _AttributeMap = provenienzGever._AttributeMap.copy()
    # Base type is provenienzGever

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzGever

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_provenienzGeverDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 283, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzGeverDIP = provenienzGeverDIP
Namespace.addCategoryObject('typeBinding', 'provenienzGeverDIP', provenienzGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesSIP with content type ELEMENT_ONLY
class provenienzFilesSIP (provenienzFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 301, 2)
    _ElementMap = provenienzFiles._ElementMap.copy()
    _AttributeMap = provenienzFiles._AttributeMap.copy()
    # Base type is provenienzFiles

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element verwandteSysteme ({http://bar.admin.ch/arelda/v4}verwandteSysteme) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element archivierungsmodusLoeschvorschriften ({http://bar.admin.ch/arelda/v4}archivierungsmodusLoeschvorschriften) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_provenienzFilesSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 305, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzFilesSIP = provenienzFilesSIP
Namespace.addCategoryObject('typeBinding', 'provenienzFilesSIP', provenienzFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesAIP with content type ELEMENT_ONLY
class provenienzFilesAIP (provenienzFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 311, 2)
    _ElementMap = provenienzFiles._ElementMap.copy()
    _AttributeMap = provenienzFiles._AttributeMap.copy()
    # Base type is provenienzFiles

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element verwandteSysteme ({http://bar.admin.ch/arelda/v4}verwandteSysteme) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element archivierungsmodusLoeschvorschriften ({http://bar.admin.ch/arelda/v4}archivierungsmodusLoeschvorschriften) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzFilesAIP = provenienzFilesAIP
Namespace.addCategoryObject('typeBinding', 'provenienzFilesAIP', provenienzFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesDIP with content type ELEMENT_ONLY
class provenienzFilesDIP (provenienzFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}provenienzFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'provenienzFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 319, 2)
    _ElementMap = provenienzFiles._ElementMap.copy()
    _AttributeMap = provenienzFiles._AttributeMap.copy()
    # Base type is provenienzFiles

    # Element aktenbildnerName ({http://bar.admin.ch/arelda/v4}aktenbildnerName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemName ({http://bar.admin.ch/arelda/v4}systemName) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element systemBeschreibung ({http://bar.admin.ch/arelda/v4}systemBeschreibung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element existenzzeitraum ({http://bar.admin.ch/arelda/v4}existenzzeitraum) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element geschichteAktenbildner ({http://bar.admin.ch/arelda/v4}geschichteAktenbildner) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}provenienz

    # Element registratur ({http://bar.admin.ch/arelda/v4}registratur) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element verwandteSysteme ({http://bar.admin.ch/arelda/v4}verwandteSysteme) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element archivierungsmodusLoeschvorschriften ({http://bar.admin.ch/arelda/v4}archivierungsmodusLoeschvorschriften) inherited from {http://bar.admin.ch/arelda/v4}provenienzFiles

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_provenienzFilesDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 323, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.provenienzFilesDIP = provenienzFilesDIP
Namespace.addCategoryObject('typeBinding', 'provenienzFilesDIP', provenienzFilesDIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverSIP with content type ELEMENT_ONLY
class ordnungssystemGeverSIP (ordnungssystemGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 356, 2)
    _ElementMap = ordnungssystemGever._ElementMap.copy()
    _AttributeMap = ordnungssystemGever._AttributeMap.copy()
    # Base type is ordnungssystemGever

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemGever

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemGeverSIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 360, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystemGeverSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 361, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemGeverSIP = ordnungssystemGeverSIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemGeverSIP', ordnungssystemGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverAIP with content type ELEMENT_ONLY
class ordnungssystemGeverAIP (ordnungssystemGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 367, 2)
    _ElementMap = ordnungssystemGever._ElementMap.copy()
    _AttributeMap = ordnungssystemGever._AttributeMap.copy()
    # Base type is ordnungssystemGever

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemGever

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemGeverAIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 371, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemGeverAIP = ordnungssystemGeverAIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemGeverAIP', ordnungssystemGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverDIP with content type ELEMENT_ONLY
class ordnungssystemGeverDIP (ordnungssystemGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 377, 2)
    _ElementMap = ordnungssystemGever._ElementMap.copy()
    _AttributeMap = ordnungssystemGever._AttributeMap.copy()
    # Base type is ordnungssystemGever

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemGever

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemGeverDIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 381, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystemGeverDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 382, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemGeverDIP = ordnungssystemGeverDIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemGeverDIP', ordnungssystemGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesSIP with content type ELEMENT_ONLY
class ordnungssystemFilesSIP (ordnungssystemFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 398, 2)
    _ElementMap = ordnungssystemFiles._ElementMap.copy()
    _AttributeMap = ordnungssystemFiles._AttributeMap.copy()
    # Base type is ordnungssystemFiles

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemFiles

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemFilesSIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 402, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystemFilesSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 403, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemFilesSIP = ordnungssystemFilesSIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemFilesSIP', ordnungssystemFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesAIP with content type ELEMENT_ONLY
class ordnungssystemFilesAIP (ordnungssystemFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 409, 2)
    _ElementMap = ordnungssystemFiles._ElementMap.copy()
    _AttributeMap = ordnungssystemFiles._AttributeMap.copy()
    # Base type is ordnungssystemFiles

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemFiles

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemFilesAIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 413, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemFilesAIP = ordnungssystemFilesAIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemFilesAIP', ordnungssystemFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesDIP with content type ELEMENT_ONLY
class ordnungssystemFilesDIP (ordnungssystemFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystemFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 419, 2)
    _ElementMap = ordnungssystemFiles._ElementMap.copy()
    _AttributeMap = ordnungssystemFiles._AttributeMap.copy()
    # Base type is ordnungssystemFiles

    # Element generation ({http://bar.admin.ch/arelda/v4}generation) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element anwendungszeitraum ({http://bar.admin.ch/arelda/v4}anwendungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element mitbenutzung ({http://bar.admin.ch/arelda/v4}mitbenutzung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystem

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemFiles

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystemFilesDIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 423, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystemFilesDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 424, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)

    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystemFilesDIP = ordnungssystemFilesDIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystemFilesDIP', ordnungssystemFilesDIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverSIP with content type ELEMENT_ONLY
class ordnungssystempositionGeverSIP (ordnungssystempositionGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 454, 2)
    _ElementMap = ordnungssystempositionGever._ElementMap.copy()
    _AttributeMap = ordnungssystempositionGever._AttributeMap.copy()
    # Base type is ordnungssystempositionGever

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 458, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 459, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 460, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 461, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 462, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystempositionGeverSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 463, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionGeverSIP = ordnungssystempositionGeverSIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionGeverSIP', ordnungssystempositionGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverAIP with content type ELEMENT_ONLY
class ordnungssystempositionGeverAIP (ordnungssystempositionGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 469, 2)
    _ElementMap = ordnungssystempositionGever._ElementMap.copy()
    _AttributeMap = ordnungssystempositionGever._AttributeMap.copy()
    # Base type is ordnungssystempositionGever

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ordnungssystempositionGeverAIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 473, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ordnungssystempositionGeverAIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 474, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_ordnungssystempositionGeverAIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 475, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionGeverAIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 476, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionGeverAIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 477, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionGeverAIP = ordnungssystempositionGeverAIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionGeverAIP', ordnungssystempositionGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverDIP with content type ELEMENT_ONLY
class ordnungssystempositionGeverDIP (ordnungssystempositionGever):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 483, 2)
    _ElementMap = ordnungssystempositionGever._ElementMap.copy()
    _AttributeMap = ordnungssystempositionGever._AttributeMap.copy()
    # Base type is ordnungssystempositionGever

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionGeverDIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 487, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionGeverDIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 488, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystempositionGeverDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 489, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionGever
    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionGeverDIP = ordnungssystempositionGeverDIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionGeverDIP', ordnungssystempositionGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesSIP with content type ELEMENT_ONLY
class ordnungssystempositionFilesSIP (ordnungssystempositionFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 507, 2)
    _ElementMap = ordnungssystempositionFiles._ElementMap.copy()
    _AttributeMap = ordnungssystempositionFiles._AttributeMap.copy()
    # Base type is ordnungssystempositionFiles

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 511, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 512, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 513, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 514, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 515, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystempositionFilesSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 527, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionFilesSIP = ordnungssystempositionFilesSIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionFilesSIP', ordnungssystempositionFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesAIP with content type ELEMENT_ONLY
class ordnungssystempositionFilesAIP (ordnungssystempositionFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 533, 2)
    _ElementMap = ordnungssystempositionFiles._ElementMap.copy()
    _AttributeMap = ordnungssystempositionFiles._AttributeMap.copy()
    # Base type is ordnungssystempositionFiles

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_ordnungssystempositionFilesAIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 537, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_ordnungssystempositionFilesAIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 538, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_ordnungssystempositionFilesAIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 539, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionFilesAIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 540, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionFilesAIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 541, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionFilesAIP = ordnungssystempositionFilesAIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionFilesAIP', ordnungssystempositionFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesDIP with content type ELEMENT_ONLY
class ordnungssystempositionFilesDIP (ordnungssystempositionFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}ordnungssystempositionFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ordnungssystempositionFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 558, 2)
    _ElementMap = ordnungssystempositionFiles._ElementMap.copy()
    _AttributeMap = ordnungssystempositionFiles._AttributeMap.copy()
    # Base type is ordnungssystempositionFiles

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystemposition

    # Element nummer ({http://bar.admin.ch/arelda/v4}nummer) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles

    # Element {http://bar.admin.ch/arelda/v4}ordnungssystemposition uses Python identifier ordnungssystemposition
    __ordnungssystemposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), 'ordnungssystemposition', '__httpbar_admin_chareldav4_ordnungssystempositionFilesDIP_httpbar_admin_chareldav4ordnungssystemposition', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 562, 10), )


    ordnungssystemposition = property(__ordnungssystemposition.value, __ordnungssystemposition.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_ordnungssystempositionFilesDIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 563, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_ordnungssystempositionFilesDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 575, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}ordnungssystempositionFiles
    _ElementMap.update({
        __ordnungssystemposition.name() : __ordnungssystemposition,
        __dossier.name() : __dossier,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.ordnungssystempositionFilesDIP = ordnungssystempositionFilesDIP
Namespace.addCategoryObject('typeBinding', 'ordnungssystempositionFilesDIP', ordnungssystempositionFilesDIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierGever with content type ELEMENT_ONLY
class dossierGever (dossier):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierGever with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierGever')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 609, 2)
    _ElementMap = dossier._ElementMap.copy()
    _AttributeMap = dossier._AttributeMap.copy()
    # Base type is dossier

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element {http://bar.admin.ch/arelda/v4}aktenzeichen uses Python identifier aktenzeichen
    __aktenzeichen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen'), 'aktenzeichen', '__httpbar_admin_chareldav4_dossierGever_httpbar_admin_chareldav4aktenzeichen', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10), )


    aktenzeichen = property(__aktenzeichen.value, __aktenzeichen.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}eroeffnungsdatum uses Python identifier eroeffnungsdatum
    __eroeffnungsdatum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum'), 'eroeffnungsdatum', '__httpbar_admin_chareldav4_dossierGever_httpbar_admin_chareldav4eroeffnungsdatum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10), )


    eroeffnungsdatum = property(__eroeffnungsdatum.value, __eroeffnungsdatum.set, None, 'Zeitpunkt, an dem das Dossier er\xf6ffnet worden ist.Time point at which the dossier was opened.Moment o\xf9 le dossier a \xe9t\xe9 ouvert.')


    # Element {http://bar.admin.ch/arelda/v4}abschlussdatum uses Python identifier abschlussdatum
    __abschlussdatum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum'), 'abschlussdatum', '__httpbar_admin_chareldav4_dossierGever_httpbar_admin_chareldav4abschlussdatum', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10), )


    abschlussdatum = property(__abschlussdatum.value, __abschlussdatum.set, None, 'Zeitpunkt, an dem das Dossier abgeschlossen worden ist.Time point at which the dossier was opened.Moment o\xf9 le dossier a \xe9t\xe9 clos.')


    # Element {http://bar.admin.ch/arelda/v4}vorgang uses Python identifier vorgang
    __vorgang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vorgang'), 'vorgang', '__httpbar_admin_chareldav4_dossierGever_httpbar_admin_chareldav4vorgang', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10), )


    vorgang = property(__vorgang.value, __vorgang.set, None, 'Vorgangsobjekte repr\xe4sentieren einzelne, abgrenzbare Gesch\xe4ftsf\xe4lle. Der Vorgang wird durchgef\xfchrt \xfcber eine Folge von einzelnen Aktivit\xe4ten. Einer einzelnen Aktivit\xe4t sind in der Regel ein federf\xfchrender Akteur zugewiesen.Process representing separately identifiable business cases . A process is performed through a sequence of individual operations. To each single activity is usually leading actorassigned.Les objets du processus repr\xe9sentent des cas particuliers d\xe9limitables')


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __aktenzeichen.name() : __aktenzeichen,
        __eroeffnungsdatum.name() : __eroeffnungsdatum,
        __abschlussdatum.name() : __abschlussdatum,
        __vorgang.name() : __vorgang
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierGever = dossierGever
Namespace.addCategoryObject('typeBinding', 'dossierGever', dossierGever)


# Complex type {http://bar.admin.ch/arelda/v4}dossierFiles with content type ELEMENT_ONLY
class dossierFiles (dossier):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierFiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierFiles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 684, 2)
    _ElementMap = dossier._ElementMap.copy()
    _AttributeMap = dossier._AttributeMap.copy()
    # Base type is dossier

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element {http://bar.admin.ch/arelda/v4}aktenzeichen uses Python identifier aktenzeichen
    __aktenzeichen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen'), 'aktenzeichen', '__httpbar_admin_chareldav4_dossierFiles_httpbar_admin_chareldav4aktenzeichen', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10), )


    aktenzeichen = property(__aktenzeichen.value, __aktenzeichen.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __aktenzeichen.name() : __aktenzeichen
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierFiles = dossierFiles
Namespace.addCategoryObject('typeBinding', 'dossierFiles', dossierFiles)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentGever with content type ELEMENT_ONLY
class dokumentGever (dokument):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentGever with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentGever')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 874, 2)
    _ElementMap = dokument._ElementMap.copy()
    _AttributeMap = dokument._AttributeMap.copy()
    # Base type is dokument

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element {http://bar.admin.ch/arelda/v4}anwendung uses Python identifier anwendung
    __anwendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'anwendung'), 'anwendung', '__httpbar_admin_chareldav4_dokumentGever_httpbar_admin_chareldav4anwendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10), )


    anwendung = property(__anwendung.value, __anwendung.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({
        __anwendung.name() : __anwendung
    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentGever = dokumentGever
Namespace.addCategoryObject('typeBinding', 'dokumentGever', dokumentGever)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentFiles with content type ELEMENT_ONLY
class dokumentFiles (dokument):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentFiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentFiles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 912, 2)
    _ElementMap = dokument._ElementMap.copy()
    _AttributeMap = dokument._AttributeMap.copy()
    # Base type is dokument

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentFiles = dokumentFiles
Namespace.addCategoryObject('typeBinding', 'dokumentFiles', dokumentFiles)


# Complex type {http://bar.admin.ch/arelda/v4}dateiSIP with content type ELEMENT_ONLY
class dateiSIP (datei):
    """Complex type {http://bar.admin.ch/arelda/v4}dateiSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateiSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1003, 2)
    _ElementMap = datei._ElementMap.copy()
    _AttributeMap = datei._AttributeMap.copy()
    # Base type is datei

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefalgorithmus ({http://bar.admin.ch/arelda/v4}pruefalgorithmus) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefsumme ({http://bar.admin.ch/arelda/v4}pruefsumme) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element eigenschaft ({http://bar.admin.ch/arelda/v4}eigenschaft) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dateiSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1007, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}datei
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dateiSIP = dateiSIP
Namespace.addCategoryObject('typeBinding', 'dateiSIP', dateiSIP)


# Complex type {http://bar.admin.ch/arelda/v4}dateiAIP with content type ELEMENT_ONLY
class dateiAIP (datei):
    """Complex type {http://bar.admin.ch/arelda/v4}dateiAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateiAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1013, 2)
    _ElementMap = datei._ElementMap.copy()
    _AttributeMap = datei._AttributeMap.copy()
    # Base type is datei

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefalgorithmus ({http://bar.admin.ch/arelda/v4}pruefalgorithmus) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefsumme ({http://bar.admin.ch/arelda/v4}pruefsumme) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element eigenschaft ({http://bar.admin.ch/arelda/v4}eigenschaft) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}datei
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.dateiAIP = dateiAIP
Namespace.addCategoryObject('typeBinding', 'dateiAIP', dateiAIP)


# Complex type {http://bar.admin.ch/arelda/v4}dateiDIP with content type ELEMENT_ONLY
class dateiDIP (datei):
    """Complex type {http://bar.admin.ch/arelda/v4}dateiDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateiDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1021, 2)
    _ElementMap = datei._ElementMap.copy()
    _AttributeMap = datei._AttributeMap.copy()
    # Base type is datei

    # Element name ({http://bar.admin.ch/arelda/v4}name) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element originalName ({http://bar.admin.ch/arelda/v4}originalName) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefalgorithmus ({http://bar.admin.ch/arelda/v4}pruefalgorithmus) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element pruefsumme ({http://bar.admin.ch/arelda/v4}pruefsumme) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element eigenschaft ({http://bar.admin.ch/arelda/v4}eigenschaft) inherited from {http://bar.admin.ch/arelda/v4}datei

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dateiDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1025, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}datei
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dateiDIP = dateiDIP
Namespace.addCategoryObject('typeBinding', 'dateiDIP', dateiDIP)


# Complex type {http://bar.admin.ch/arelda/v4}eigenschaftDatei with content type SIMPLE
class eigenschaftDatei (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://bar.admin.ch/arelda/v4}eigenschaftDatei with content type SIMPLE"""
    _TypeDefinition = eigenschaft
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'eigenschaftDatei')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1100, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is eigenschaft

    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpbar_admin_chareldav4_eigenschaftDatei_name', _module_typeBindings.text4, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1103, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1103, 8)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.eigenschaftDatei = eigenschaftDatei
Namespace.addCategoryObject('typeBinding', 'eigenschaftDatei', eigenschaftDatei)


# Complex type {http://bar.admin.ch/arelda/v4}paketSIP with content type ELEMENT_ONLY
class paketSIP (paket_):
    """Complex type {http://bar.admin.ch/arelda/v4}paketSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'paketSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 31, 2)
    _ElementMap = paket_._ElementMap.copy()
    _AttributeMap = paket_._AttributeMap.copy()
    # Base type is paket_

    # Element paketTyp ({http://bar.admin.ch/arelda/v4}paketTyp) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element {http://bar.admin.ch/arelda/v4}inhaltsverzeichnis uses Python identifier inhaltsverzeichnis
    __inhaltsverzeichnis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), 'inhaltsverzeichnis', '__httpbar_admin_chareldav4_paketSIP_httpbar_admin_chareldav4inhaltsverzeichnis', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 35, 10), )


    inhaltsverzeichnis = property(__inhaltsverzeichnis.value, __inhaltsverzeichnis.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ablieferung uses Python identifier ablieferung
    __ablieferung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), 'ablieferung', '__httpbar_admin_chareldav4_paketSIP_httpbar_admin_chareldav4ablieferung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 36, 10), )


    ablieferung = property(__ablieferung.value, __ablieferung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischerVorgang uses Python identifier archivischerVorgang
    __archivischerVorgang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang'), 'archivischerVorgang', '__httpbar_admin_chareldav4_paketSIP_httpbar_admin_chareldav4archivischerVorgang', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 37, 10), )


    archivischerVorgang = property(__archivischerVorgang.value, __archivischerVorgang.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzUebernahmedossier uses Python identifier referenzUebernahmedossier
    __referenzUebernahmedossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier'), 'referenzUebernahmedossier', '__httpbar_admin_chareldav4_paketSIP_httpbar_admin_chareldav4referenzUebernahmedossier', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 38, 10), )


    referenzUebernahmedossier = property(__referenzUebernahmedossier.value, __referenzUebernahmedossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_paketSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 39, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute schemaVersion inherited from {http://bar.admin.ch/arelda/v4}paket
    _ElementMap.update({
        __inhaltsverzeichnis.name() : __inhaltsverzeichnis,
        __ablieferung.name() : __ablieferung,
        __archivischerVorgang.name() : __archivischerVorgang,
        __referenzUebernahmedossier.name() : __referenzUebernahmedossier,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.paketSIP = paketSIP
Namespace.addCategoryObject('typeBinding', 'paketSIP', paketSIP)


# Complex type {http://bar.admin.ch/arelda/v4}paketAIP with content type ELEMENT_ONLY
class paketAIP (paket_):
    """Complex type {http://bar.admin.ch/arelda/v4}paketAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'paketAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 45, 2)
    _ElementMap = paket_._ElementMap.copy()
    _AttributeMap = paket_._AttributeMap.copy()
    # Base type is paket_

    # Element paketTyp ({http://bar.admin.ch/arelda/v4}paketTyp) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element {http://bar.admin.ch/arelda/v4}globaleAIPId uses Python identifier globaleAIPId
    __globaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId'), 'globaleAIPId', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4globaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 49, 10), )


    globaleAIPId = property(__globaleAIPId.value, __globaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}lokaleAIPId uses Python identifier lokaleAIPId
    __lokaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId'), 'lokaleAIPId', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4lokaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 50, 10), )


    lokaleAIPId = property(__lokaleAIPId.value, __lokaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}fruehereLokaleAIPId uses Python identifier fruehereLokaleAIPId
    __fruehereLokaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId'), 'fruehereLokaleAIPId', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4fruehereLokaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 51, 10), )


    fruehereLokaleAIPId = property(__fruehereLokaleAIPId.value, __fruehereLokaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}nameSIP uses Python identifier nameSIP
    __nameSIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameSIP'), 'nameSIP', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4nameSIP', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 52, 10), )


    nameSIP = property(__nameSIP.value, __nameSIP.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4version', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 53, 10), )


    version = property(__version.value, __version.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}inhaltsverzeichnis uses Python identifier inhaltsverzeichnis
    __inhaltsverzeichnis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), 'inhaltsverzeichnis', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4inhaltsverzeichnis', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 54, 10), )


    inhaltsverzeichnis = property(__inhaltsverzeichnis.value, __inhaltsverzeichnis.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ablieferung uses Python identifier ablieferung
    __ablieferung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), 'ablieferung', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4ablieferung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 55, 10), )


    ablieferung = property(__ablieferung.value, __ablieferung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischerVorgang uses Python identifier archivischerVorgang
    __archivischerVorgang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang'), 'archivischerVorgang', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4archivischerVorgang', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 56, 10), )


    archivischerVorgang = property(__archivischerVorgang.value, __archivischerVorgang.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}referenzUebernahmedossier uses Python identifier referenzUebernahmedossier
    __referenzUebernahmedossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier'), 'referenzUebernahmedossier', '__httpbar_admin_chareldav4_paketAIP_httpbar_admin_chareldav4referenzUebernahmedossier', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 57, 10), )


    referenzUebernahmedossier = property(__referenzUebernahmedossier.value, __referenzUebernahmedossier.set, None, None)


    # Attribute schemaVersion inherited from {http://bar.admin.ch/arelda/v4}paket
    _ElementMap.update({
        __globaleAIPId.name() : __globaleAIPId,
        __lokaleAIPId.name() : __lokaleAIPId,
        __fruehereLokaleAIPId.name() : __fruehereLokaleAIPId,
        __nameSIP.name() : __nameSIP,
        __version.name() : __version,
        __inhaltsverzeichnis.name() : __inhaltsverzeichnis,
        __ablieferung.name() : __ablieferung,
        __archivischerVorgang.name() : __archivischerVorgang,
        __referenzUebernahmedossier.name() : __referenzUebernahmedossier
    })
    _AttributeMap.update({

    })
_module_typeBindings.paketAIP = paketAIP
Namespace.addCategoryObject('typeBinding', 'paketAIP', paketAIP)


# Complex type {http://bar.admin.ch/arelda/v4}paketDIP with content type ELEMENT_ONLY
class paketDIP (paket_):
    """Complex type {http://bar.admin.ch/arelda/v4}paketDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'paketDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 63, 2)
    _ElementMap = paket_._ElementMap.copy()
    _AttributeMap = paket_._AttributeMap.copy()
    # Base type is paket_

    # Element paketTyp ({http://bar.admin.ch/arelda/v4}paketTyp) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}paket

    # Element {http://bar.admin.ch/arelda/v4}globaleAIPId uses Python identifier globaleAIPId
    __globaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId'), 'globaleAIPId', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4globaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 67, 10), )


    globaleAIPId = property(__globaleAIPId.value, __globaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}lokaleAIPId uses Python identifier lokaleAIPId
    __lokaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId'), 'lokaleAIPId', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4lokaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 68, 10), )


    lokaleAIPId = property(__lokaleAIPId.value, __lokaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}fruehereLokaleAIPId uses Python identifier fruehereLokaleAIPId
    __fruehereLokaleAIPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId'), 'fruehereLokaleAIPId', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4fruehereLokaleAIPId', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 69, 10), )


    fruehereLokaleAIPId = property(__fruehereLokaleAIPId.value, __fruehereLokaleAIPId.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}nameSIP uses Python identifier nameSIP
    __nameSIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nameSIP'), 'nameSIP', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4nameSIP', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 70, 10), )


    nameSIP = property(__nameSIP.value, __nameSIP.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}inhaltsverzeichnis uses Python identifier inhaltsverzeichnis
    __inhaltsverzeichnis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), 'inhaltsverzeichnis', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4inhaltsverzeichnis', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 71, 10), )


    inhaltsverzeichnis = property(__inhaltsverzeichnis.value, __inhaltsverzeichnis.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}ablieferung uses Python identifier ablieferung
    __ablieferung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), 'ablieferung', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4ablieferung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 72, 10), )


    ablieferung = property(__ablieferung.value, __ablieferung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_paketDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 73, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute schemaVersion inherited from {http://bar.admin.ch/arelda/v4}paket
    _ElementMap.update({
        __globaleAIPId.name() : __globaleAIPId,
        __lokaleAIPId.name() : __lokaleAIPId,
        __fruehereLokaleAIPId.name() : __fruehereLokaleAIPId,
        __nameSIP.name() : __nameSIP,
        __inhaltsverzeichnis.name() : __inhaltsverzeichnis,
        __ablieferung.name() : __ablieferung,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.paketDIP = paketDIP
Namespace.addCategoryObject('typeBinding', 'paketDIP', paketDIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierGeverSIP with content type ELEMENT_ONLY
class dossierGeverSIP (dossierGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 643, 2)
    _ElementMap = dossierGever._ElementMap.copy()
    _AttributeMap = dossierGever._AttributeMap.copy()
    # Base type is dossierGever

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element eroeffnungsdatum ({http://bar.admin.ch/arelda/v4}eroeffnungsdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element abschlussdatum ({http://bar.admin.ch/arelda/v4}abschlussdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element vorgang ({http://bar.admin.ch/arelda/v4}vorgang) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 647, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 648, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 649, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 650, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 651, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dossierGeverSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 652, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __dossier.name() : __dossier,
        __dokument.name() : __dokument,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierGeverSIP = dossierGeverSIP
Namespace.addCategoryObject('typeBinding', 'dossierGeverSIP', dossierGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierGeverAIP with content type ELEMENT_ONLY
class dossierGeverAIP (dossierGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 658, 2)
    _ElementMap = dossierGever._ElementMap.copy()
    _AttributeMap = dossierGever._AttributeMap.copy()
    # Base type is dossierGever

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element eroeffnungsdatum ({http://bar.admin.ch/arelda/v4}eroeffnungsdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element abschlussdatum ({http://bar.admin.ch/arelda/v4}abschlussdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element vorgang ({http://bar.admin.ch/arelda/v4}vorgang) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_dossierGeverAIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 662, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_dossierGeverAIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 663, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_dossierGeverAIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 664, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierGeverAIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 665, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierGeverAIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 666, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __dossier.name() : __dossier,
        __dokument.name() : __dokument
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierGeverAIP = dossierGeverAIP
Namespace.addCategoryObject('typeBinding', 'dossierGeverAIP', dossierGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierGeverDIP with content type ELEMENT_ONLY
class dossierGeverDIP (dossierGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 672, 2)
    _ElementMap = dossierGever._ElementMap.copy()
    _AttributeMap = dossierGever._AttributeMap.copy()
    # Base type is dossierGever

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element eroeffnungsdatum ({http://bar.admin.ch/arelda/v4}eroeffnungsdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element abschlussdatum ({http://bar.admin.ch/arelda/v4}abschlussdatum) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element vorgang ({http://bar.admin.ch/arelda/v4}vorgang) inherited from {http://bar.admin.ch/arelda/v4}dossierGever

    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierGeverDIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 676, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierGeverDIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 677, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dossierGeverDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 678, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __dossier.name() : __dossier,
        __dokument.name() : __dokument,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierGeverDIP = dossierGeverDIP
Namespace.addCategoryObject('typeBinding', 'dossierGeverDIP', dossierGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierFilesSIP with content type ELEMENT_ONLY
class dossierFilesSIP (dossierFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 694, 2)
    _ElementMap = dossierFiles._ElementMap.copy()
    _AttributeMap = dossierFiles._AttributeMap.copy()
    # Base type is dossierFiles

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierFiles

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 698, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 699, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 700, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 701, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 713, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dateiRef uses Python identifier dateiRef
    __dateiRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), 'dateiRef', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4dateiRef', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 725, 10), )


    dateiRef = property(__dateiRef.value, __dateiRef.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 726, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}umfang uses Python identifier umfang
    __umfang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'umfang'), 'umfang', '__httpbar_admin_chareldav4_dossierFilesSIP_httpbar_admin_chareldav4umfang', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 727, 10), )


    umfang = property(__umfang.value, __umfang.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __dossier.name() : __dossier,
        __dokument.name() : __dokument,
        __dateiRef.name() : __dateiRef,
        __archivischeNotiz.name() : __archivischeNotiz,
        __umfang.name() : __umfang
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierFilesSIP = dossierFilesSIP
Namespace.addCategoryObject('typeBinding', 'dossierFilesSIP', dossierFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierFilesAIP with content type ELEMENT_ONLY
class dossierFilesAIP (dossierFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 733, 2)
    _ElementMap = dossierFiles._ElementMap.copy()
    _AttributeMap = dossierFiles._AttributeMap.copy()
    # Base type is dossierFiles

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierFiles

    # Element {http://bar.admin.ch/arelda/v4}schutzfristenkategorie uses Python identifier schutzfristenkategorie
    __schutzfristenkategorie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), 'schutzfristenkategorie', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4schutzfristenkategorie', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 737, 10), )


    schutzfristenkategorie = property(__schutzfristenkategorie.value, __schutzfristenkategorie.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfrist uses Python identifier schutzfrist
    __schutzfrist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), 'schutzfrist', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4schutzfrist', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 738, 10), )


    schutzfrist = property(__schutzfrist.value, __schutzfrist.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}schutzfristenBegruendung uses Python identifier schutzfristenBegruendung
    __schutzfristenBegruendung = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), 'schutzfristenBegruendung', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4schutzfristenBegruendung', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 739, 10), )


    schutzfristenBegruendung = property(__schutzfristenBegruendung.value, __schutzfristenBegruendung.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 740, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 752, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dateiRef uses Python identifier dateiRef
    __dateiRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), 'dateiRef', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4dateiRef', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 764, 10), )


    dateiRef = property(__dateiRef.value, __dateiRef.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}umfang uses Python identifier umfang
    __umfang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'umfang'), 'umfang', '__httpbar_admin_chareldav4_dossierFilesAIP_httpbar_admin_chareldav4umfang', False, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 765, 10), )


    umfang = property(__umfang.value, __umfang.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __schutzfristenkategorie.name() : __schutzfristenkategorie,
        __schutzfrist.name() : __schutzfrist,
        __schutzfristenBegruendung.name() : __schutzfristenBegruendung,
        __dossier.name() : __dossier,
        __dokument.name() : __dokument,
        __dateiRef.name() : __dateiRef,
        __umfang.name() : __umfang
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierFilesAIP = dossierFilesAIP
Namespace.addCategoryObject('typeBinding', 'dossierFilesAIP', dossierFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}dossierFilesDIP with content type ELEMENT_ONLY
class dossierFilesDIP (dossierFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dossierFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dossierFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 771, 2)
    _ElementMap = dossierFiles._ElementMap.copy()
    _AttributeMap = dossierFiles._AttributeMap.copy()
    # Base type is dossierFiles

    # Element zusatzmerkmal ({http://bar.admin.ch/arelda/v4}zusatzmerkmal) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element inhalt ({http://bar.admin.ch/arelda/v4}inhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element formInhalt ({http://bar.admin.ch/arelda/v4}formInhalt) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element federfuehrendeOrganisationseinheit ({http://bar.admin.ch/arelda/v4}federfuehrendeOrganisationseinheit) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element entstehungszeitraumAnmerkung ({http://bar.admin.ch/arelda/v4}entstehungszeitraumAnmerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dossier

    # Element aktenzeichen ({http://bar.admin.ch/arelda/v4}aktenzeichen) inherited from {http://bar.admin.ch/arelda/v4}dossierFiles

    # Element {http://bar.admin.ch/arelda/v4}dossier uses Python identifier dossier
    __dossier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dossier'), 'dossier', '__httpbar_admin_chareldav4_dossierFilesDIP_httpbar_admin_chareldav4dossier', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 775, 10), )


    dossier = property(__dossier.value, __dossier.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dokument uses Python identifier dokument
    __dokument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dokument'), 'dokument', '__httpbar_admin_chareldav4_dossierFilesDIP_httpbar_admin_chareldav4dokument', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 787, 10), )


    dokument = property(__dokument.value, __dokument.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}dateiRef uses Python identifier dateiRef
    __dateiRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), 'dateiRef', '__httpbar_admin_chareldav4_dossierFilesDIP_httpbar_admin_chareldav4dateiRef', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 799, 10), )


    dateiRef = property(__dateiRef.value, __dateiRef.set, None, None)


    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dossierFilesDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 800, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dossier
    _ElementMap.update({
        __dossier.name() : __dossier,
        __dokument.name() : __dokument,
        __dateiRef.name() : __dateiRef,
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dossierFilesDIP = dossierFilesDIP
Namespace.addCategoryObject('typeBinding', 'dossierFilesDIP', dossierFilesDIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverSIP with content type ELEMENT_ONLY
class dokumentGeverSIP (dokumentGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentGeverSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 884, 2)
    _ElementMap = dokumentGever._ElementMap.copy()
    _AttributeMap = dokumentGever._AttributeMap.copy()
    # Base type is dokumentGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element anwendung ({http://bar.admin.ch/arelda/v4}anwendung) inherited from {http://bar.admin.ch/arelda/v4}dokumentGever

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dokumentGeverSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 888, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentGeverSIP = dokumentGeverSIP
Namespace.addCategoryObject('typeBinding', 'dokumentGeverSIP', dokumentGeverSIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverAIP with content type ELEMENT_ONLY
class dokumentGeverAIP (dokumentGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentGeverAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 894, 2)
    _ElementMap = dokumentGever._ElementMap.copy()
    _AttributeMap = dokumentGever._AttributeMap.copy()
    # Base type is dokumentGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element anwendung ({http://bar.admin.ch/arelda/v4}anwendung) inherited from {http://bar.admin.ch/arelda/v4}dokumentGever

    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentGeverAIP = dokumentGeverAIP
Namespace.addCategoryObject('typeBinding', 'dokumentGeverAIP', dokumentGeverAIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverDIP with content type ELEMENT_ONLY
class dokumentGeverDIP (dokumentGever):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentGeverDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentGeverDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 902, 2)
    _ElementMap = dokumentGever._ElementMap.copy()
    _AttributeMap = dokumentGever._AttributeMap.copy()
    # Base type is dokumentGever

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element anwendung ({http://bar.admin.ch/arelda/v4}anwendung) inherited from {http://bar.admin.ch/arelda/v4}dokumentGever

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dokumentGeverDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 906, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentGeverDIP = dokumentGeverDIP
Namespace.addCategoryObject('typeBinding', 'dokumentGeverDIP', dokumentGeverDIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesSIP with content type ELEMENT_ONLY
class dokumentFilesSIP (dokumentFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesSIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentFilesSIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 920, 2)
    _ElementMap = dokumentFiles._ElementMap.copy()
    _AttributeMap = dokumentFiles._AttributeMap.copy()
    # Base type is dokumentFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dokumentFilesSIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 924, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentFilesSIP = dokumentFilesSIP
Namespace.addCategoryObject('typeBinding', 'dokumentFilesSIP', dokumentFilesSIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesAIP with content type ELEMENT_ONLY
class dokumentFilesAIP (dokumentFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesAIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentFilesAIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 930, 2)
    _ElementMap = dokumentFiles._ElementMap.copy()
    _AttributeMap = dokumentFiles._AttributeMap.copy()
    # Base type is dokumentFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentFilesAIP = dokumentFilesAIP
Namespace.addCategoryObject('typeBinding', 'dokumentFilesAIP', dokumentFilesAIP)


# Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesDIP with content type ELEMENT_ONLY
class dokumentFilesDIP (dokumentFiles):
    """Complex type {http://bar.admin.ch/arelda/v4}dokumentFilesDIP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dokumentFilesDIP')
    _XSDLocation = pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 938, 2)
    _ElementMap = dokumentFiles._ElementMap.copy()
    _AttributeMap = dokumentFiles._AttributeMap.copy()
    # Base type is dokumentFiles

    # Element titel ({http://bar.admin.ch/arelda/v4}titel) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element autor ({http://bar.admin.ch/arelda/v4}autor) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element erscheinungsform ({http://bar.admin.ch/arelda/v4}erscheinungsform) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dokumenttyp ({http://bar.admin.ch/arelda/v4}dokumenttyp) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element registrierdatum ({http://bar.admin.ch/arelda/v4}registrierdatum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element entstehungszeitraum ({http://bar.admin.ch/arelda/v4}entstehungszeitraum) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element klassifizierungskategorie ({http://bar.admin.ch/arelda/v4}klassifizierungskategorie) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element datenschutz ({http://bar.admin.ch/arelda/v4}datenschutz) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatus ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatus) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element oeffentlichkeitsstatusBegruendung ({http://bar.admin.ch/arelda/v4}oeffentlichkeitsstatusBegruendung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element sonstigeBestimmungen ({http://bar.admin.ch/arelda/v4}sonstigeBestimmungen) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element bemerkung ({http://bar.admin.ch/arelda/v4}bemerkung) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element zusatzDaten ({http://bar.admin.ch/arelda/v4}zusatzDaten) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element dateiRef ({http://bar.admin.ch/arelda/v4}dateiRef) inherited from {http://bar.admin.ch/arelda/v4}dokument

    # Element {http://bar.admin.ch/arelda/v4}archivischeNotiz uses Python identifier archivischeNotiz
    __archivischeNotiz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), 'archivischeNotiz', '__httpbar_admin_chareldav4_dokumentFilesDIP_httpbar_admin_chareldav4archivischeNotiz', True, pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 942, 10), )


    archivischeNotiz = property(__archivischeNotiz.value, __archivischeNotiz.set, None, None)


    # Attribute id inherited from {http://bar.admin.ch/arelda/v4}dokument
    _ElementMap.update({
        __archivischeNotiz.name() : __archivischeNotiz
    })
    _AttributeMap.update({

    })
_module_typeBindings.dokumentFilesDIP = dokumentFilesDIP
Namespace.addCategoryObject('typeBinding', 'dokumentFilesDIP', dokumentFilesDIP)


paket = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paket'), paket_, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 22, 2))
Namespace.addCategoryObject('elementBinding', paket.name().localName(), paket)



archivischerVorgang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vorgangstyp'), vorgangstyp, scope=archivischerVorgang, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 81, 6)))

archivischerVorgang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'beschreibung'), beschreibung, scope=archivischerVorgang, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 82, 6)))

archivischerVorgang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datum'), zeitraum, scope=archivischerVorgang, documentation="Zeitpunkt, zu welchem der archivische Vorgang durchgef\xfchrt wurde.Time point at which the archival process was carried out.Moment o\xf9 l'activit\xe9 archivistique a \xe9t\xe9 effectu\xe9e.", location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 83, 6)))

archivischerVorgang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter'), bearbeiter, scope=archivischerVorgang, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 91, 6)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(archivischerVorgang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorgangstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 81, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(archivischerVorgang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'beschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 82, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(archivischerVorgang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 83, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(archivischerVorgang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 91, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
archivischerVorgang._Automaton = _BuildAutomaton()




ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp'), ablieferungstyp, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle'), ablieferndeStelle, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), historischerZeitraum, scope=ablieferung, documentation='Der Entstehungszeitraum der Ablieferung wird aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten Datum der Dokumente oder Dateien ermittelt, die der Ablieferung zugeordneten  sind. Der Zeitraum kann auch gesch\xe4tzt sein.The creation period of the submission is calculated from the earliest creation date and the most recent date of the documents or files allocated to the submission. The period may also be estimated.La p\xe9riode de cr\xe9ation du versement est d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date la plus r\xe9cente des documents ou des fichiers , qui sont attribu\xe9s au versement. La p\xe9riode peut aussi \xeatre estim\xe9e', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile'), ablieferungsteile, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungAblieferung, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6)))

ablieferung._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang'), unstrukturierterAnhang, scope=ablieferung, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ablieferung._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferung._Automaton = _BuildAutomaton_()




provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName'), aktenbildnerName, scope=provenienz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6)))

provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'systemName'), systemName, scope=provenienz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6)))

provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung'), systemBeschreibung, scope=provenienz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6)))

provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum'), historischerZeitraum, scope=provenienz, documentation="Zeitraum der Existenz des Aktenbildners.Period of existence of the records creator.P\xe9riode d'existence du producteur de dossiers.", location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6)))

provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner'), geschichteAktenbildner, scope=provenienz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6)))

provenienz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungProvenienz, scope=provenienz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(provenienz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienz._Automaton = _BuildAutomaton_2()




ordnungssystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generation'), generation, scope=ordnungssystem, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6)))

ordnungssystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum'), historischerZeitraum, scope=ordnungssystem, documentation='Zeitraum, seit/w\xe4hrend dem das Ordnungssystem bei der aktenbildenden Stelle eingesetzt wird/wurde.Period since/during which the classification system has been / was used by the records-creating authority.P\xe9riode depuis/pendant laquelle le syst\xe8me de classement a \xe9t\xe9/est employ\xe9 chez le service producteur de dossiers.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6)))

ordnungssystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung'), mitbenutzung, scope=ordnungssystem, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6)))

ordnungssystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungOrdnungssysstem, scope=ordnungssystem, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6)))

ordnungssystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=ordnungssystem, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystem._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystem._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystem._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystem._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystem._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystem._Automaton = _BuildAutomaton_3()




ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit'), federfuehrendeOrganisationseinheitOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), klassifizierungskategorieOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), datenschutzOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), oeffentlichkeitsstatusOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), oeffentlichkeitsstatusBegruendungOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), sonstigeBestimmungenOrdnungssystemposition, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6)))

ordnungssystemposition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=ordnungssystemposition, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemposition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystemposition._Automaton = _BuildAutomaton_4()




ordner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameOrdner, scope=ordner, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6)))

ordner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalName'), originalName, scope=ordner, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordner._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordner._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordner._Automaton = _BuildAutomaton_5()




unstrukturierterAnhang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), dateiRef, scope=unstrukturierterAnhang, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1079, 6)))

unstrukturierterAnhang._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiBeschreibung'), text4, scope=unstrukturierterAnhang, documentation='Zus\xe4tzliche unstrukturierte Informationen, welche der Ablieferung fakultativ mitgegeben werden k\xf6nnen.Additional unstructured information that may optionally be included with the submission.Informations non structur\xe9es compl\xe9mentaires facultatives qui peuvent accompagner le versement.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1080, 6)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1079, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(unstrukturierterAnhang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1079, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(unstrukturierterAnhang._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1080, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
unstrukturierterAnhang._Automaton = _BuildAutomaton_6()




historischerZeitpunkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ca'), ca, scope=historischerZeitpunkt, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 9, 6), unicode_default='false'))

historischerZeitpunkt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datum'), datumTypA, scope=historischerZeitpunkt, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 10, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 9, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(historischerZeitpunkt._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ca')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 9, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(historischerZeitpunkt._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 10, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
historischerZeitpunkt._Automaton = _BuildAutomaton_7()




historischerZeitraum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'von'), historischerZeitpunkt, scope=historischerZeitraum, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 16, 6)))

historischerZeitraum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bis'), historischerZeitpunkt, scope=historischerZeitraum, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 17, 6)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(historischerZeitraum._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'von')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 16, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(historischerZeitraum._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 17, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
historischerZeitraum._Automaton = _BuildAutomaton_8()




zeitraum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'von'), datumTypB, scope=zeitraum, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 69, 6)))

zeitraum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bis'), datumTypB, scope=zeitraum, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 70, 6)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(zeitraum._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'von')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 69, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(zeitraum._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/base.xsd', 70, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
zeitraum._Automaton = _BuildAutomaton_9()




zusatzDaten._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'merkmal'), CTD_ANON, scope=zusatzDaten, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 15, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(zusatzDaten._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'merkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/zusatzDaten.xsd', 15, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
zusatzDaten._Automaton = _BuildAutomaton_10()




ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), ablieferungsnummer, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer'), angebotsnummer, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid'), referenzBewertungsentscheid, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular'), referenzSchutzfristenFormular, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieAblieferung, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristAblieferung, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10)))

ablieferungSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ablieferungSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungSIP._Automaton = _BuildAutomaton_11()




ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), ablieferungsnummer, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 167, 10)))

ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer'), angebotsnummer, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10)))

ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid'), referenzBewertungsentscheid, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10)))

ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular'), referenzSchutzfristenFormular, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10)))

ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieAblieferung, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10)))

ablieferungAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristAblieferung, scope=ablieferungAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 167, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungAIP._Automaton = _BuildAutomaton_12()




ablieferungDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer'), ablieferungsnummer, scope=ablieferungDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 204, 10)))

ablieferungDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ablieferungDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 204, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ablieferungDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungDIP._Automaton = _BuildAutomaton_13()




provenienzGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registratur'), registratur, scope=provenienzGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzGever._Automaton = _BuildAutomaton_14()




provenienzFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registratur'), registratur, scope=provenienzFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10)))

provenienzFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme'), verwandteSysteme, scope=provenienzFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10)))

provenienzFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften'), archivierungsmodusLoeschvorschriften, scope=provenienzFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzFiles._Automaton = _BuildAutomaton_15()




ordnungssystemGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameOrdnungssystem, scope=ordnungssystemGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemGever._Automaton = _BuildAutomaton_16()




ordnungssystemFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameOrdnungssystem, scope=ordnungssystemFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystemFiles._Automaton = _BuildAutomaton_17()




ordnungssystempositionGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nummer'), nummer, scope=ordnungssystempositionGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10)))

ordnungssystempositionGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'titel'), titelOrdnungssystemposition, scope=ordnungssystempositionGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystempositionGever._Automaton = _BuildAutomaton_18()




ordnungssystempositionFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nummer'), nummer, scope=ordnungssystempositionFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10)))

ordnungssystempositionFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'titel'), titelOrdnungssystemposition, scope=ordnungssystempositionFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystempositionFiles._Automaton = _BuildAutomaton_19()




dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal'), zusatzmerkmal, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'titel'), titelDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inhalt'), inhalt, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formInhalt'), formInhalt, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform'), erscheinungsformDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit'), federfuehrendeOrganisationseinheitDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), historischerZeitraum, scope=dossier, documentation='Der Entstehungszeitraum des Dossiers wird aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten (\xc4nderungs)datum aller dem Dossier zugeordneten Dokumente oder Dateien ermittelt. Der Zeitraum kann auch gesch\xe4tzt sein.The creation period of the dossier is calculated from the earliest creation date and the most recent (change) date of all the documents or files allocated to the dossier. The period may also be estimated.La p\xe9riode de cr\xe9ation du dossier est d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date (de modification) la plus r\xe9cente de tous les documents ou fichiers attribu\xe9s au dossier. La p\xe9riode peut aussi \xeatre estim\xe9e.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung'), entstehungszeitraumAnmerkung, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), klassifizierungskategorieDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), datenschutzDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), oeffentlichkeitsstatusDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), oeffentlichkeitsstatusBegruendungDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), sonstigeBestimmungenDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungDossier, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6)))

dossier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=dossier, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dossier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossier._Automaton = _BuildAutomaton_20()




vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'titel'), titelVorgang, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 808, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'arbeitsanweisung'), arbeitsanweisungVorgang, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 809, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'federfuehrung'), federfuehrungVorgang, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 810, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verweis'), verweisVorgang, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 811, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungVorgang, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 812, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 813, 6)))

vorgangAktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aktivitaet'), aktivitaet, scope=vorgangAktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 814, 6)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 807, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 809, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 810, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 811, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 812, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 813, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 814, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 808, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'arbeitsanweisung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 809, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 810, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verweis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 811, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 812, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 813, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(vorgangAktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktivitaet')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 814, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
vorgangAktivitaet._Automaton = _BuildAutomaton_21()




aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vorschreibung'), vorschreibungAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 822, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'anweisung'), anweisungAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 823, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter'), bearbeiterAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 824, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum'), abschlussdatumAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 825, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verweis'), verweisAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 826, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungAktivitaet, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 827, 8)))

aktivitaet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=aktivitaet, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 828, 8)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 823, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 824, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 825, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 826, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 827, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 828, 8))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 822, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anweisung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 823, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bearbeiter')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 824, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 825, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verweis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 826, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 827, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(aktivitaet._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 828, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
aktivitaet._Automaton = _BuildAutomaton_22()




dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'titel'), titelDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'autor'), autor, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform'), erscheinungsformDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp'), dokumenttyp, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum'), historischerZeitpunkt, scope=dokument, documentation='Zeitpunkt an welchem das Dokument im System einem Dossier zugeordnet worden ist.Time point at which a document was added to the dossier.Moment o\xf9 le document est attribu\xe9 \xe0 un dossier dans le syst\xe8me.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum'), historischerZeitraum, scope=dokument, documentation='Zeitliche Angabe \xfcber die Entstehung des Dokuments. Als Entstehung des Dokuments kann das Datum seiner Erstellung angegeben werden, oder den Zeitraum, in dem das Dokument entstanden ist (aus dem \xe4ltesten Entstehungsdatum und dem j\xfcngsten Datum des Dokuments ermittelt). Der Zeitraum kann auch gesch\xe4tzt sein.Period of the origin of the document. As creation time of the document the date of its creation can be specified, or the period in which the document was created (determined from the oldest creation date and the most recent date of the document) . The period can also be estimated.Indications temporelles sur la cr\xe9ation du document. Comme cr\xe9ation du document peut \xeatre indiqu\xe9e la date de son \xe9laboration ou la p\xe9riode durant laquelle le document a \xe9t\xe9 cr\xe9\xe9 (d\xe9termin\xe9e par la date de cr\xe9ation la plus ancienne et par la date du document le plus r\xe9cent). La p\xe9riode peut aussi \xeatre estim\xe9e.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie'), klassifizierungskategorieDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datenschutz'), datenschutzDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus'), oeffentlichkeitsstatusDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung'), oeffentlichkeitsstatusBegruendungDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen'), sonstigeBestimmungenDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bemerkung'), bemerkungDokument, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6)))

dokument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), dateiRef, scope=dokument, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokument._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokument._Automaton = _BuildAutomaton_23()




inhaltsverzeichnisSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerSIP, scope=inhaltsverzeichnisSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 956, 10)))

inhaltsverzeichnisSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiSIP, scope=inhaltsverzeichnisSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 957, 10)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 956, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 957, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 956, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 957, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
inhaltsverzeichnisSIP._Automaton = _BuildAutomaton_24()




inhaltsverzeichnisAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerAIP, scope=inhaltsverzeichnisAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 967, 10)))

inhaltsverzeichnisAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiAIP, scope=inhaltsverzeichnisAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 968, 10)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 967, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 968, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 967, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 968, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
inhaltsverzeichnisAIP._Automaton = _BuildAutomaton_25()




inhaltsverzeichnisDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerDIP, scope=inhaltsverzeichnisDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 978, 10)))

inhaltsverzeichnisDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiDIP, scope=inhaltsverzeichnisDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 979, 10)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 978, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 979, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 978, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(inhaltsverzeichnisDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 979, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
inhaltsverzeichnisDIP._Automaton = _BuildAutomaton_26()




datei._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), nameDatei, scope=datei, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6)))

datei._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'originalName'), originalName, scope=datei, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6)))

datei._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus'), pruefalgorithmus, scope=datei, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6)))

datei._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme'), pruefsumme, scope=datei, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6)))

datei._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft'), eigenschaftDatei, scope=datei, documentation='Name und Wert von technischen Eigenschaften der Dateien wie z.B. Felddelemiter.Name and value of technical properties of the files such as field delimiters.Nom et valeur des propri\xe9t\xe9s techniques des fichiers, p. ex.:s\xe9parateur de champs.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(datei._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(datei._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(datei._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(datei._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(datei._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
datei._Automaton = _BuildAutomaton_27()




ordnerSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerSIP, scope=ordnerSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1042, 10)))

ordnerSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiSIP, scope=ordnerSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1043, 10)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1042, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1043, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnerSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnerSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnerSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1042, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnerSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1043, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnerSIP._Automaton = _BuildAutomaton_28()




ordnerAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerAIP, scope=ordnerAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1053, 10)))

ordnerAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiAIP, scope=ordnerAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1054, 10)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1053, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1054, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnerAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnerAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnerAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1053, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnerAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1054, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnerAIP._Automaton = _BuildAutomaton_29()




ordnerDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordner'), ordnerDIP, scope=ordnerDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1064, 10)))

ordnerDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datei'), dateiDIP, scope=ordnerDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1065, 10)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1064, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1065, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnerDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1033, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnerDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1034, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnerDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1064, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnerDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datei')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1065, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnerDIP._Automaton = _BuildAutomaton_30()




archivischeNotiz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notizDatum'), notizDatum, scope=archivischeNotiz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1093, 6)))

archivischeNotiz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notizErfasser'), notizErfasser, scope=archivischeNotiz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1094, 6)))

archivischeNotiz._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notizBeschreibung'), notizBeschreibung, scope=archivischeNotiz, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1095, 6)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1094, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(archivischeNotiz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notizDatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1093, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(archivischeNotiz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notizErfasser')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1094, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(archivischeNotiz._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notizBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1095, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
archivischeNotiz._Automaton = _BuildAutomaton_31()




paket_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'paketTyp'), paketTyp, scope=paket_, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6)))

paket_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten'), zusatzDaten, scope=paket_, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(paket_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paketTyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(paket_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
paket_._Automaton = _BuildAutomaton_32()




ablieferungGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzGeverSIP, scope=ablieferungGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 145, 10)))

ablieferungGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemGeverSIP, scope=ablieferungGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 146, 10)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 145, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 146, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungGeverSIP._Automaton = _BuildAutomaton_33()




ablieferungFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzFilesSIP, scope=ablieferungFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 156, 10)))

ablieferungFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemFilesSIP, scope=ablieferungFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 157, 10)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 129, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 130, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 131, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 132, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 133, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 134, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 135, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 156, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 157, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungFilesSIP._Automaton = _BuildAutomaton_34()




ablieferungGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzGeverAIP, scope=ablieferungGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 182, 10)))

ablieferungGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemGeverAIP, scope=ablieferungGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 183, 10)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 167, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 182, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 183, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungGeverAIP._Automaton = _BuildAutomaton_35()




ablieferungFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzFilesAIP, scope=ablieferungFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 193, 10)))

ablieferungFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemFilesAIP, scope=ablieferungFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 194, 10)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 167, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angebotsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 168, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzBewertungsentscheid')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 169, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzSchutzfristenFormular')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 170, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 171, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 172, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 193, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 194, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungFilesAIP._Automaton = _BuildAutomaton_36()




ablieferungGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzGeverDIP, scope=ablieferungGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 215, 10)))

ablieferungGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemGeverDIP, scope=ablieferungGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 216, 10)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 204, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 215, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 216, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungGeverDIP._Automaton = _BuildAutomaton_37()




ablieferungFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'provenienz'), provenienzFilesDIP, scope=ablieferungFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 226, 10)))

ablieferungFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem'), ordnungssystemFilesDIP, scope=ablieferungFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 227, 10)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungstyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferndeStelle')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 98, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 99, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsteile')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 107, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 109, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'unstrukturierterAnhang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 110, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferungsnummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 204, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 205, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'provenienz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 226, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ablieferungFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystem')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 227, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ablieferungFilesDIP._Automaton = _BuildAutomaton_38()




provenienzGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=provenienzGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 265, 10)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 265, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 265, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzGeverSIP._Automaton = _BuildAutomaton_39()




def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzGeverAIP._Automaton = _BuildAutomaton_40()




provenienzGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=provenienzGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 283, 10)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 283, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 255, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 283, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzGeverDIP._Automaton = _BuildAutomaton_41()




provenienzFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=provenienzFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 305, 10)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 305, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 305, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzFilesSIP._Automaton = _BuildAutomaton_42()




def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzFilesAIP._Automaton = _BuildAutomaton_43()




provenienzFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=provenienzFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 323, 10)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 323, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenbildnerName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 236, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'systemBeschreibung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'existenzzeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geschichteAktenbildner')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 246, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 247, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registratur')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 293, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verwandteSysteme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 294, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivierungsmodusLoeschvorschriften')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 295, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(provenienzFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 323, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
provenienzFilesDIP._Automaton = _BuildAutomaton_44()




ordnungssystemGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverSIP, scope=ordnungssystemGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 360, 10)))

ordnungssystemGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystemGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 361, 10)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 361, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 360, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 361, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemGeverSIP._Automaton = _BuildAutomaton_45()




ordnungssystemGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverAIP, scope=ordnungssystemGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 371, 10)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 371, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemGeverAIP._Automaton = _BuildAutomaton_46()




ordnungssystemGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverDIP, scope=ordnungssystemGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 381, 10)))

ordnungssystemGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystemGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 382, 10)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 382, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 350, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 381, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 382, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemGeverDIP._Automaton = _BuildAutomaton_47()




ordnungssystemFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesSIP, scope=ordnungssystemFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 402, 10)))

ordnungssystemFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystemFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 403, 10)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 403, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 402, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 403, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemFilesSIP._Automaton = _BuildAutomaton_48()




ordnungssystemFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesAIP, scope=ordnungssystemFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 413, 10)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 413, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemFilesAIP._Automaton = _BuildAutomaton_49()




ordnungssystemFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesDIP, scope=ordnungssystemFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 423, 10)))

ordnungssystemFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystemFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 424, 10)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 424, 10))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generation')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 332, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mitbenutzung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 340, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 341, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 342, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 392, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 423, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystemFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 424, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystemFilesDIP._Automaton = _BuildAutomaton_50()




ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieOrdnungssystemposition, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 458, 10)))

ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristOrdnungssystemposition, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 459, 10)))

ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungOrdnungssystemposition, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 460, 10)))

ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverSIP, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 461, 10)))

ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverSIP, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 462, 10)))

ordnungssystempositionGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystempositionGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 463, 10)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 458, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 459, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 460, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 461, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 462, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 463, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 458, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 459, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 460, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 461, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 462, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 463, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystempositionGeverSIP._Automaton = _BuildAutomaton_51()




ordnungssystempositionGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieOrdnungssystemposition, scope=ordnungssystempositionGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 473, 10)))

ordnungssystempositionGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristOrdnungssystemposition, scope=ordnungssystempositionGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 474, 10)))

ordnungssystempositionGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungOrdnungssystemposition, scope=ordnungssystempositionGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 475, 10)))

ordnungssystempositionGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverAIP, scope=ordnungssystempositionGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 476, 10)))

ordnungssystempositionGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverAIP, scope=ordnungssystempositionGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 477, 10)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 473, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 474, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 475, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 476, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 477, 10))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 473, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 474, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 475, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 476, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 477, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystempositionGeverAIP._Automaton = _BuildAutomaton_52()




ordnungssystempositionGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionGeverDIP, scope=ordnungssystempositionGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 487, 10)))

ordnungssystempositionGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverDIP, scope=ordnungssystempositionGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 488, 10)))

ordnungssystempositionGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystempositionGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 489, 10)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 487, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 488, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 489, 10))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 446, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 447, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 487, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 488, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 489, 10))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ordnungssystempositionGeverDIP._Automaton = _BuildAutomaton_53()




ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieOrdnungssystemposition, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 511, 10)))

ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristOrdnungssystemposition, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 512, 10)))

ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungOrdnungssystemposition, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 513, 10)))

ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesSIP, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 514, 10)))

ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesSIP, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 515, 10)))

ordnungssystempositionFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystempositionFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 527, 10)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 511, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 512, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 513, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 514, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 515, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 527, 10))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 511, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 512, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 513, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 514, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 515, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 527, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystempositionFilesSIP._Automaton = _BuildAutomaton_54()




ordnungssystempositionFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieOrdnungssystemposition, scope=ordnungssystempositionFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 537, 10)))

ordnungssystempositionFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristOrdnungssystemposition, scope=ordnungssystempositionFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 538, 10)))

ordnungssystempositionFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungOrdnungssystemposition, scope=ordnungssystempositionFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 539, 10)))

ordnungssystempositionFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesAIP, scope=ordnungssystempositionFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 540, 10)))

ordnungssystempositionFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesAIP, scope=ordnungssystempositionFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 541, 10)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 537, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 538, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 539, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 540, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 541, 10))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 537, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 538, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 539, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 540, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 541, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystempositionFilesAIP._Automaton = _BuildAutomaton_55()




ordnungssystempositionFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition'), ordnungssystempositionFilesDIP, scope=ordnungssystempositionFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 562, 10)))

ordnungssystempositionFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesDIP, scope=ordnungssystempositionFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 563, 10)))

ordnungssystempositionFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=ordnungssystempositionFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 575, 10)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 562, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 563, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 575, 10))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 432, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 433, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 434, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 435, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 436, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 437, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 438, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nummer')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 499, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 500, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ordnungssystemposition')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 562, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 563, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ordnungssystempositionFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 575, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ordnungssystempositionFilesDIP._Automaton = _BuildAutomaton_56()




dossierGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen'), aktenzeichen, scope=dossierGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10)))

dossierGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum'), historischerZeitpunkt, scope=dossierGever, documentation='Zeitpunkt, an dem das Dossier er\xf6ffnet worden ist.Time point at which the dossier was opened.Moment o\xf9 le dossier a \xe9t\xe9 ouvert.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10)))

dossierGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum'), historischerZeitpunkt, scope=dossierGever, documentation='Zeitpunkt, an dem das Dossier abgeschlossen worden ist.Time point at which the dossier was opened.Moment o\xf9 le dossier a \xe9t\xe9 clos.', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10)))

dossierGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vorgang'), vorgangAktivitaet, scope=dossierGever, documentation='Vorgangsobjekte repr\xe4sentieren einzelne, abgrenzbare Gesch\xe4ftsf\xe4lle. Der Vorgang wird durchgef\xfchrt \xfcber eine Folge von einzelnen Aktivit\xe4ten. Einer einzelnen Aktivit\xe4t sind in der Regel ein federf\xfchrender Akteur zugewiesen.Process representing separately identifiable business cases . A process is performed through a sequence of individual operations. To each single activity is usually leading actorassigned.Les objets du processus repr\xe9sentent des cas particuliers d\xe9limitables', location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierGever._Automaton = _BuildAutomaton_57()




dossierFiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen'), aktenzeichen, scope=dossierFiles, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierFiles._Automaton = _BuildAutomaton_58()




dokumentGever._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'anwendung'), anwendung, scope=dokumentGever, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGever._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentGever._Automaton = _BuildAutomaton_59()




def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFiles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentFiles._Automaton = _BuildAutomaton_60()




dateiSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dateiSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1007, 10)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1007, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dateiSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1007, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dateiSIP._Automaton = _BuildAutomaton_61()




def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dateiAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dateiAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dateiAIP._Automaton = _BuildAutomaton_62()




dateiDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dateiDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1025, 10)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1025, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 987, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'originalName')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 988, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefalgorithmus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 989, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pruefsumme')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 990, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eigenschaft')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 991, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dateiDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 1025, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dateiDIP._Automaton = _BuildAutomaton_63()




paketSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), inhaltsverzeichnisSIP, scope=paketSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 35, 10)))

paketSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), ablieferungSIP, scope=paketSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 36, 10)))

paketSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang'), archivischerVorgang, scope=paketSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 37, 10)))

paketSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier'), referenzUebernahmedossier, scope=paketSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 38, 10)))

paketSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=paketSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 39, 10)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 37, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 38, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 39, 10))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paketTyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 35, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 36, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 37, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 38, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(paketSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 39, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
paketSIP._Automaton = _BuildAutomaton_64()




paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId'), globaleAIPId, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 49, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId'), lokaleAIPId, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 50, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId'), fruehereLokaleAIPId, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 51, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameSIP'), nameSIP, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 52, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), version, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 53, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), inhaltsverzeichnisAIP, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 54, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), ablieferungAIP, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 55, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang'), archivischerVorgang, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 56, 10)))

paketAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier'), referenzUebernahmedossier, scope=paketAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 57, 10)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 51, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 52, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 56, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 57, 10))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paketTyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 49, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 50, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 51, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameSIP')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 52, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 53, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 54, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 55, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischerVorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 56, 10))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(paketAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referenzUebernahmedossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 57, 10))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
paketAIP._Automaton = _BuildAutomaton_65()




paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId'), globaleAIPId, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 67, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId'), lokaleAIPId, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 68, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId'), fruehereLokaleAIPId, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 69, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nameSIP'), nameSIP, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 70, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis'), inhaltsverzeichnisDIP, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 71, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ablieferung'), ablieferungDIP, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 72, 10)))

paketDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=paketDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 73, 10)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 69, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 70, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 73, 10))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'paketTyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 25, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 26, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'globaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 67, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lokaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 68, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fruehereLokaleAIPId')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 69, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nameSIP')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 70, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhaltsverzeichnis')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 71, 10))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ablieferung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 72, 10))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(paketDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 73, 10))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
paketDIP._Automaton = _BuildAutomaton_66()




dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieDossier, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 647, 10)))

dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristDossier, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 648, 10)))

dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungDossier, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 649, 10)))

dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverSIP, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 650, 10)))

dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentGeverSIP, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 651, 10)))

dossierGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dossierGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 652, 10)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 647, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 648, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 649, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 650, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 651, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 652, 10))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 647, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 648, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 649, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 650, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 651, 10))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 652, 10))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierGeverSIP._Automaton = _BuildAutomaton_67()




dossierGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieDossier, scope=dossierGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 662, 10)))

dossierGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristDossier, scope=dossierGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 663, 10)))

dossierGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungDossier, scope=dossierGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 664, 10)))

dossierGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverAIP, scope=dossierGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 665, 10)))

dossierGeverAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentGeverAIP, scope=dossierGeverAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 666, 10)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 662, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 663, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 664, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 665, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 666, 10))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 662, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 663, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 664, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 665, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 666, 10))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierGeverAIP._Automaton = _BuildAutomaton_68()




dossierGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierGeverDIP, scope=dossierGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 676, 10)))

dossierGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentGeverDIP, scope=dossierGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 677, 10)))

dossierGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dossierGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 678, 10)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 676, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 677, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 678, 10))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 613, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eroeffnungsdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 614, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'abschlussdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 622, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vorgang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 630, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 676, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 677, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(dossierGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 678, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierGeverDIP._Automaton = _BuildAutomaton_69()




dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieDossier, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 698, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristDossier, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 699, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungDossier, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 700, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesSIP, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 701, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentFilesSIP, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 713, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), dateiRef, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 725, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 726, 10)))

dossierFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'umfang'), umfang, scope=dossierFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 727, 10)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 698, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 699, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 700, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 701, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 713, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 725, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 726, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 727, 10))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 698, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 699, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 700, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 701, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 713, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 725, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 726, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'umfang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 727, 10))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierFilesSIP._Automaton = _BuildAutomaton_70()




dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie'), schutzfristenkategorieDossier, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 737, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist'), schutzfristDossier, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 738, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung'), schutzfristenBegruendungDossier, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 739, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesAIP, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 740, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentFilesAIP, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 752, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), dateiRef, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 764, 10)))

dossierFilesAIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'umfang'), umfang, scope=dossierFilesAIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 765, 10)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 737, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 738, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 739, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 740, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 752, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 764, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 765, 10))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenkategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 737, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfrist')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 738, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'schutzfristenBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 739, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 740, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 752, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 764, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'umfang')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 765, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierFilesAIP._Automaton = _BuildAutomaton_71()




dossierFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dossier'), dossierFilesDIP, scope=dossierFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 775, 10)))

dossierFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dokument'), dokumentFilesDIP, scope=dossierFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 787, 10)))

dossierFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateiRef'), dateiRef, scope=dossierFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 799, 10)))

dossierFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dossierFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 800, 10)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 775, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 787, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 799, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 800, 10))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzmerkmal')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 584, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 585, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInhalt')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 586, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 587, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'federfuehrendeOrganisationseinheit')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 588, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 589, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraumAnmerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 597, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 598, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 599, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 600, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 601, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 602, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 603, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 604, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aktenzeichen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 688, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dossier')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 775, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokument')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 787, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 799, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(dossierFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 800, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dossierFilesDIP._Automaton = _BuildAutomaton_72()




dokumentGeverSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dokumentGeverSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 888, 10)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 888, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 888, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentGeverSIP._Automaton = _BuildAutomaton_73()




def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentGeverAIP._Automaton = _BuildAutomaton_74()




dokumentGeverDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dokumentGeverDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 906, 10)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 906, 10))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'anwendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 878, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(dokumentGeverDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 906, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentGeverDIP._Automaton = _BuildAutomaton_75()




dokumentFilesSIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dokumentFilesSIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 924, 10)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 924, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesSIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 924, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentFilesSIP._Automaton = _BuildAutomaton_76()




def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesAIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentFilesAIP._Automaton = _BuildAutomaton_77()




dokumentFilesDIP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz'), archivischeNotiz, scope=dokumentFilesDIP, location=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 942, 10)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 942, 10))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'titel')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'autor')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 843, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'erscheinungsform')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 844, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dokumenttyp')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 845, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registrierdatum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 846, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entstehungszeitraum')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'klassifizierungskategorie')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 862, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datenschutz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 863, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatus')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 864, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'oeffentlichkeitsstatusBegruendung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 865, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sonstigeBestimmungen')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 866, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bemerkung')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 867, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zusatzDaten')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 868, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateiRef')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 869, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(dokumentFilesDIP._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'archivischeNotiz')), pyxb.utils.utility.Location('/Users/tom/Projects/opengever.sgdemo/src/opengever.core/opengever/disposition/ech0160/schemas/arelda.xsd', 942, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
dokumentFilesDIP._Automaton = _BuildAutomaton_78()

