Successor Task Controller
=========================

The successor task controller manages predecessor and successor references
between tasks.

    >>> from opengever.base.interfaces import IOGUid
    >>> from opengever.task.interfaces import ISuccessorTaskController
    >>> from plone.registry.interfaces import IRegistry
    >>> from zope.component import getUtility
    >>> from zope.intid.interfaces import IIntIds

We need the client id to be configured properly:

    >>> registry = getUtility(IRegistry)
    >>> CLIENT_ID = u'm1'
    >>> registry['opengever.ogds.base.interfaces.' + \
    ...     'IClientConfiguration.cid'] = CLIENT_ID

We use the oguids for relations:

    >>> global oguids
    >>> oguids = getUtility(IOGUid)
    >>> global intids
    >>> intids = getUtility(IIntIds)

We need to mock solr:

    >>> from opengever.globalsolr.tests.mock_solr import provide_solr_mock
    >>> fake_solr = provide_solr_mock()

    >>> def solr_filterer(obj, query, **parameters):
    ...     q_cid = query.get('client_id', None)
    ...     q_intid = query.get('intid', None)
    ...     q_predecessor = query.get('predecessor', None)
    ...     if q_predecessor and q_predecessor == getattr(obj,
    ...             'predecessor', None):
    ...         return True
    ...     elif q_cid and q_intid and q_cid == CLIENT_ID and \
    ...             int(q_intid) == intids.getId(obj):
    ...         return True
    ...     else:
    ...         return False

Let's create some tasks:

    >>> self.folder.invokeFactory('opengever.task.task', 'task-1')
    'task-1'
    >>> t1 = self.folder.get('task-1')
    >>> fake_solr.register(t1, solr_filterer)
    >>> self.folder.invokeFactory('opengever.task.task', 'task-2')
    'task-2'
    >>> t2 = self.folder.get('task-2')
    >>> fake_solr.register(t2, solr_filterer)

T1 is a successor of t2:

    >>> t1_oguid = oguids.get_id(t1)
    >>> t1_oguid
    u'm1:...'
    >>> ISuccessorTaskController(t2).set_predecessor(t1_oguid)
    True

    >>> ISuccessorTaskController(t2).get_predecessor()
    <FakeFlair(1): task-1 <opengever.task.task>>

    >>> ISuccessorTaskController(t1).get_successors()
    [<FakeFlair(2): task-2 <opengever.task.task>>]


We should be able to try to set a bad predecessor, but it should not fail.

    >>> ISuccessorTaskController(t1).set_predecessor(u'mX:1')
    False
    >>> print ISuccessorTaskController(t1).get_predecessor()
    None
